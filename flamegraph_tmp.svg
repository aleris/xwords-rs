<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (62 samples, 0.49%)</title><rect x="5.8653%" y="85" width="0.4868%" height="15" fill="rgb(217,221,51)"/><text x="6.1153%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (62 samples, 0.49%)</title><rect x="5.8653%" y="69" width="0.4868%" height="15" fill="rgb(233,8,16)"/><text x="6.1153%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 0.49%)</title><rect x="5.8653%" y="53" width="0.4868%" height="15" fill="rgb(220,23,39)"/><text x="6.1153%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (56 samples, 0.44%)</title><rect x="5.9124%" y="37" width="0.4397%" height="15" fill="rgb(236,20,54)"/><text x="6.1624%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.11%)</title><rect x="6.3521%" y="69" width="0.1099%" height="15" fill="rgb(213,22,0)"/><text x="6.6021%" y="79.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (14 samples, 0.11%)</title><rect x="6.3521%" y="53" width="0.1099%" height="15" fill="rgb(226,144,21)"/><text x="6.6021%" y="63.50"></text></g><g><title>core::char::convert::from_u32_unchecked (14 samples, 0.11%)</title><rect x="6.3521%" y="37" width="0.1099%" height="15" fill="rgb(240,32,26)"/><text x="6.6021%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (16 samples, 0.13%)</title><rect x="6.4620%" y="53" width="0.1256%" height="15" fill="rgb(252,225,52)"/><text x="6.7120%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (16 samples, 0.13%)</title><rect x="6.4620%" y="37" width="0.1256%" height="15" fill="rgb(227,113,38)"/><text x="6.7120%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 0.14%)</title><rect x="6.5876%" y="37" width="0.1413%" height="15" fill="rgb(246,146,48)"/><text x="6.8376%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (34 samples, 0.27%)</title><rect x="6.5876%" y="53" width="0.2670%" height="15" fill="rgb(229,83,50)"/><text x="6.8376%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (15 samples, 0.12%)</title><rect x="6.9017%" y="37" width="0.1178%" height="15" fill="rgb(248,146,37)"/><text x="7.1517%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.71%)</title><rect x="6.3521%" y="85" width="0.7067%" height="15" fill="rgb(230,102,37)"/><text x="6.6021%" y="95.50"></text></g><g><title>core::str::next_code_point (76 samples, 0.60%)</title><rect x="6.4620%" y="69" width="0.5967%" height="15" fill="rgb(226,129,21)"/><text x="6.7120%" y="79.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.20%)</title><rect x="6.8546%" y="53" width="0.2041%" height="15" fill="rgb(241,215,13)"/><text x="7.1046%" y="63.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (44 samples, 0.35%)</title><rect x="7.0587%" y="69" width="0.3455%" height="15" fill="rgb(217,128,6)"/><text x="7.3087%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (34 samples, 0.27%)</title><rect x="7.1372%" y="53" width="0.2670%" height="15" fill="rgb(248,48,54)"/><text x="7.3872%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (34 samples, 0.27%)</title><rect x="7.1372%" y="37" width="0.2670%" height="15" fill="rgb(219,83,38)"/><text x="7.3872%" y="47.50"></text></g><g><title>core::ptr::read (14 samples, 0.11%)</title><rect x="7.4121%" y="37" width="0.1099%" height="15" fill="rgb(252,210,52)"/><text x="7.6621%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (75 samples, 0.59%)</title><rect x="7.0587%" y="85" width="0.5889%" height="15" fill="rgb(221,200,4)"/><text x="7.3087%" y="95.50"></text></g><g><title>core::mem::swap (31 samples, 0.24%)</title><rect x="7.4042%" y="69" width="0.2434%" height="15" fill="rgb(216,58,11)"/><text x="7.6542%" y="79.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (31 samples, 0.24%)</title><rect x="7.4042%" y="53" width="0.2434%" height="15" fill="rgb(213,152,6)"/><text x="7.6542%" y="63.50"></text></g><g><title>rustc_demangle::try_demangle (251 samples, 1.97%)</title><rect x="5.7789%" y="133" width="1.9708%" height="15" fill="rgb(209,210,52)"/><text x="6.0289%" y="143.50">r..</text></g><g><title>rustc_demangle::demangle (251 samples, 1.97%)</title><rect x="5.7789%" y="117" width="1.9708%" height="15" fill="rgb(216,26,42)"/><text x="6.0289%" y="127.50">r..</text></g><g><title>rustc_demangle::legacy::demangle (240 samples, 1.88%)</title><rect x="5.8653%" y="101" width="1.8844%" height="15" fill="rgb(229,8,52)"/><text x="6.1153%" y="111.50">r..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (255 samples, 2.00%)</title><rect x="5.7789%" y="149" width="2.0022%" height="15" fill="rgb(234,11,12)"/><text x="6.0289%" y="159.50">&lt;..</text></g><g><title>core::str::&lt;impl str&gt;::find (23 samples, 0.18%)</title><rect x="8.0088%" y="69" width="0.1806%" height="15" fill="rgb(222,132,34)"/><text x="8.2588%" y="79.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (14 samples, 0.11%)</title><rect x="8.2836%" y="37" width="0.1099%" height="15" fill="rgb(246,51,18)"/><text x="8.5336%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (31 samples, 0.24%)</title><rect x="8.1894%" y="69" width="0.2434%" height="15" fill="rgb(234,40,7)"/><text x="8.4394%" y="79.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (26 samples, 0.20%)</title><rect x="8.2286%" y="53" width="0.2041%" height="15" fill="rgb(240,11,8)"/><text x="8.4786%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (21 samples, 0.16%)</title><rect x="8.4485%" y="53" width="0.1649%" height="15" fill="rgb(218,222,21)"/><text x="8.6985%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (31 samples, 0.24%)</title><rect x="8.4485%" y="69" width="0.2434%" height="15" fill="rgb(238,59,21)"/><text x="8.6985%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (15 samples, 0.12%)</title><rect x="8.6919%" y="53" width="0.1178%" height="15" fill="rgb(252,128,29)"/><text x="8.9419%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.11%)</title><rect x="8.6997%" y="37" width="0.1099%" height="15" fill="rgb(245,61,34)"/><text x="8.9497%" y="47.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (132 samples, 1.04%)</title><rect x="7.7811%" y="133" width="1.0364%" height="15" fill="rgb(246,36,52)"/><text x="8.0311%" y="143.50"></text></g><g><title>core::fmt::write/core::fmt::run (132 samples, 1.04%)</title><rect x="7.7811%" y="117" width="1.0364%" height="15" fill="rgb(243,48,49)"/><text x="8.0311%" y="127.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (132 samples, 1.04%)</title><rect x="7.7811%" y="101" width="1.0364%" height="15" fill="rgb(252,114,15)"/><text x="8.0311%" y="111.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (132 samples, 1.04%)</title><rect x="7.7811%" y="85" width="1.0364%" height="15" fill="rgb(243,228,39)"/><text x="8.0311%" y="95.50"></text></g><g><title>rustc_demangle::legacy::is_rust_hash (16 samples, 0.13%)</title><rect x="8.6919%" y="69" width="0.1256%" height="15" fill="rgb(205,143,2)"/><text x="8.9419%" y="79.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (50 samples, 0.39%)</title><rect x="8.8489%" y="85" width="0.3926%" height="15" fill="rgb(224,122,19)"/><text x="9.0989%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (50 samples, 0.39%)</title><rect x="8.8489%" y="69" width="0.3926%" height="15" fill="rgb(250,66,51)"/><text x="9.0989%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 0.39%)</title><rect x="8.8489%" y="53" width="0.3926%" height="15" fill="rgb(224,134,48)"/><text x="9.0989%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 0.36%)</title><rect x="8.8803%" y="37" width="0.3612%" height="15" fill="rgb(219,137,43)"/><text x="9.1303%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (18 samples, 0.14%)</title><rect x="9.3357%" y="53" width="0.1413%" height="15" fill="rgb(207,44,47)"/><text x="9.5857%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (18 samples, 0.14%)</title><rect x="9.3357%" y="37" width="0.1413%" height="15" fill="rgb(245,216,11)"/><text x="9.5857%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.10%)</title><rect x="9.4771%" y="37" width="0.1021%" height="15" fill="rgb(236,168,30)"/><text x="9.7271%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (25 samples, 0.20%)</title><rect x="9.4771%" y="53" width="0.1963%" height="15" fill="rgb(249,110,10)"/><text x="9.7271%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (16 samples, 0.13%)</title><rect x="9.6969%" y="37" width="0.1256%" height="15" fill="rgb(226,10,48)"/><text x="9.9469%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.68%)</title><rect x="9.2415%" y="85" width="0.6753%" height="15" fill="rgb(243,14,47)"/><text x="9.4915%" y="95.50"></text></g><g><title>core::str::next_code_point (74 samples, 0.58%)</title><rect x="9.3357%" y="69" width="0.5810%" height="15" fill="rgb(208,184,14)"/><text x="9.5857%" y="79.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.24%)</title><rect x="9.6734%" y="53" width="0.2434%" height="15" fill="rgb(236,198,54)"/><text x="9.9234%" y="63.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (33 samples, 0.26%)</title><rect x="9.9168%" y="69" width="0.2591%" height="15" fill="rgb(241,186,5)"/><text x="10.1668%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (25 samples, 0.20%)</title><rect x="9.9796%" y="53" width="0.1963%" height="15" fill="rgb(237,191,37)"/><text x="10.2296%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (25 samples, 0.20%)</title><rect x="9.9796%" y="37" width="0.1963%" height="15" fill="rgb(216,223,24)"/><text x="10.2296%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (60 samples, 0.47%)</title><rect x="9.9168%" y="85" width="0.4711%" height="15" fill="rgb(210,29,29)"/><text x="10.1668%" y="95.50"></text></g><g><title>core::mem::swap (27 samples, 0.21%)</title><rect x="10.1759%" y="69" width="0.2120%" height="15" fill="rgb(243,36,45)"/><text x="10.4259%" y="79.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (27 samples, 0.21%)</title><rect x="10.1759%" y="53" width="0.2120%" height="15" fill="rgb(217,109,6)"/><text x="10.4259%" y="63.50"></text></g><g><title>core::ops::function::FnOnce::call_once (597 samples, 4.69%)</title><rect x="5.7553%" y="469" width="4.6875%" height="15" fill="rgb(240,106,11)"/><text x="6.0053%" y="479.50">core:..</text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (597 samples, 4.69%)</title><rect x="5.7553%" y="453" width="4.6875%" height="15" fill="rgb(230,187,12)"/><text x="6.0053%" y="463.50">xword..</text></g><g><title>xwords::tests::puz_2020_10_12_works (597 samples, 4.69%)</title><rect x="5.7553%" y="437" width="4.6875%" height="15" fill="rgb(242,88,45)"/><text x="6.0053%" y="447.50">xword..</text></g><g><title>xwords::fill_crossword (597 samples, 4.69%)</title><rect x="5.7553%" y="421" width="4.6875%" height="15" fill="rgb(240,181,21)"/><text x="6.0053%" y="431.50">xword..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (597 samples, 4.69%)</title><rect x="5.7553%" y="405" width="4.6875%" height="15" fill="rgb(252,126,44)"/><text x="6.0053%" y="415.50">pprof..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (597 samples, 4.69%)</title><rect x="5.7553%" y="389" width="4.6875%" height="15" fill="rgb(230,157,48)"/><text x="6.0053%" y="399.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (597 samples, 4.69%)</title><rect x="5.7553%" y="373" width="4.6875%" height="15" fill="rgb(224,15,2)"/><text x="6.0053%" y="383.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (597 samples, 4.69%)</title><rect x="5.7553%" y="357" width="4.6875%" height="15" fill="rgb(215,1,6)"/><text x="6.0053%" y="367.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (597 samples, 4.69%)</title><rect x="5.7553%" y="341" width="4.6875%" height="15" fill="rgb(210,225,13)"/><text x="6.0053%" y="351.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (597 samples, 4.69%)</title><rect x="5.7553%" y="325" width="4.6875%" height="15" fill="rgb(214,25,30)"/><text x="6.0053%" y="335.50">alloc..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (597 samples, 4.69%)</title><rect x="5.7553%" y="309" width="4.6875%" height="15" fill="rgb(254,43,34)"/><text x="6.0053%" y="319.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (597 samples, 4.69%)</title><rect x="5.7553%" y="293" width="4.6875%" height="15" fill="rgb(210,6,40)"/><text x="6.0053%" y="303.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (597 samples, 4.69%)</title><rect x="5.7553%" y="277" width="4.6875%" height="15" fill="rgb(251,76,23)"/><text x="6.0053%" y="287.50">core:..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (597 samples, 4.69%)</title><rect x="5.7553%" y="261" width="4.6875%" height="15" fill="rgb(214,7,14)"/><text x="6.0053%" y="271.50">pprof..</text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (597 samples, 4.69%)</title><rect x="5.7553%" y="245" width="4.6875%" height="15" fill="rgb(227,100,33)"/><text x="6.0053%" y="255.50">alloc..</text></g><g><title>core::fmt::write (597 samples, 4.69%)</title><rect x="5.7553%" y="229" width="4.6875%" height="15" fill="rgb(211,49,7)"/><text x="6.0053%" y="239.50">core:..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (597 samples, 4.69%)</title><rect x="5.7553%" y="213" width="4.6875%" height="15" fill="rgb(228,223,1)"/><text x="6.0053%" y="223.50">&lt;&amp;T a..</text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (597 samples, 4.69%)</title><rect x="5.7553%" y="197" width="4.6875%" height="15" fill="rgb(245,92,22)"/><text x="6.0053%" y="207.50">&lt;ppro..</text></g><g><title>symbolic_demangle::demangle (594 samples, 4.66%)</title><rect x="5.7789%" y="181" width="4.6639%" height="15" fill="rgb(232,221,10)"/><text x="6.0289%" y="191.50">symbo..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (594 samples, 4.66%)</title><rect x="5.7789%" y="165" width="4.6639%" height="15" fill="rgb(252,175,23)"/><text x="6.0289%" y="175.50">&lt;symb..</text></g><g><title>symbolic_demangle::try_demangle_rust (339 samples, 2.66%)</title><rect x="7.7811%" y="149" width="2.6617%" height="15" fill="rgb(234,229,25)"/><text x="8.0311%" y="159.50">sy..</text></g><g><title>rustc_demangle::try_demangle (207 samples, 1.63%)</title><rect x="8.8175%" y="133" width="1.6253%" height="15" fill="rgb(254,127,20)"/><text x="9.0675%" y="143.50"></text></g><g><title>rustc_demangle::demangle (207 samples, 1.63%)</title><rect x="8.8175%" y="117" width="1.6253%" height="15" fill="rgb(211,151,37)"/><text x="9.0675%" y="127.50"></text></g><g><title>rustc_demangle::legacy::demangle (203 samples, 1.59%)</title><rect x="8.8489%" y="101" width="1.5939%" height="15" fill="rgb(226,185,3)"/><text x="9.0989%" y="111.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (15 samples, 0.12%)</title><rect x="10.4428%" y="133" width="0.1178%" height="15" fill="rgb(223,38,29)"/><text x="10.6928%" y="143.50"></text></g><g><title>core::fmt::write (15 samples, 0.12%)</title><rect x="10.4428%" y="117" width="0.1178%" height="15" fill="rgb(206,134,22)"/><text x="10.6928%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (17 samples, 0.13%)</title><rect x="10.4428%" y="277" width="0.1335%" height="15" fill="rgb(243,211,4)"/><text x="10.6928%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (17 samples, 0.13%)</title><rect x="10.4428%" y="261" width="0.1335%" height="15" fill="rgb(244,214,18)"/><text x="10.6928%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (17 samples, 0.13%)</title><rect x="10.4428%" y="245" width="0.1335%" height="15" fill="rgb(208,165,52)"/><text x="10.6928%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (17 samples, 0.13%)</title><rect x="10.4428%" y="229" width="0.1335%" height="15" fill="rgb(245,165,39)"/><text x="10.6928%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (17 samples, 0.13%)</title><rect x="10.4428%" y="213" width="0.1335%" height="15" fill="rgb(250,46,43)"/><text x="10.6928%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.13%)</title><rect x="10.4428%" y="197" width="0.1335%" height="15" fill="rgb(242,86,47)"/><text x="10.6928%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.13%)</title><rect x="10.4428%" y="181" width="0.1335%" height="15" fill="rgb(232,173,5)"/><text x="10.6928%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17 samples, 0.13%)</title><rect x="10.4428%" y="165" width="0.1335%" height="15" fill="rgb(208,117,14)"/><text x="10.6928%" y="175.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (17 samples, 0.13%)</title><rect x="10.4428%" y="149" width="0.1335%" height="15" fill="rgb(205,144,47)"/><text x="10.6928%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (615 samples, 4.83%)</title><rect x="5.7553%" y="485" width="4.8288%" height="15" fill="rgb(228,62,6)"/><text x="6.0053%" y="495.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try (18 samples, 0.14%)</title><rect x="10.4428%" y="469" width="0.1413%" height="15" fill="rgb(238,32,51)"/><text x="10.6928%" y="479.50"></text></g><g><title>__rust_maybe_catch_panic (18 samples, 0.14%)</title><rect x="10.4428%" y="453" width="0.1413%" height="15" fill="rgb(251,211,21)"/><text x="10.6928%" y="463.50"></text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (18 samples, 0.14%)</title><rect x="10.4428%" y="437" width="0.1413%" height="15" fill="rgb(244,43,23)"/><text x="10.6928%" y="447.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.14%)</title><rect x="10.4428%" y="421" width="0.1413%" height="15" fill="rgb(219,48,27)"/><text x="10.6928%" y="431.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (18 samples, 0.14%)</title><rect x="10.4428%" y="405" width="0.1413%" height="15" fill="rgb(251,72,17)"/><text x="10.6928%" y="415.50"></text></g><g><title>__rust_maybe_catch_panic (18 samples, 0.14%)</title><rect x="10.4428%" y="389" width="0.1413%" height="15" fill="rgb(214,69,49)"/><text x="10.6928%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (18 samples, 0.14%)</title><rect x="10.4428%" y="373" width="0.1413%" height="15" fill="rgb(242,96,45)"/><text x="10.6928%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.14%)</title><rect x="10.4428%" y="357" width="0.1413%" height="15" fill="rgb(233,20,50)"/><text x="10.6928%" y="367.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (18 samples, 0.14%)</title><rect x="10.4428%" y="341" width="0.1413%" height="15" fill="rgb(247,82,43)"/><text x="10.6928%" y="351.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (18 samples, 0.14%)</title><rect x="10.4428%" y="325" width="0.1413%" height="15" fill="rgb(210,97,3)"/><text x="10.6928%" y="335.50"></text></g><g><title>xwords::fill_crossword (18 samples, 0.14%)</title><rect x="10.4428%" y="309" width="0.1413%" height="15" fill="rgb(217,113,26)"/><text x="10.6928%" y="319.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (18 samples, 0.14%)</title><rect x="10.4428%" y="293" width="0.1413%" height="15" fill="rgb(207,166,18)"/><text x="10.6928%" y="303.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (13 samples, 0.10%)</title><rect x="10.5920%" y="181" width="0.1021%" height="15" fill="rgb(205,124,54)"/><text x="10.8420%" y="191.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (13 samples, 0.10%)</title><rect x="10.5920%" y="165" width="0.1021%" height="15" fill="rgb(211,140,29)"/><text x="10.8420%" y="175.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (13 samples, 0.10%)</title><rect x="10.5920%" y="149" width="0.1021%" height="15" fill="rgb(228,83,33)"/><text x="10.8420%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (13 samples, 0.10%)</title><rect x="10.5920%" y="133" width="0.1021%" height="15" fill="rgb(225,217,40)"/><text x="10.8420%" y="143.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.10%)</title><rect x="10.5920%" y="117" width="0.1021%" height="15" fill="rgb(221,229,30)"/><text x="10.8420%" y="127.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.10%)</title><rect x="10.5920%" y="101" width="0.1021%" height="15" fill="rgb(210,1,48)"/><text x="10.8420%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.10%)</title><rect x="10.5920%" y="85" width="0.1021%" height="15" fill="rgb(205,53,50)"/><text x="10.8420%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13 samples, 0.10%)</title><rect x="10.5920%" y="69" width="0.1021%" height="15" fill="rgb(211,25,54)"/><text x="10.8420%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.11%)</title><rect x="10.5920%" y="485" width="0.1099%" height="15" fill="rgb(205,28,13)"/><text x="10.8420%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (14 samples, 0.11%)</title><rect x="10.5920%" y="469" width="0.1099%" height="15" fill="rgb(214,37,48)"/><text x="10.8420%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.11%)</title><rect x="10.5920%" y="453" width="0.1099%" height="15" fill="rgb(226,141,8)"/><text x="10.8420%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (14 samples, 0.11%)</title><rect x="10.5920%" y="437" width="0.1099%" height="15" fill="rgb(206,200,0)"/><text x="10.8420%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="10.5920%" y="421" width="0.1099%" height="15" fill="rgb(238,152,34)"/><text x="10.8420%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.11%)</title><rect x="10.5920%" y="405" width="0.1099%" height="15" fill="rgb(216,72,48)"/><text x="10.8420%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 0.11%)</title><rect x="10.5920%" y="389" width="0.1099%" height="15" fill="rgb(246,48,2)"/><text x="10.8420%" y="399.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (14 samples, 0.11%)</title><rect x="10.5920%" y="373" width="0.1099%" height="15" fill="rgb(249,59,28)"/><text x="10.8420%" y="383.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="357" width="0.1099%" height="15" fill="rgb(253,198,14)"/><text x="10.8420%" y="367.50"></text></g><g><title>core::fmt::write (14 samples, 0.11%)</title><rect x="10.5920%" y="341" width="0.1099%" height="15" fill="rgb(225,162,4)"/><text x="10.8420%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="325" width="0.1099%" height="15" fill="rgb(231,126,49)"/><text x="10.8420%" y="335.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="309" width="0.1099%" height="15" fill="rgb(207,41,3)"/><text x="10.8420%" y="319.50"></text></g><g><title>symbolic_demangle::demangle (14 samples, 0.11%)</title><rect x="10.5920%" y="293" width="0.1099%" height="15" fill="rgb(212,223,36)"/><text x="10.8420%" y="303.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (14 samples, 0.11%)</title><rect x="10.5920%" y="277" width="0.1099%" height="15" fill="rgb(214,96,38)"/><text x="10.8420%" y="287.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (14 samples, 0.11%)</title><rect x="10.5920%" y="261" width="0.1099%" height="15" fill="rgb(246,104,47)"/><text x="10.8420%" y="271.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="245" width="0.1099%" height="15" fill="rgb(227,212,36)"/><text x="10.8420%" y="255.50"></text></g><g><title>core::fmt::write/core::fmt::run (14 samples, 0.11%)</title><rect x="10.5920%" y="229" width="0.1099%" height="15" fill="rgb(250,163,41)"/><text x="10.8420%" y="239.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="213" width="0.1099%" height="15" fill="rgb(250,130,17)"/><text x="10.8420%" y="223.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (14 samples, 0.11%)</title><rect x="10.5920%" y="197" width="0.1099%" height="15" fill="rgb(206,42,32)"/><text x="10.8420%" y="207.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (17 samples, 0.13%)</title><rect x="10.9611%" y="69" width="0.1335%" height="15" fill="rgb(224,95,7)"/><text x="11.2111%" y="79.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (20 samples, 0.16%)</title><rect x="10.9532%" y="101" width="0.1570%" height="15" fill="rgb(242,96,42)"/><text x="11.2032%" y="111.50"></text></g><g><title>core::fmt::write (20 samples, 0.16%)</title><rect x="10.9532%" y="85" width="0.1570%" height="15" fill="rgb(237,194,4)"/><text x="11.2032%" y="95.50"></text></g><g><title>alloc::string::String::pop (16 samples, 0.13%)</title><rect x="11.1259%" y="101" width="0.1256%" height="15" fill="rgb(245,142,29)"/><text x="11.3759%" y="111.50"></text></g><g><title>alloc::string::String::push_str (13 samples, 0.10%)</title><rect x="11.2830%" y="101" width="0.1021%" height="15" fill="rgb(247,66,43)"/><text x="11.5330%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (13 samples, 0.10%)</title><rect x="11.2830%" y="85" width="0.1021%" height="15" fill="rgb(220,153,30)"/><text x="11.5330%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (88 samples, 0.69%)</title><rect x="10.7255%" y="245" width="0.6910%" height="15" fill="rgb(207,130,54)"/><text x="10.9755%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (88 samples, 0.69%)</title><rect x="10.7255%" y="229" width="0.6910%" height="15" fill="rgb(242,49,39)"/><text x="10.9755%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (88 samples, 0.69%)</title><rect x="10.7255%" y="213" width="0.6910%" height="15" fill="rgb(206,227,44)"/><text x="10.9755%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (88 samples, 0.69%)</title><rect x="10.7255%" y="197" width="0.6910%" height="15" fill="rgb(236,74,29)"/><text x="10.9755%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (88 samples, 0.69%)</title><rect x="10.7255%" y="181" width="0.6910%" height="15" fill="rgb(222,52,23)"/><text x="10.9755%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.68%)</title><rect x="10.7334%" y="165" width="0.6831%" height="15" fill="rgb(245,65,4)"/><text x="10.9834%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (87 samples, 0.68%)</title><rect x="10.7334%" y="149" width="0.6831%" height="15" fill="rgb(205,120,32)"/><text x="10.9834%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (86 samples, 0.68%)</title><rect x="10.7412%" y="133" width="0.6753%" height="15" fill="rgb(226,156,21)"/><text x="10.9912%" y="143.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (81 samples, 0.64%)</title><rect x="10.7805%" y="117" width="0.6360%" height="15" fill="rgb(240,117,11)"/><text x="11.0305%" y="127.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (17 samples, 0.13%)</title><rect x="11.6049%" y="101" width="0.1335%" height="15" fill="rgb(232,214,36)"/><text x="11.8549%" y="111.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (20 samples, 0.16%)</title><rect x="11.5892%" y="197" width="0.1570%" height="15" fill="rgb(252,121,45)"/><text x="11.8392%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (20 samples, 0.16%)</title><rect x="11.5892%" y="181" width="0.1570%" height="15" fill="rgb(250,206,1)"/><text x="11.8392%" y="191.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (18 samples, 0.14%)</title><rect x="11.6049%" y="165" width="0.1413%" height="15" fill="rgb(213,40,16)"/><text x="11.8549%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.14%)</title><rect x="11.6049%" y="149" width="0.1413%" height="15" fill="rgb(222,106,3)"/><text x="11.8549%" y="159.50"></text></g><g><title>&lt;core::str::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.14%)</title><rect x="11.6049%" y="133" width="0.1413%" height="15" fill="rgb(238,140,8)"/><text x="11.8549%" y="143.50"></text></g><g><title>core::str::SplitInternal&lt;P&gt;::next (18 samples, 0.14%)</title><rect x="11.6049%" y="117" width="0.1413%" height="15" fill="rgb(217,119,30)"/><text x="11.8549%" y="127.50"></text></g><g><title>inferno::flamegraph::merge::flow (44 samples, 0.35%)</title><rect x="11.5028%" y="213" width="0.3455%" height="15" fill="rgb(228,189,17)"/><text x="11.7528%" y="223.50"></text></g><g><title>inferno::flamegraph::merge::frames (51 samples, 0.40%)</title><rect x="11.4793%" y="229" width="0.4004%" height="15" fill="rgb(243,94,42)"/><text x="11.7293%" y="239.50"></text></g><g><title>__pthread_start (151 samples, 1.19%)</title><rect x="10.7019%" y="485" width="1.1856%" height="15" fill="rgb(228,105,42)"/><text x="10.9519%" y="495.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/std::sys_common::thread::start_thread/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (151 samples, 1.19%)</title><rect x="10.7019%" y="469" width="1.1856%" height="15" fill="rgb(233,19,53)"/><text x="10.9519%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (151 samples, 1.19%)</title><rect x="10.7019%" y="453" width="1.1856%" height="15" fill="rgb(240,22,26)"/><text x="10.9519%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try (151 samples, 1.19%)</title><rect x="10.7019%" y="437" width="1.1856%" height="15" fill="rgb(238,97,34)"/><text x="10.9519%" y="447.50"></text></g><g><title>__rust_maybe_catch_panic (151 samples, 1.19%)</title><rect x="10.7019%" y="421" width="1.1856%" height="15" fill="rgb(210,177,8)"/><text x="10.9519%" y="431.50"></text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (151 samples, 1.19%)</title><rect x="10.7019%" y="405" width="1.1856%" height="15" fill="rgb(217,168,6)"/><text x="10.9519%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (151 samples, 1.19%)</title><rect x="10.7019%" y="389" width="1.1856%" height="15" fill="rgb(223,34,43)"/><text x="10.9519%" y="399.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (151 samples, 1.19%)</title><rect x="10.7019%" y="373" width="1.1856%" height="15" fill="rgb(252,123,35)"/><text x="10.9519%" y="383.50"></text></g><g><title>__rust_maybe_catch_panic (151 samples, 1.19%)</title><rect x="10.7019%" y="357" width="1.1856%" height="15" fill="rgb(243,162,1)"/><text x="10.9519%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (151 samples, 1.19%)</title><rect x="10.7019%" y="341" width="1.1856%" height="15" fill="rgb(250,83,22)"/><text x="10.9519%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (151 samples, 1.19%)</title><rect x="10.7019%" y="325" width="1.1856%" height="15" fill="rgb(247,184,7)"/><text x="10.9519%" y="335.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (151 samples, 1.19%)</title><rect x="10.7019%" y="309" width="1.1856%" height="15" fill="rgb(254,212,7)"/><text x="10.9519%" y="319.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (151 samples, 1.19%)</title><rect x="10.7019%" y="293" width="1.1856%" height="15" fill="rgb(249,198,8)"/><text x="10.9519%" y="303.50"></text></g><g><title>xwords::fill_crossword (151 samples, 1.19%)</title><rect x="10.7019%" y="277" width="1.1856%" height="15" fill="rgb(230,74,12)"/><text x="10.9519%" y="287.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (148 samples, 1.16%)</title><rect x="10.7255%" y="261" width="1.1621%" height="15" fill="rgb(253,174,9)"/><text x="10.9755%" y="271.50"></text></g><g><title>inferno::flamegraph::from_lines (60 samples, 0.47%)</title><rect x="11.4165%" y="245" width="0.4711%" height="15" fill="rgb(222,191,12)"/><text x="11.6665%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (13 samples, 0.10%)</title><rect x="12.0603%" y="37" width="0.1021%" height="15" fill="rgb(234,28,43)"/><text x="12.3103%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.21%)</title><rect x="12.1624%" y="37" width="0.2120%" height="15" fill="rgb(232,13,38)"/><text x="12.4124%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.48%)</title><rect x="11.9896%" y="69" width="0.4790%" height="15" fill="rgb(239,101,25)"/><text x="12.2396%" y="79.50"></text></g><g><title>core::str::next_code_point (52 samples, 0.41%)</title><rect x="12.0603%" y="53" width="0.4083%" height="15" fill="rgb(237,214,49)"/><text x="12.3103%" y="63.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (24 samples, 0.19%)</title><rect x="12.4686%" y="53" width="0.1884%" height="15" fill="rgb(212,188,4)"/><text x="12.7186%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (18 samples, 0.14%)</title><rect x="12.5157%" y="37" width="0.1413%" height="15" fill="rgb(208,167,23)"/><text x="12.7657%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (39 samples, 0.31%)</title><rect x="12.4686%" y="69" width="0.3062%" height="15" fill="rgb(209,179,40)"/><text x="12.7186%" y="79.50"></text></g><g><title>core::mem::swap (15 samples, 0.12%)</title><rect x="12.6570%" y="53" width="0.1178%" height="15" fill="rgb(233,144,24)"/><text x="12.9070%" y="63.50"></text></g><g><title>rustc_demangle::try_demangle (117 samples, 0.92%)</title><rect x="11.9111%" y="117" width="0.9187%" height="15" fill="rgb(250,4,25)"/><text x="12.1611%" y="127.50"></text></g><g><title>rustc_demangle::demangle (117 samples, 0.92%)</title><rect x="11.9111%" y="101" width="0.9187%" height="15" fill="rgb(236,222,29)"/><text x="12.1611%" y="111.50"></text></g><g><title>rustc_demangle::legacy::demangle (109 samples, 0.86%)</title><rect x="11.9739%" y="85" width="0.8558%" height="15" fill="rgb(228,152,14)"/><text x="12.2239%" y="95.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (118 samples, 0.93%)</title><rect x="11.9111%" y="133" width="0.9265%" height="15" fill="rgb(240,11,37)"/><text x="12.1611%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (17 samples, 0.13%)</title><rect x="13.4187%" y="53" width="0.1335%" height="15" fill="rgb(240,96,5)"/><text x="13.6687%" y="63.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (93 samples, 0.73%)</title><rect x="12.8376%" y="117" width="0.7302%" height="15" fill="rgb(242,145,4)"/><text x="13.0876%" y="127.50"></text></g><g><title>core::fmt::write/core::fmt::run (93 samples, 0.73%)</title><rect x="12.8376%" y="101" width="0.7302%" height="15" fill="rgb(229,118,33)"/><text x="13.0876%" y="111.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (93 samples, 0.73%)</title><rect x="12.8376%" y="85" width="0.7302%" height="15" fill="rgb(213,82,17)"/><text x="13.0876%" y="95.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (93 samples, 0.73%)</title><rect x="12.8376%" y="69" width="0.7302%" height="15" fill="rgb(236,71,53)"/><text x="13.0876%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.13%)</title><rect x="13.6149%" y="53" width="0.1335%" height="15" fill="rgb(227,158,19)"/><text x="13.8649%" y="63.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (17 samples, 0.13%)</title><rect x="13.6149%" y="37" width="0.1335%" height="15" fill="rgb(220,52,31)"/><text x="13.8649%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.13%)</title><rect x="13.8348%" y="37" width="0.1335%" height="15" fill="rgb(232,137,27)"/><text x="14.0848%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.55%)</title><rect x="13.6149%" y="69" width="0.5496%" height="15" fill="rgb(208,155,6)"/><text x="13.8649%" y="79.50"></text></g><g><title>core::str::next_code_point (53 samples, 0.42%)</title><rect x="13.7484%" y="53" width="0.4161%" height="15" fill="rgb(253,212,46)"/><text x="13.9984%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (14 samples, 0.11%)</title><rect x="14.2352%" y="37" width="0.1099%" height="15" fill="rgb(220,55,4)"/><text x="14.4852%" y="47.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (25 samples, 0.20%)</title><rect x="14.1646%" y="53" width="0.1963%" height="15" fill="rgb(226,100,5)"/><text x="14.4146%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (39 samples, 0.31%)</title><rect x="14.1646%" y="69" width="0.3062%" height="15" fill="rgb(247,200,51)"/><text x="14.4146%" y="79.50"></text></g><g><title>core::mem::swap (14 samples, 0.11%)</title><rect x="14.3609%" y="53" width="0.1099%" height="15" fill="rgb(220,203,54)"/><text x="14.6109%" y="63.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (337 samples, 2.65%)</title><rect x="11.8876%" y="229" width="2.6460%" height="15" fill="rgb(230,187,54)"/><text x="12.1376%" y="239.50">al..</text></g><g><title>core::fmt::write (337 samples, 2.65%)</title><rect x="11.8876%" y="213" width="2.6460%" height="15" fill="rgb(225,132,12)"/><text x="12.1376%" y="223.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (337 samples, 2.65%)</title><rect x="11.8876%" y="197" width="2.6460%" height="15" fill="rgb(205,210,33)"/><text x="12.1376%" y="207.50">&lt;&amp;..</text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (337 samples, 2.65%)</title><rect x="11.8876%" y="181" width="2.6460%" height="15" fill="rgb(238,192,7)"/><text x="12.1376%" y="191.50">&lt;p..</text></g><g><title>symbolic_demangle::demangle (334 samples, 2.62%)</title><rect x="11.9111%" y="165" width="2.6225%" height="15" fill="rgb(245,82,29)"/><text x="12.1611%" y="175.50">sy..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (334 samples, 2.62%)</title><rect x="11.9111%" y="149" width="2.6225%" height="15" fill="rgb(234,222,39)"/><text x="12.1611%" y="159.50">&lt;s..</text></g><g><title>symbolic_demangle::try_demangle_rust (216 samples, 1.70%)</title><rect x="12.8376%" y="133" width="1.6960%" height="15" fill="rgb(231,222,18)"/><text x="13.0876%" y="143.50"></text></g><g><title>rustc_demangle::try_demangle (123 samples, 0.97%)</title><rect x="13.5678%" y="117" width="0.9658%" height="15" fill="rgb(216,61,10)"/><text x="13.8178%" y="127.50"></text></g><g><title>rustc_demangle::demangle (123 samples, 0.97%)</title><rect x="13.5678%" y="101" width="0.9658%" height="15" fill="rgb(241,116,34)"/><text x="13.8178%" y="111.50"></text></g><g><title>rustc_demangle::legacy::demangle (117 samples, 0.92%)</title><rect x="13.6149%" y="85" width="0.9187%" height="15" fill="rgb(225,32,22)"/><text x="13.8649%" y="95.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (344 samples, 2.70%)</title><rect x="11.8876%" y="469" width="2.7010%" height="15" fill="rgb(236,35,19)"/><text x="12.1376%" y="479.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once (344 samples, 2.70%)</title><rect x="11.8876%" y="453" width="2.7010%" height="15" fill="rgb(231,198,28)"/><text x="12.1376%" y="463.50">co..</text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (344 samples, 2.70%)</title><rect x="11.8876%" y="437" width="2.7010%" height="15" fill="rgb(211,215,31)"/><text x="12.1376%" y="447.50">xw..</text></g><g><title>xwords::tests::puz_2020_10_12_works (344 samples, 2.70%)</title><rect x="11.8876%" y="421" width="2.7010%" height="15" fill="rgb(243,118,23)"/><text x="12.1376%" y="431.50">xw..</text></g><g><title>xwords::fill_crossword (344 samples, 2.70%)</title><rect x="11.8876%" y="405" width="2.7010%" height="15" fill="rgb(228,104,45)"/><text x="12.1376%" y="415.50">xw..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (344 samples, 2.70%)</title><rect x="11.8876%" y="389" width="2.7010%" height="15" fill="rgb(216,198,17)"/><text x="12.1376%" y="399.50">pp..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (344 samples, 2.70%)</title><rect x="11.8876%" y="373" width="2.7010%" height="15" fill="rgb(249,39,23)"/><text x="12.1376%" y="383.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (344 samples, 2.70%)</title><rect x="11.8876%" y="357" width="2.7010%" height="15" fill="rgb(250,186,54)"/><text x="12.1376%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (344 samples, 2.70%)</title><rect x="11.8876%" y="341" width="2.7010%" height="15" fill="rgb(243,110,14)"/><text x="12.1376%" y="351.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (344 samples, 2.70%)</title><rect x="11.8876%" y="325" width="2.7010%" height="15" fill="rgb(236,32,12)"/><text x="12.1376%" y="335.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (344 samples, 2.70%)</title><rect x="11.8876%" y="309" width="2.7010%" height="15" fill="rgb(211,92,33)"/><text x="12.1376%" y="319.50">al..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (344 samples, 2.70%)</title><rect x="11.8876%" y="293" width="2.7010%" height="15" fill="rgb(254,154,8)"/><text x="12.1376%" y="303.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (344 samples, 2.70%)</title><rect x="11.8876%" y="277" width="2.7010%" height="15" fill="rgb(241,107,40)"/><text x="12.1376%" y="287.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (344 samples, 2.70%)</title><rect x="11.8876%" y="261" width="2.7010%" height="15" fill="rgb(208,24,40)"/><text x="12.1376%" y="271.50">co..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (344 samples, 2.70%)</title><rect x="11.8876%" y="245" width="2.7010%" height="15" fill="rgb(252,158,9)"/><text x="12.1376%" y="255.50">pp..</text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (18 samples, 0.14%)</title><rect x="14.5886%" y="165" width="0.1413%" height="15" fill="rgb(241,9,28)"/><text x="14.8386%" y="175.50"></text></g><g><title>core::fmt::write (18 samples, 0.14%)</title><rect x="14.5886%" y="149" width="0.1413%" height="15" fill="rgb(210,199,32)"/><text x="14.8386%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.16%)</title><rect x="14.5886%" y="261" width="0.1649%" height="15" fill="rgb(228,147,42)"/><text x="14.8386%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (21 samples, 0.16%)</title><rect x="14.5886%" y="245" width="0.1649%" height="15" fill="rgb(248,202,26)"/><text x="14.8386%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.16%)</title><rect x="14.5886%" y="229" width="0.1649%" height="15" fill="rgb(225,67,4)"/><text x="14.8386%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.16%)</title><rect x="14.5886%" y="213" width="0.1649%" height="15" fill="rgb(234,87,25)"/><text x="14.8386%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21 samples, 0.16%)</title><rect x="14.5886%" y="197" width="0.1649%" height="15" fill="rgb(229,58,0)"/><text x="14.8386%" y="207.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (21 samples, 0.16%)</title><rect x="14.5886%" y="181" width="0.1649%" height="15" fill="rgb(211,218,3)"/><text x="14.8386%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.17%)</title><rect x="14.5886%" y="309" width="0.1727%" height="15" fill="rgb(216,109,54)"/><text x="14.8386%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.17%)</title><rect x="14.5886%" y="293" width="0.1727%" height="15" fill="rgb(252,156,40)"/><text x="14.8386%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (22 samples, 0.17%)</title><rect x="14.5886%" y="277" width="0.1727%" height="15" fill="rgb(208,1,12)"/><text x="14.8386%" y="287.50"></text></g><g><title>__rust_maybe_catch_panic (368 samples, 2.89%)</title><rect x="11.8876%" y="485" width="2.8894%" height="15" fill="rgb(214,179,53)"/><text x="12.1376%" y="495.50">__..</text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (24 samples, 0.19%)</title><rect x="14.5886%" y="469" width="0.1884%" height="15" fill="rgb(205,173,17)"/><text x="14.8386%" y="479.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.19%)</title><rect x="14.5886%" y="453" width="0.1884%" height="15" fill="rgb(243,26,15)"/><text x="14.8386%" y="463.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (24 samples, 0.19%)</title><rect x="14.5886%" y="437" width="0.1884%" height="15" fill="rgb(231,139,31)"/><text x="14.8386%" y="447.50"></text></g><g><title>__rust_maybe_catch_panic (24 samples, 0.19%)</title><rect x="14.5886%" y="421" width="0.1884%" height="15" fill="rgb(208,163,22)"/><text x="14.8386%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.19%)</title><rect x="14.5886%" y="405" width="0.1884%" height="15" fill="rgb(245,84,24)"/><text x="14.8386%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 0.19%)</title><rect x="14.5886%" y="389" width="0.1884%" height="15" fill="rgb(238,140,36)"/><text x="14.8386%" y="399.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (24 samples, 0.19%)</title><rect x="14.5886%" y="373" width="0.1884%" height="15" fill="rgb(218,211,39)"/><text x="14.8386%" y="383.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (24 samples, 0.19%)</title><rect x="14.5886%" y="357" width="0.1884%" height="15" fill="rgb(242,59,29)"/><text x="14.8386%" y="367.50"></text></g><g><title>xwords::fill_crossword (24 samples, 0.19%)</title><rect x="14.5886%" y="341" width="0.1884%" height="15" fill="rgb(245,91,22)"/><text x="14.8386%" y="351.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (24 samples, 0.19%)</title><rect x="14.5886%" y="325" width="0.1884%" height="15" fill="rgb(206,13,6)"/><text x="14.8386%" y="335.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (21 samples, 0.16%)</title><rect x="14.9497%" y="53" width="0.1649%" height="15" fill="rgb(212,147,32)"/><text x="15.1997%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (50 samples, 0.39%)</title><rect x="14.7927%" y="165" width="0.3926%" height="15" fill="rgb(254,64,12)"/><text x="15.0427%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (50 samples, 0.39%)</title><rect x="14.7927%" y="149" width="0.3926%" height="15" fill="rgb(212,104,54)"/><text x="15.0427%" y="159.50"></text></g><g><title>core::str::pattern::Searcher::next_match (50 samples, 0.39%)</title><rect x="14.7927%" y="133" width="0.3926%" height="15" fill="rgb(254,77,46)"/><text x="15.0427%" y="143.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (50 samples, 0.39%)</title><rect x="14.7927%" y="117" width="0.3926%" height="15" fill="rgb(219,55,26)"/><text x="15.0427%" y="127.50"></text></g><g><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.39%)</title><rect x="14.7927%" y="101" width="0.3926%" height="15" fill="rgb(230,133,21)"/><text x="15.0427%" y="111.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.39%)</title><rect x="14.7927%" y="85" width="0.3926%" height="15" fill="rgb(247,110,50)"/><text x="15.0427%" y="95.50"></text></g><g><title>core::str::next_code_point (41 samples, 0.32%)</title><rect x="14.8634%" y="69" width="0.3219%" height="15" fill="rgb(229,31,50)"/><text x="15.1134%" y="79.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (22 samples, 0.17%)</title><rect x="15.1853%" y="165" width="0.1727%" height="15" fill="rgb(250,13,40)"/><text x="15.4353%" y="175.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (16 samples, 0.13%)</title><rect x="15.2324%" y="149" width="0.1256%" height="15" fill="rgb(212,163,14)"/><text x="15.4824%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (80 samples, 0.63%)</title><rect x="14.7849%" y="485" width="0.6281%" height="15" fill="rgb(211,190,39)"/><text x="15.0349%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (80 samples, 0.63%)</title><rect x="14.7849%" y="469" width="0.6281%" height="15" fill="rgb(245,39,52)"/><text x="15.0349%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (80 samples, 0.63%)</title><rect x="14.7849%" y="453" width="0.6281%" height="15" fill="rgb(216,76,3)"/><text x="15.0349%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (80 samples, 0.63%)</title><rect x="14.7849%" y="437" width="0.6281%" height="15" fill="rgb(218,225,6)"/><text x="15.0349%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (80 samples, 0.63%)</title><rect x="14.7849%" y="421" width="0.6281%" height="15" fill="rgb(215,137,11)"/><text x="15.0349%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.63%)</title><rect x="14.7849%" y="405" width="0.6281%" height="15" fill="rgb(234,223,14)"/><text x="15.0349%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (80 samples, 0.63%)</title><rect x="14.7849%" y="389" width="0.6281%" height="15" fill="rgb(236,24,21)"/><text x="15.0349%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (80 samples, 0.63%)</title><rect x="14.7849%" y="373" width="0.6281%" height="15" fill="rgb(208,183,10)"/><text x="15.0349%" y="383.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (80 samples, 0.63%)</title><rect x="14.7849%" y="357" width="0.6281%" height="15" fill="rgb(254,9,3)"/><text x="15.0349%" y="367.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="341" width="0.6281%" height="15" fill="rgb(225,112,10)"/><text x="15.0349%" y="351.50"></text></g><g><title>core::fmt::write (80 samples, 0.63%)</title><rect x="14.7849%" y="325" width="0.6281%" height="15" fill="rgb(232,7,4)"/><text x="15.0349%" y="335.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="309" width="0.6281%" height="15" fill="rgb(241,50,8)"/><text x="15.0349%" y="319.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="293" width="0.6281%" height="15" fill="rgb(209,164,32)"/><text x="15.0349%" y="303.50"></text></g><g><title>symbolic_demangle::demangle (80 samples, 0.63%)</title><rect x="14.7849%" y="277" width="0.6281%" height="15" fill="rgb(222,99,11)"/><text x="15.0349%" y="287.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (80 samples, 0.63%)</title><rect x="14.7849%" y="261" width="0.6281%" height="15" fill="rgb(208,139,8)"/><text x="15.0349%" y="271.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (80 samples, 0.63%)</title><rect x="14.7849%" y="245" width="0.6281%" height="15" fill="rgb(210,220,31)"/><text x="15.0349%" y="255.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="229" width="0.6281%" height="15" fill="rgb(253,192,40)"/><text x="15.0349%" y="239.50"></text></g><g><title>core::fmt::write/core::fmt::run (80 samples, 0.63%)</title><rect x="14.7849%" y="213" width="0.6281%" height="15" fill="rgb(218,174,11)"/><text x="15.0349%" y="223.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="197" width="0.6281%" height="15" fill="rgb(238,12,0)"/><text x="15.0349%" y="207.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (80 samples, 0.63%)</title><rect x="14.7849%" y="181" width="0.6281%" height="15" fill="rgb(223,87,52)"/><text x="15.0349%" y="191.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.23%)</title><rect x="15.6486%" y="37" width="0.2277%" height="15" fill="rgb(206,198,52)"/><text x="15.8986%" y="47.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (27 samples, 0.21%)</title><rect x="15.9862%" y="37" width="0.2120%" height="15" fill="rgb(239,183,3)"/><text x="16.2362%" y="47.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (91 samples, 0.71%)</title><rect x="15.5543%" y="101" width="0.7145%" height="15" fill="rgb(216,111,9)"/><text x="15.8043%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (91 samples, 0.71%)</title><rect x="15.5543%" y="85" width="0.7145%" height="15" fill="rgb(221,6,16)"/><text x="15.8043%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (91 samples, 0.71%)</title><rect x="15.5543%" y="69" width="0.7145%" height="15" fill="rgb(205,110,11)"/><text x="15.8043%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (91 samples, 0.71%)</title><rect x="15.5543%" y="53" width="0.7145%" height="15" fill="rgb(210,162,38)"/><text x="15.8043%" y="63.50"></text></g><g><title>rustc_demangle::legacy::demangle (106 samples, 0.83%)</title><rect x="15.5543%" y="117" width="0.8323%" height="15" fill="rgb(235,180,51)"/><text x="15.8043%" y="127.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (117 samples, 0.92%)</title><rect x="15.4758%" y="165" width="0.9187%" height="15" fill="rgb(205,214,28)"/><text x="15.7258%" y="175.50"></text></g><g><title>rustc_demangle::try_demangle (117 samples, 0.92%)</title><rect x="15.4758%" y="149" width="0.9187%" height="15" fill="rgb(211,57,51)"/><text x="15.7258%" y="159.50"></text></g><g><title>rustc_demangle::demangle (117 samples, 0.92%)</title><rect x="15.4758%" y="133" width="0.9187%" height="15" fill="rgb(207,55,41)"/><text x="15.7258%" y="143.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="16.4102%" y="85" width="0.1256%" height="15" fill="rgb(245,45,35)"/><text x="16.6602%" y="95.50"></text></g><g><title>core::str::next_code_point (14 samples, 0.11%)</title><rect x="16.4259%" y="69" width="0.1099%" height="15" fill="rgb(233,168,39)"/><text x="16.6759%" y="79.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (28 samples, 0.22%)</title><rect x="16.7164%" y="37" width="0.2198%" height="15" fill="rgb(216,61,7)"/><text x="16.9664%" y="47.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next/&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (48 samples, 0.38%)</title><rect x="16.9362%" y="37" width="0.3769%" height="15" fill="rgb(237,109,44)"/><text x="17.1862%" y="47.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (78 samples, 0.61%)</title><rect x="16.7164%" y="69" width="0.6124%" height="15" fill="rgb(240,92,7)"/><text x="16.9664%" y="79.50"></text></g><g><title>core::str::pattern::Searcher::next_match (78 samples, 0.61%)</title><rect x="16.7164%" y="53" width="0.6124%" height="15" fill="rgb(252,17,32)"/><text x="16.9664%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (86 samples, 0.68%)</title><rect x="16.7007%" y="85" width="0.6753%" height="15" fill="rgb(219,85,5)"/><text x="16.9507%" y="95.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (23 samples, 0.18%)</title><rect x="17.3759%" y="85" width="0.1806%" height="15" fill="rgb(213,50,52)"/><text x="17.6259%" y="95.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (18 samples, 0.14%)</title><rect x="17.4152%" y="69" width="0.1413%" height="15" fill="rgb(239,79,50)"/><text x="17.6652%" y="79.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (13 samples, 0.10%)</title><rect x="17.4545%" y="53" width="0.1021%" height="15" fill="rgb(249,49,7)"/><text x="17.7045%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (14 samples, 0.11%)</title><rect x="17.6743%" y="37" width="0.1099%" height="15" fill="rgb(222,126,43)"/><text x="17.9243%" y="47.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (25 samples, 0.20%)</title><rect x="17.6429%" y="69" width="0.1963%" height="15" fill="rgb(230,157,52)"/><text x="17.8929%" y="79.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (21 samples, 0.16%)</title><rect x="17.6743%" y="53" width="0.1649%" height="15" fill="rgb(210,66,35)"/><text x="17.9243%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (44 samples, 0.35%)</title><rect x="17.6429%" y="85" width="0.3455%" height="15" fill="rgb(220,96,16)"/><text x="17.8929%" y="95.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (213 samples, 1.67%)</title><rect x="16.3945%" y="149" width="1.6724%" height="15" fill="rgb(242,43,33)"/><text x="16.6445%" y="159.50"></text></g><g><title>core::fmt::write/core::fmt::run (213 samples, 1.67%)</title><rect x="16.3945%" y="133" width="1.6724%" height="15" fill="rgb(248,128,51)"/><text x="16.6445%" y="143.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (213 samples, 1.67%)</title><rect x="16.3945%" y="117" width="1.6724%" height="15" fill="rgb(234,19,35)"/><text x="16.6445%" y="127.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (213 samples, 1.67%)</title><rect x="16.3945%" y="101" width="1.6724%" height="15" fill="rgb(232,120,30)"/><text x="16.6445%" y="111.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.13%)</title><rect x="18.1611%" y="37" width="0.1335%" height="15" fill="rgb(209,184,13)"/><text x="18.4111%" y="47.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (27 samples, 0.21%)</title><rect x="18.3417%" y="37" width="0.2120%" height="15" fill="rgb(222,153,0)"/><text x="18.5917%" y="47.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (73 samples, 0.57%)</title><rect x="18.0905%" y="101" width="0.5732%" height="15" fill="rgb(251,96,47)"/><text x="18.3405%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (73 samples, 0.57%)</title><rect x="18.0905%" y="85" width="0.5732%" height="15" fill="rgb(253,113,5)"/><text x="18.3405%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (73 samples, 0.57%)</title><rect x="18.0905%" y="69" width="0.5732%" height="15" fill="rgb(241,96,1)"/><text x="18.3405%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (73 samples, 0.57%)</title><rect x="18.0905%" y="53" width="0.5732%" height="15" fill="rgb(216,225,1)"/><text x="18.3405%" y="63.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (424 samples, 3.33%)</title><rect x="15.4209%" y="261" width="3.3291%" height="15" fill="rgb(227,108,0)"/><text x="15.6709%" y="271.50">all..</text></g><g><title>core::fmt::write (424 samples, 3.33%)</title><rect x="15.4209%" y="245" width="3.3291%" height="15" fill="rgb(221,29,48)"/><text x="15.6709%" y="255.50">cor..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (424 samples, 3.33%)</title><rect x="15.4209%" y="229" width="3.3291%" height="15" fill="rgb(222,55,16)"/><text x="15.6709%" y="239.50">&lt;&amp;T..</text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (424 samples, 3.33%)</title><rect x="15.4209%" y="213" width="3.3291%" height="15" fill="rgb(242,210,22)"/><text x="15.6709%" y="223.50">&lt;pp..</text></g><g><title>symbolic_demangle::demangle (417 samples, 3.27%)</title><rect x="15.4758%" y="197" width="3.2742%" height="15" fill="rgb(223,142,30)"/><text x="15.7258%" y="207.50">sym..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (417 samples, 3.27%)</title><rect x="15.4758%" y="181" width="3.2742%" height="15" fill="rgb(248,92,51)"/><text x="15.7258%" y="191.50">&lt;sy..</text></g><g><title>symbolic_demangle::try_demangle_rust (300 samples, 2.36%)</title><rect x="16.3945%" y="165" width="2.3555%" height="15" fill="rgb(249,201,12)"/><text x="16.6445%" y="175.50">s..</text></g><g><title>rustc_demangle::try_demangle (87 samples, 0.68%)</title><rect x="18.0669%" y="149" width="0.6831%" height="15" fill="rgb(230,213,39)"/><text x="18.3169%" y="159.50"></text></g><g><title>rustc_demangle::demangle (87 samples, 0.68%)</title><rect x="18.0669%" y="133" width="0.6831%" height="15" fill="rgb(232,46,34)"/><text x="18.3169%" y="143.50"></text></g><g><title>rustc_demangle::legacy::demangle (84 samples, 0.66%)</title><rect x="18.0905%" y="117" width="0.6595%" height="15" fill="rgb(226,194,19)"/><text x="18.3405%" y="127.50"></text></g><g><title>core::ops::function::FnOnce::call_once (446 samples, 3.50%)</title><rect x="15.4130%" y="485" width="3.5019%" height="15" fill="rgb(254,144,47)"/><text x="15.6630%" y="495.50">cor..</text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (446 samples, 3.50%)</title><rect x="15.4130%" y="469" width="3.5019%" height="15" fill="rgb(254,168,3)"/><text x="15.6630%" y="479.50">xwo..</text></g><g><title>xwords::tests::puz_2020_10_12_works (446 samples, 3.50%)</title><rect x="15.4130%" y="453" width="3.5019%" height="15" fill="rgb(249,104,32)"/><text x="15.6630%" y="463.50">xwo..</text></g><g><title>xwords::fill_crossword (446 samples, 3.50%)</title><rect x="15.4130%" y="437" width="3.5019%" height="15" fill="rgb(213,143,0)"/><text x="15.6630%" y="447.50">xwo..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (445 samples, 3.49%)</title><rect x="15.4209%" y="421" width="3.4940%" height="15" fill="rgb(211,72,7)"/><text x="15.6709%" y="431.50">ppr..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (445 samples, 3.49%)</title><rect x="15.4209%" y="405" width="3.4940%" height="15" fill="rgb(249,86,4)"/><text x="15.6709%" y="415.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (445 samples, 3.49%)</title><rect x="15.4209%" y="389" width="3.4940%" height="15" fill="rgb(252,17,31)"/><text x="15.6709%" y="399.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (445 samples, 3.49%)</title><rect x="15.4209%" y="373" width="3.4940%" height="15" fill="rgb(238,169,43)"/><text x="15.6709%" y="383.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (445 samples, 3.49%)</title><rect x="15.4209%" y="357" width="3.4940%" height="15" fill="rgb(220,206,52)"/><text x="15.6709%" y="367.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (445 samples, 3.49%)</title><rect x="15.4209%" y="341" width="3.4940%" height="15" fill="rgb(214,176,19)"/><text x="15.6709%" y="351.50">all..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (445 samples, 3.49%)</title><rect x="15.4209%" y="325" width="3.4940%" height="15" fill="rgb(206,11,39)"/><text x="15.6709%" y="335.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (445 samples, 3.49%)</title><rect x="15.4209%" y="309" width="3.4940%" height="15" fill="rgb(234,191,6)"/><text x="15.6709%" y="319.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (445 samples, 3.49%)</title><rect x="15.4209%" y="293" width="3.4940%" height="15" fill="rgb(244,46,51)"/><text x="15.6709%" y="303.50">cor..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (445 samples, 3.49%)</title><rect x="15.4209%" y="277" width="3.4940%" height="15" fill="rgb(212,184,35)"/><text x="15.6709%" y="287.50">ppr..</text></g><g><title>alloc::string::String::push_str (21 samples, 0.16%)</title><rect x="18.7500%" y="261" width="0.1649%" height="15" fill="rgb(217,184,38)"/><text x="19.0000%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (21 samples, 0.16%)</title><rect x="18.7500%" y="245" width="0.1649%" height="15" fill="rgb(218,88,44)"/><text x="19.0000%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 0.16%)</title><rect x="18.7500%" y="229" width="0.1649%" height="15" fill="rgb(241,121,2)"/><text x="19.0000%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (21 samples, 0.16%)</title><rect x="18.7500%" y="213" width="0.1649%" height="15" fill="rgb(232,92,4)"/><text x="19.0000%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.16%)</title><rect x="18.7500%" y="197" width="0.1649%" height="15" fill="rgb(233,16,51)"/><text x="19.0000%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (21 samples, 0.16%)</title><rect x="18.7500%" y="181" width="0.1649%" height="15" fill="rgb(205,138,9)"/><text x="19.0000%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (21 samples, 0.16%)</title><rect x="18.7500%" y="165" width="0.1649%" height="15" fill="rgb(212,133,44)"/><text x="19.0000%" y="175.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.16%)</title><rect x="18.7500%" y="149" width="0.1649%" height="15" fill="rgb(247,170,39)"/><text x="19.0000%" y="159.50"></text></g><g><title>_realloc (21 samples, 0.16%)</title><rect x="18.7500%" y="133" width="0.1649%" height="15" fill="rgb(236,183,8)"/><text x="19.0000%" y="143.50"></text></g><g><title>_malloc_zone_realloc (21 samples, 0.16%)</title><rect x="18.7500%" y="117" width="0.1649%" height="15" fill="rgb(245,194,21)"/><text x="19.0000%" y="127.50"></text></g><g><title>_szone_realloc (21 samples, 0.16%)</title><rect x="18.7500%" y="101" width="0.1649%" height="15" fill="rgb(244,142,33)"/><text x="19.0000%" y="111.50"></text></g><g><title>_szone_malloc_should_clear (21 samples, 0.16%)</title><rect x="18.7500%" y="85" width="0.1649%" height="15" fill="rgb(237,159,51)"/><text x="19.0000%" y="95.50"></text></g><g><title>_small_malloc_should_clear (21 samples, 0.16%)</title><rect x="18.7500%" y="69" width="0.1649%" height="15" fill="rgb(223,134,40)"/><text x="19.0000%" y="79.50"></text></g><g><title>_small_malloc_from_free_list (21 samples, 0.16%)</title><rect x="18.7500%" y="53" width="0.1649%" height="15" fill="rgb(217,227,45)"/><text x="19.0000%" y="63.50"></text></g><g><title>_small_free_list_add_ptr (21 samples, 0.16%)</title><rect x="18.7500%" y="37" width="0.1649%" height="15" fill="rgb(205,171,8)"/><text x="19.0000%" y="47.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try (16 samples, 0.13%)</title><rect x="18.9149%" y="485" width="0.1256%" height="15" fill="rgb(231,83,23)"/><text x="19.1649%" y="495.50"></text></g><g><title>__rust_maybe_catch_panic (16 samples, 0.13%)</title><rect x="18.9149%" y="469" width="0.1256%" height="15" fill="rgb(226,65,0)"/><text x="19.1649%" y="479.50"></text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (16 samples, 0.13%)</title><rect x="18.9149%" y="453" width="0.1256%" height="15" fill="rgb(218,127,49)"/><text x="19.1649%" y="463.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 0.13%)</title><rect x="18.9149%" y="437" width="0.1256%" height="15" fill="rgb(238,61,34)"/><text x="19.1649%" y="447.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (16 samples, 0.13%)</title><rect x="18.9149%" y="421" width="0.1256%" height="15" fill="rgb(228,144,3)"/><text x="19.1649%" y="431.50"></text></g><g><title>__rust_maybe_catch_panic (16 samples, 0.13%)</title><rect x="18.9149%" y="405" width="0.1256%" height="15" fill="rgb(212,155,32)"/><text x="19.1649%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (16 samples, 0.13%)</title><rect x="18.9149%" y="389" width="0.1256%" height="15" fill="rgb(219,3,13)"/><text x="19.1649%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 0.13%)</title><rect x="18.9149%" y="373" width="0.1256%" height="15" fill="rgb(225,41,39)"/><text x="19.1649%" y="383.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (16 samples, 0.13%)</title><rect x="18.9149%" y="357" width="0.1256%" height="15" fill="rgb(236,169,50)"/><text x="19.1649%" y="367.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (16 samples, 0.13%)</title><rect x="18.9149%" y="341" width="0.1256%" height="15" fill="rgb(253,211,17)"/><text x="19.1649%" y="351.50"></text></g><g><title>xwords::fill_crossword (16 samples, 0.13%)</title><rect x="18.9149%" y="325" width="0.1256%" height="15" fill="rgb(219,67,7)"/><text x="19.1649%" y="335.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (16 samples, 0.13%)</title><rect x="18.9149%" y="309" width="0.1256%" height="15" fill="rgb(236,198,21)"/><text x="19.1649%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.13%)</title><rect x="18.9149%" y="293" width="0.1256%" height="15" fill="rgb(250,83,24)"/><text x="19.1649%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.13%)</title><rect x="18.9149%" y="277" width="0.1256%" height="15" fill="rgb(249,175,20)"/><text x="19.1649%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (16 samples, 0.13%)</title><rect x="18.9149%" y="261" width="0.1256%" height="15" fill="rgb(239,72,36)"/><text x="19.1649%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.13%)</title><rect x="18.9149%" y="245" width="0.1256%" height="15" fill="rgb(225,33,12)"/><text x="19.1649%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (16 samples, 0.13%)</title><rect x="18.9149%" y="229" width="0.1256%" height="15" fill="rgb(213,209,10)"/><text x="19.1649%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="18.9149%" y="213" width="0.1256%" height="15" fill="rgb(233,156,7)"/><text x="19.1649%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (16 samples, 0.13%)</title><rect x="18.9149%" y="197" width="0.1256%" height="15" fill="rgb(242,71,8)"/><text x="19.1649%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (16 samples, 0.13%)</title><rect x="18.9149%" y="181" width="0.1256%" height="15" fill="rgb(223,170,53)"/><text x="19.1649%" y="191.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (16 samples, 0.13%)</title><rect x="18.9149%" y="165" width="0.1256%" height="15" fill="rgb(252,23,27)"/><text x="19.1649%" y="175.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="19.3310%" y="37" width="0.1099%" height="15" fill="rgb(220,23,37)"/><text x="19.5810%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (43 samples, 0.34%)</title><rect x="19.1661%" y="149" width="0.3376%" height="15" fill="rgb(208,60,20)"/><text x="19.4161%" y="159.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (39 samples, 0.31%)</title><rect x="19.1976%" y="133" width="0.3062%" height="15" fill="rgb(246,105,41)"/><text x="19.4476%" y="143.50"></text></g><g><title>core::str::pattern::Searcher::next_match (39 samples, 0.31%)</title><rect x="19.1976%" y="117" width="0.3062%" height="15" fill="rgb(229,80,14)"/><text x="19.4476%" y="127.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (39 samples, 0.31%)</title><rect x="19.1976%" y="101" width="0.3062%" height="15" fill="rgb(223,226,8)"/><text x="19.4476%" y="111.50"></text></g><g><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.31%)</title><rect x="19.1976%" y="85" width="0.3062%" height="15" fill="rgb(212,227,24)"/><text x="19.4476%" y="95.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.31%)</title><rect x="19.1976%" y="69" width="0.3062%" height="15" fill="rgb(234,38,14)"/><text x="19.4476%" y="79.50"></text></g><g><title>core::str::next_code_point (34 samples, 0.27%)</title><rect x="19.2368%" y="53" width="0.2670%" height="15" fill="rgb(222,86,39)"/><text x="19.4868%" y="63.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (16 samples, 0.13%)</title><rect x="19.5195%" y="117" width="0.1256%" height="15" fill="rgb(208,189,2)"/><text x="19.7695%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (16 samples, 0.13%)</title><rect x="19.5195%" y="101" width="0.1256%" height="15" fill="rgb(229,19,19)"/><text x="19.7695%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (28 samples, 0.22%)</title><rect x="19.5038%" y="149" width="0.2198%" height="15" fill="rgb(250,169,51)"/><text x="19.7538%" y="159.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (26 samples, 0.20%)</title><rect x="19.5195%" y="133" width="0.2041%" height="15" fill="rgb(209,182,25)"/><text x="19.7695%" y="143.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (96 samples, 0.75%)</title><rect x="19.0484%" y="213" width="0.7538%" height="15" fill="rgb(240,113,23)"/><text x="19.2984%" y="223.50"></text></g><g><title>core::fmt::write/core::fmt::run (96 samples, 0.75%)</title><rect x="19.0484%" y="197" width="0.7538%" height="15" fill="rgb(224,93,33)"/><text x="19.2984%" y="207.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (96 samples, 0.75%)</title><rect x="19.0484%" y="181" width="0.7538%" height="15" fill="rgb(234,37,17)"/><text x="19.2984%" y="191.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (96 samples, 0.75%)</title><rect x="19.0484%" y="165" width="0.7538%" height="15" fill="rgb(219,199,15)"/><text x="19.2984%" y="175.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (98 samples, 0.77%)</title><rect x="19.0405%" y="485" width="0.7695%" height="15" fill="rgb(249,190,12)"/><text x="19.2905%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (98 samples, 0.77%)</title><rect x="19.0405%" y="469" width="0.7695%" height="15" fill="rgb(254,188,20)"/><text x="19.2905%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (98 samples, 0.77%)</title><rect x="19.0405%" y="453" width="0.7695%" height="15" fill="rgb(227,85,36)"/><text x="19.2905%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (98 samples, 0.77%)</title><rect x="19.0405%" y="437" width="0.7695%" height="15" fill="rgb(214,186,36)"/><text x="19.2905%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (98 samples, 0.77%)</title><rect x="19.0405%" y="421" width="0.7695%" height="15" fill="rgb(207,67,47)"/><text x="19.2905%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (98 samples, 0.77%)</title><rect x="19.0405%" y="405" width="0.7695%" height="15" fill="rgb(224,140,32)"/><text x="19.2905%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 0.77%)</title><rect x="19.0405%" y="389" width="0.7695%" height="15" fill="rgb(225,114,12)"/><text x="19.2905%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (98 samples, 0.77%)</title><rect x="19.0405%" y="373" width="0.7695%" height="15" fill="rgb(209,199,39)"/><text x="19.2905%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (98 samples, 0.77%)</title><rect x="19.0405%" y="357" width="0.7695%" height="15" fill="rgb(216,181,6)"/><text x="19.2905%" y="367.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (98 samples, 0.77%)</title><rect x="19.0405%" y="341" width="0.7695%" height="15" fill="rgb(210,39,50)"/><text x="19.2905%" y="351.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (98 samples, 0.77%)</title><rect x="19.0405%" y="325" width="0.7695%" height="15" fill="rgb(239,154,53)"/><text x="19.2905%" y="335.50"></text></g><g><title>core::fmt::write (98 samples, 0.77%)</title><rect x="19.0405%" y="309" width="0.7695%" height="15" fill="rgb(235,123,22)"/><text x="19.2905%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (98 samples, 0.77%)</title><rect x="19.0405%" y="293" width="0.7695%" height="15" fill="rgb(243,194,26)"/><text x="19.2905%" y="303.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (98 samples, 0.77%)</title><rect x="19.0405%" y="277" width="0.7695%" height="15" fill="rgb(245,23,33)"/><text x="19.2905%" y="287.50"></text></g><g><title>symbolic_demangle::demangle (98 samples, 0.77%)</title><rect x="19.0405%" y="261" width="0.7695%" height="15" fill="rgb(213,191,38)"/><text x="19.2905%" y="271.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (98 samples, 0.77%)</title><rect x="19.0405%" y="245" width="0.7695%" height="15" fill="rgb(226,199,18)"/><text x="19.2905%" y="255.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (97 samples, 0.76%)</title><rect x="19.0484%" y="229" width="0.7616%" height="15" fill="rgb(210,106,30)"/><text x="19.2984%" y="239.50"></text></g><g><title>rustc_demangle::try_demangle (53 samples, 0.42%)</title><rect x="19.8414%" y="69" width="0.4161%" height="15" fill="rgb(219,177,27)"/><text x="20.0914%" y="79.50"></text></g><g><title>rustc_demangle::demangle (53 samples, 0.42%)</title><rect x="19.8414%" y="53" width="0.4161%" height="15" fill="rgb(215,14,22)"/><text x="20.0914%" y="63.50"></text></g><g><title>rustc_demangle::legacy::demangle (44 samples, 0.35%)</title><rect x="19.9121%" y="37" width="0.3455%" height="15" fill="rgb(240,24,8)"/><text x="20.1621%" y="47.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (55 samples, 0.43%)</title><rect x="19.8414%" y="85" width="0.4318%" height="15" fill="rgb(220,138,5)"/><text x="20.0914%" y="95.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (110 samples, 0.86%)</title><rect x="19.8178%" y="149" width="0.8637%" height="15" fill="rgb(254,39,11)"/><text x="20.0678%" y="159.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (110 samples, 0.86%)</title><rect x="19.8178%" y="133" width="0.8637%" height="15" fill="rgb(223,92,18)"/><text x="20.0678%" y="143.50"></text></g><g><title>symbolic_demangle::demangle (107 samples, 0.84%)</title><rect x="19.8414%" y="117" width="0.8401%" height="15" fill="rgb(231,216,35)"/><text x="20.0914%" y="127.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (107 samples, 0.84%)</title><rect x="19.8414%" y="101" width="0.8401%" height="15" fill="rgb(210,197,31)"/><text x="20.0914%" y="111.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (52 samples, 0.41%)</title><rect x="20.2732%" y="85" width="0.4083%" height="15" fill="rgb(233,78,6)"/><text x="20.5232%" y="95.50"></text></g><g><title>rustc_demangle::try_demangle (50 samples, 0.39%)</title><rect x="20.2889%" y="69" width="0.3926%" height="15" fill="rgb(219,192,52)"/><text x="20.5389%" y="79.50"></text></g><g><title>rustc_demangle::demangle (50 samples, 0.39%)</title><rect x="20.2889%" y="53" width="0.3926%" height="15" fill="rgb(240,140,47)"/><text x="20.5389%" y="63.50"></text></g><g><title>rustc_demangle::legacy::demangle (49 samples, 0.38%)</title><rect x="20.2968%" y="37" width="0.3847%" height="15" fill="rgb(214,22,41)"/><text x="20.5468%" y="47.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (117 samples, 0.92%)</title><rect x="19.8178%" y="181" width="0.9187%" height="15" fill="rgb(216,28,18)"/><text x="20.0678%" y="191.50"></text></g><g><title>core::fmt::write (117 samples, 0.92%)</title><rect x="19.8178%" y="165" width="0.9187%" height="15" fill="rgb(219,204,4)"/><text x="20.0678%" y="175.50"></text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (126 samples, 0.99%)</title><rect x="19.8100%" y="485" width="0.9893%" height="15" fill="rgb(216,98,27)"/><text x="20.0600%" y="495.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (126 samples, 0.99%)</title><rect x="19.8100%" y="469" width="0.9893%" height="15" fill="rgb(208,139,37)"/><text x="20.0600%" y="479.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (126 samples, 0.99%)</title><rect x="19.8100%" y="453" width="0.9893%" height="15" fill="rgb(241,193,50)"/><text x="20.0600%" y="463.50"></text></g><g><title>__rust_maybe_catch_panic (126 samples, 0.99%)</title><rect x="19.8100%" y="437" width="0.9893%" height="15" fill="rgb(227,24,47)"/><text x="20.0600%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (126 samples, 0.99%)</title><rect x="19.8100%" y="421" width="0.9893%" height="15" fill="rgb(212,91,31)"/><text x="20.0600%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (126 samples, 0.99%)</title><rect x="19.8100%" y="405" width="0.9893%" height="15" fill="rgb(253,174,34)"/><text x="20.0600%" y="415.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (126 samples, 0.99%)</title><rect x="19.8100%" y="389" width="0.9893%" height="15" fill="rgb(219,214,52)"/><text x="20.0600%" y="399.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (126 samples, 0.99%)</title><rect x="19.8100%" y="373" width="0.9893%" height="15" fill="rgb(222,221,3)"/><text x="20.0600%" y="383.50"></text></g><g><title>xwords::fill_crossword (126 samples, 0.99%)</title><rect x="19.8100%" y="357" width="0.9893%" height="15" fill="rgb(209,130,23)"/><text x="20.0600%" y="367.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (125 samples, 0.98%)</title><rect x="19.8178%" y="341" width="0.9815%" height="15" fill="rgb(232,162,43)"/><text x="20.0678%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (125 samples, 0.98%)</title><rect x="19.8178%" y="325" width="0.9815%" height="15" fill="rgb(245,34,38)"/><text x="20.0678%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (125 samples, 0.98%)</title><rect x="19.8178%" y="309" width="0.9815%" height="15" fill="rgb(226,70,5)"/><text x="20.0678%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (125 samples, 0.98%)</title><rect x="19.8178%" y="293" width="0.9815%" height="15" fill="rgb(238,97,25)"/><text x="20.0678%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (125 samples, 0.98%)</title><rect x="19.8178%" y="277" width="0.9815%" height="15" fill="rgb(246,1,22)"/><text x="20.0678%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (125 samples, 0.98%)</title><rect x="19.8178%" y="261" width="0.9815%" height="15" fill="rgb(248,180,27)"/><text x="20.0678%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 0.98%)</title><rect x="19.8178%" y="245" width="0.9815%" height="15" fill="rgb(223,147,15)"/><text x="20.0678%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (125 samples, 0.98%)</title><rect x="19.8178%" y="229" width="0.9815%" height="15" fill="rgb(220,142,50)"/><text x="20.0678%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (125 samples, 0.98%)</title><rect x="19.8178%" y="213" width="0.9815%" height="15" fill="rgb(209,24,8)"/><text x="20.0678%" y="223.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (125 samples, 0.98%)</title><rect x="19.8178%" y="197" width="0.9815%" height="15" fill="rgb(245,95,15)"/><text x="20.0678%" y="207.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (15 samples, 0.12%)</title><rect x="20.7993%" y="117" width="0.1178%" height="15" fill="rgb(254,132,39)"/><text x="21.0493%" y="127.50"></text></g><g><title>core::fmt::write (15 samples, 0.12%)</title><rect x="20.7993%" y="101" width="0.1178%" height="15" fill="rgb(230,135,4)"/><text x="21.0493%" y="111.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (15 samples, 0.12%)</title><rect x="20.7993%" y="85" width="0.1178%" height="15" fill="rgb(233,65,45)"/><text x="21.0493%" y="95.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (15 samples, 0.12%)</title><rect x="20.7993%" y="69" width="0.1178%" height="15" fill="rgb(238,156,12)"/><text x="21.0493%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (22 samples, 0.17%)</title><rect x="20.7993%" y="261" width="0.1727%" height="15" fill="rgb(230,14,54)"/><text x="21.0493%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.17%)</title><rect x="20.7993%" y="245" width="0.1727%" height="15" fill="rgb(242,41,37)"/><text x="21.0493%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (22 samples, 0.17%)</title><rect x="20.7993%" y="229" width="0.1727%" height="15" fill="rgb(231,37,53)"/><text x="21.0493%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 0.17%)</title><rect x="20.7993%" y="213" width="0.1727%" height="15" fill="rgb(235,181,47)"/><text x="21.0493%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (22 samples, 0.17%)</title><rect x="20.7993%" y="197" width="0.1727%" height="15" fill="rgb(253,41,16)"/><text x="21.0493%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.17%)</title><rect x="20.7993%" y="181" width="0.1727%" height="15" fill="rgb(245,44,19)"/><text x="21.0493%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.17%)</title><rect x="20.7993%" y="165" width="0.1727%" height="15" fill="rgb(245,22,46)"/><text x="21.0493%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (22 samples, 0.17%)</title><rect x="20.7993%" y="149" width="0.1727%" height="15" fill="rgb(207,84,51)"/><text x="21.0493%" y="159.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (22 samples, 0.17%)</title><rect x="20.7993%" y="133" width="0.1727%" height="15" fill="rgb(212,36,12)"/><text x="21.0493%" y="143.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/std::sys_common::thread::start_thread/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.19%)</title><rect x="20.7993%" y="485" width="0.1884%" height="15" fill="rgb(240,188,18)"/><text x="21.0493%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.19%)</title><rect x="20.7993%" y="469" width="0.1884%" height="15" fill="rgb(245,89,47)"/><text x="21.0493%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}}/std::thread::Builder::spawn_unchecked::{{closure}}/std::panic::catch_unwind/std::panicking::try (24 samples, 0.19%)</title><rect x="20.7993%" y="453" width="0.1884%" height="15" fill="rgb(216,24,14)"/><text x="21.0493%" y="463.50"></text></g><g><title>__rust_maybe_catch_panic (24 samples, 0.19%)</title><rect x="20.7993%" y="437" width="0.1884%" height="15" fill="rgb(217,71,21)"/><text x="21.0493%" y="447.50"></text></g><g><title>std::panicking::try::do_call/&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once/std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (24 samples, 0.19%)</title><rect x="20.7993%" y="421" width="0.1884%" height="15" fill="rgb(251,142,29)"/><text x="21.0493%" y="431.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.19%)</title><rect x="20.7993%" y="405" width="0.1884%" height="15" fill="rgb(210,29,22)"/><text x="21.0493%" y="415.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (24 samples, 0.19%)</title><rect x="20.7993%" y="389" width="0.1884%" height="15" fill="rgb(248,174,36)"/><text x="21.0493%" y="399.50"></text></g><g><title>__rust_maybe_catch_panic (24 samples, 0.19%)</title><rect x="20.7993%" y="373" width="0.1884%" height="15" fill="rgb(224,111,34)"/><text x="21.0493%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (24 samples, 0.19%)</title><rect x="20.7993%" y="357" width="0.1884%" height="15" fill="rgb(245,177,23)"/><text x="21.0493%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 0.19%)</title><rect x="20.7993%" y="341" width="0.1884%" height="15" fill="rgb(217,114,53)"/><text x="21.0493%" y="351.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (24 samples, 0.19%)</title><rect x="20.7993%" y="325" width="0.1884%" height="15" fill="rgb(223,157,10)"/><text x="21.0493%" y="335.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (24 samples, 0.19%)</title><rect x="20.7993%" y="309" width="0.1884%" height="15" fill="rgb(217,134,44)"/><text x="21.0493%" y="319.50"></text></g><g><title>xwords::fill_crossword (24 samples, 0.19%)</title><rect x="20.7993%" y="293" width="0.1884%" height="15" fill="rgb(222,195,7)"/><text x="21.0493%" y="303.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (24 samples, 0.19%)</title><rect x="20.7993%" y="277" width="0.1884%" height="15" fill="rgb(235,153,27)"/><text x="21.0493%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20 samples, 0.16%)</title><rect x="21.2469%" y="37" width="0.1570%" height="15" fill="rgb(247,105,14)"/><text x="21.4969%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (21 samples, 0.16%)</title><rect x="21.4353%" y="37" width="0.1649%" height="15" fill="rgb(250,6,2)"/><text x="21.6853%" y="47.50"></text></g><g><title>rustc_demangle::try_demangle (74 samples, 0.58%)</title><rect x="21.0349%" y="85" width="0.5810%" height="15" fill="rgb(250,41,38)"/><text x="21.2849%" y="95.50"></text></g><g><title>rustc_demangle::demangle (74 samples, 0.58%)</title><rect x="21.0349%" y="69" width="0.5810%" height="15" fill="rgb(234,127,49)"/><text x="21.2849%" y="79.50"></text></g><g><title>rustc_demangle::legacy::demangle (69 samples, 0.54%)</title><rect x="21.0741%" y="53" width="0.5418%" height="15" fill="rgb(242,79,16)"/><text x="21.3241%" y="63.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (77 samples, 0.60%)</title><rect x="21.0349%" y="101" width="0.6046%" height="15" fill="rgb(236,15,0)"/><text x="21.2849%" y="111.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (32 samples, 0.25%)</title><rect x="21.6552%" y="37" width="0.2513%" height="15" fill="rgb(217,113,36)"/><text x="21.9052%" y="47.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (38 samples, 0.30%)</title><rect x="21.6394%" y="85" width="0.2984%" height="15" fill="rgb(239,12,4)"/><text x="21.8894%" y="95.50"></text></g><g><title>core::fmt::write/core::fmt::run (38 samples, 0.30%)</title><rect x="21.6394%" y="69" width="0.2984%" height="15" fill="rgb(236,142,50)"/><text x="21.8894%" y="79.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (38 samples, 0.30%)</title><rect x="21.6394%" y="53" width="0.2984%" height="15" fill="rgb(244,108,52)"/><text x="21.8894%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26 samples, 0.20%)</title><rect x="22.1263%" y="37" width="0.2041%" height="15" fill="rgb(223,79,42)"/><text x="22.3763%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (14 samples, 0.11%)</title><rect x="22.3932%" y="37" width="0.1099%" height="15" fill="rgb(245,34,19)"/><text x="22.6432%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (194 samples, 1.52%)</title><rect x="20.9956%" y="341" width="1.5232%" height="15" fill="rgb(222,137,30)"/><text x="21.2456%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (194 samples, 1.52%)</title><rect x="20.9956%" y="325" width="1.5232%" height="15" fill="rgb(213,216,50)"/><text x="21.2456%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (194 samples, 1.52%)</title><rect x="20.9956%" y="309" width="1.5232%" height="15" fill="rgb(206,117,33)"/><text x="21.2456%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (194 samples, 1.52%)</title><rect x="20.9956%" y="293" width="1.5232%" height="15" fill="rgb(234,122,47)"/><text x="21.2456%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (194 samples, 1.52%)</title><rect x="20.9956%" y="277" width="1.5232%" height="15" fill="rgb(226,61,39)"/><text x="21.2456%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 1.52%)</title><rect x="20.9956%" y="261" width="1.5232%" height="15" fill="rgb(229,174,28)"/><text x="21.2456%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (194 samples, 1.52%)</title><rect x="20.9956%" y="245" width="1.5232%" height="15" fill="rgb(246,207,11)"/><text x="21.2456%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (194 samples, 1.52%)</title><rect x="20.9956%" y="229" width="1.5232%" height="15" fill="rgb(245,212,19)"/><text x="21.2456%" y="239.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (194 samples, 1.52%)</title><rect x="20.9956%" y="213" width="1.5232%" height="15" fill="rgb(240,107,51)"/><text x="21.2456%" y="223.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (194 samples, 1.52%)</title><rect x="20.9956%" y="197" width="1.5232%" height="15" fill="rgb(238,67,13)"/><text x="21.2456%" y="207.50"></text></g><g><title>core::fmt::write (194 samples, 1.52%)</title><rect x="20.9956%" y="181" width="1.5232%" height="15" fill="rgb(250,8,29)"/><text x="21.2456%" y="191.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (194 samples, 1.52%)</title><rect x="20.9956%" y="165" width="1.5232%" height="15" fill="rgb(227,44,9)"/><text x="21.2456%" y="175.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (194 samples, 1.52%)</title><rect x="20.9956%" y="149" width="1.5232%" height="15" fill="rgb(247,128,2)"/><text x="21.2456%" y="159.50"></text></g><g><title>symbolic_demangle::demangle (189 samples, 1.48%)</title><rect x="21.0349%" y="133" width="1.4840%" height="15" fill="rgb(239,11,50)"/><text x="21.2849%" y="143.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (189 samples, 1.48%)</title><rect x="21.0349%" y="117" width="1.4840%" height="15" fill="rgb(241,11,28)"/><text x="21.2849%" y="127.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (112 samples, 0.88%)</title><rect x="21.6394%" y="101" width="0.8794%" height="15" fill="rgb(220,15,14)"/><text x="21.8894%" y="111.50"></text></g><g><title>rustc_demangle::try_demangle (74 samples, 0.58%)</title><rect x="21.9378%" y="85" width="0.5810%" height="15" fill="rgb(226,97,9)"/><text x="22.1878%" y="95.50"></text></g><g><title>rustc_demangle::demangle (74 samples, 0.58%)</title><rect x="21.9378%" y="69" width="0.5810%" height="15" fill="rgb(240,221,24)"/><text x="22.1878%" y="79.50"></text></g><g><title>rustc_demangle::legacy::demangle (74 samples, 0.58%)</title><rect x="21.9378%" y="53" width="0.5810%" height="15" fill="rgb(238,199,31)"/><text x="22.1878%" y="63.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (196 samples, 1.54%)</title><rect x="20.9878%" y="485" width="1.5389%" height="15" fill="rgb(222,15,37)"/><text x="21.2378%" y="495.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (196 samples, 1.54%)</title><rect x="20.9878%" y="469" width="1.5389%" height="15" fill="rgb(225,66,12)"/><text x="21.2378%" y="479.50"></text></g><g><title>__rust_maybe_catch_panic (196 samples, 1.54%)</title><rect x="20.9878%" y="453" width="1.5389%" height="15" fill="rgb(224,142,38)"/><text x="21.2378%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (196 samples, 1.54%)</title><rect x="20.9878%" y="437" width="1.5389%" height="15" fill="rgb(208,206,25)"/><text x="21.2378%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (196 samples, 1.54%)</title><rect x="20.9878%" y="421" width="1.5389%" height="15" fill="rgb(205,153,20)"/><text x="21.2378%" y="431.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (196 samples, 1.54%)</title><rect x="20.9878%" y="405" width="1.5389%" height="15" fill="rgb(206,199,32)"/><text x="21.2378%" y="415.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works (196 samples, 1.54%)</title><rect x="20.9878%" y="389" width="1.5389%" height="15" fill="rgb(246,135,31)"/><text x="21.2378%" y="399.50"></text></g><g><title>xwords::fill_crossword (196 samples, 1.54%)</title><rect x="20.9878%" y="373" width="1.5389%" height="15" fill="rgb(208,211,40)"/><text x="21.2378%" y="383.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (195 samples, 1.53%)</title><rect x="20.9956%" y="357" width="1.5311%" height="15" fill="rgb(210,219,1)"/><text x="21.2456%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (26 samples, 0.20%)</title><rect x="22.5817%" y="69" width="0.2041%" height="15" fill="rgb(232,190,35)"/><text x="22.8317%" y="79.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (20 samples, 0.16%)</title><rect x="22.6288%" y="53" width="0.1570%" height="15" fill="rgb(211,9,18)"/><text x="22.8788%" y="63.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (18 samples, 0.14%)</title><rect x="22.6445%" y="37" width="0.1413%" height="15" fill="rgb(212,15,38)"/><text x="22.8945%" y="47.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (33 samples, 0.26%)</title><rect x="22.8094%" y="37" width="0.2591%" height="15" fill="rgb(238,74,28)"/><text x="23.0594%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.60%)</title><rect x="22.7937%" y="53" width="0.6046%" height="15" fill="rgb(230,98,34)"/><text x="23.0437%" y="63.50"></text></g><g><title>core::str::next_code_point (42 samples, 0.33%)</title><rect x="23.0685%" y="37" width="0.3298%" height="15" fill="rgb(212,130,40)"/><text x="23.3185%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.10%)</title><rect x="23.4296%" y="53" width="0.1021%" height="15" fill="rgb(234,200,15)"/><text x="23.6796%" y="63.50"></text></g><g><title>rustc_demangle::try_demangle (124 samples, 0.97%)</title><rect x="22.5817%" y="101" width="0.9736%" height="15" fill="rgb(216,227,29)"/><text x="22.8317%" y="111.50"></text></g><g><title>rustc_demangle::demangle (124 samples, 0.97%)</title><rect x="22.5817%" y="85" width="0.9736%" height="15" fill="rgb(226,47,50)"/><text x="22.8317%" y="95.50"></text></g><g><title>rustc_demangle::legacy::demangle (98 samples, 0.77%)</title><rect x="22.7858%" y="69" width="0.7695%" height="15" fill="rgb(232,146,36)"/><text x="23.0358%" y="79.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (127 samples, 1.00%)</title><rect x="22.5817%" y="117" width="0.9972%" height="15" fill="rgb(234,162,39)"/><text x="22.8317%" y="127.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (46 samples, 0.36%)</title><rect x="23.5788%" y="101" width="0.3612%" height="15" fill="rgb(253,148,35)"/><text x="23.8288%" y="111.50"></text></g><g><title>core::fmt::write/core::fmt::run (46 samples, 0.36%)</title><rect x="23.5788%" y="85" width="0.3612%" height="15" fill="rgb(253,200,8)"/><text x="23.8288%" y="95.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (46 samples, 0.36%)</title><rect x="23.5788%" y="69" width="0.3612%" height="15" fill="rgb(220,107,20)"/><text x="23.8288%" y="79.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (46 samples, 0.36%)</title><rect x="23.5788%" y="53" width="0.3612%" height="15" fill="rgb(205,200,12)"/><text x="23.8288%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25 samples, 0.20%)</title><rect x="24.0264%" y="37" width="0.1963%" height="15" fill="rgb(219,123,42)"/><text x="24.2764%" y="47.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.46%)</title><rect x="24.0264%" y="53" width="0.4633%" height="15" fill="rgb(236,136,3)"/><text x="24.2764%" y="63.50"></text></g><g><title>core::str::next_code_point (34 samples, 0.27%)</title><rect x="24.2227%" y="37" width="0.2670%" height="15" fill="rgb(213,112,27)"/><text x="24.4727%" y="47.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (273 samples, 2.14%)</title><rect x="22.5267%" y="213" width="2.1435%" height="15" fill="rgb(229,181,47)"/><text x="22.7767%" y="223.50">a..</text></g><g><title>core::fmt::write (273 samples, 2.14%)</title><rect x="22.5267%" y="197" width="2.1435%" height="15" fill="rgb(243,123,15)"/><text x="22.7767%" y="207.50">c..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (273 samples, 2.14%)</title><rect x="22.5267%" y="181" width="2.1435%" height="15" fill="rgb(206,135,33)"/><text x="22.7767%" y="191.50">&lt;..</text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (273 samples, 2.14%)</title><rect x="22.5267%" y="165" width="2.1435%" height="15" fill="rgb(232,190,44)"/><text x="22.7767%" y="175.50">&lt;..</text></g><g><title>symbolic_demangle::demangle (266 samples, 2.09%)</title><rect x="22.5817%" y="149" width="2.0886%" height="15" fill="rgb(237,122,12)"/><text x="22.8317%" y="159.50">s..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (266 samples, 2.09%)</title><rect x="22.5817%" y="133" width="2.0886%" height="15" fill="rgb(245,157,35)"/><text x="22.8317%" y="143.50">&lt;..</text></g><g><title>symbolic_demangle::try_demangle_rust (139 samples, 1.09%)</title><rect x="23.5788%" y="117" width="1.0914%" height="15" fill="rgb(205,164,34)"/><text x="23.8288%" y="127.50"></text></g><g><title>rustc_demangle::try_demangle (93 samples, 0.73%)</title><rect x="23.9400%" y="101" width="0.7302%" height="15" fill="rgb(237,82,1)"/><text x="24.1900%" y="111.50"></text></g><g><title>rustc_demangle::demangle (93 samples, 0.73%)</title><rect x="23.9400%" y="85" width="0.7302%" height="15" fill="rgb(220,167,39)"/><text x="24.1900%" y="95.50"></text></g><g><title>rustc_demangle::legacy::demangle (82 samples, 0.64%)</title><rect x="24.0264%" y="69" width="0.6438%" height="15" fill="rgb(208,133,37)"/><text x="24.2764%" y="79.50"></text></g><g><title>test::run_test::run_test_inner::{{closure}}/test::run_test_in_process/std::panic::catch_unwind/std::panicking::try (275 samples, 2.16%)</title><rect x="22.5267%" y="485" width="2.1592%" height="15" fill="rgb(243,161,51)"/><text x="22.7767%" y="495.50">t..</text></g><g><title>__rust_maybe_catch_panic (275 samples, 2.16%)</title><rect x="22.5267%" y="469" width="2.1592%" height="15" fill="rgb(232,127,41)"/><text x="22.7767%" y="479.50">_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (275 samples, 2.16%)</title><rect x="22.5267%" y="453" width="2.1592%" height="15" fill="rgb(237,20,11)"/><text x="22.7767%" y="463.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (275 samples, 2.16%)</title><rect x="22.5267%" y="437" width="2.1592%" height="15" fill="rgb(233,186,24)"/><text x="22.7767%" y="447.50">c..</text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (275 samples, 2.16%)</title><rect x="22.5267%" y="421" width="2.1592%" height="15" fill="rgb(210,39,6)"/><text x="22.7767%" y="431.50">x..</text></g><g><title>xwords::tests::puz_2020_10_12_works (275 samples, 2.16%)</title><rect x="22.5267%" y="405" width="2.1592%" height="15" fill="rgb(216,11,48)"/><text x="22.7767%" y="415.50">x..</text></g><g><title>xwords::fill_crossword (275 samples, 2.16%)</title><rect x="22.5267%" y="389" width="2.1592%" height="15" fill="rgb(222,13,18)"/><text x="22.7767%" y="399.50">x..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (275 samples, 2.16%)</title><rect x="22.5267%" y="373" width="2.1592%" height="15" fill="rgb(238,150,15)"/><text x="22.7767%" y="383.50">p..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (275 samples, 2.16%)</title><rect x="22.5267%" y="357" width="2.1592%" height="15" fill="rgb(235,57,5)"/><text x="22.7767%" y="367.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (275 samples, 2.16%)</title><rect x="22.5267%" y="341" width="2.1592%" height="15" fill="rgb(214,196,13)"/><text x="22.7767%" y="351.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (275 samples, 2.16%)</title><rect x="22.5267%" y="325" width="2.1592%" height="15" fill="rgb(217,219,39)"/><text x="22.7767%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (275 samples, 2.16%)</title><rect x="22.5267%" y="309" width="2.1592%" height="15" fill="rgb(237,225,39)"/><text x="22.7767%" y="319.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (275 samples, 2.16%)</title><rect x="22.5267%" y="293" width="2.1592%" height="15" fill="rgb(221,88,26)"/><text x="22.7767%" y="303.50">a..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (275 samples, 2.16%)</title><rect x="22.5267%" y="277" width="2.1592%" height="15" fill="rgb(205,45,48)"/><text x="22.7767%" y="287.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (275 samples, 2.16%)</title><rect x="22.5267%" y="261" width="2.1592%" height="15" fill="rgb(234,216,37)"/><text x="22.7767%" y="271.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (275 samples, 2.16%)</title><rect x="22.5267%" y="245" width="2.1592%" height="15" fill="rgb(243,210,39)"/><text x="22.7767%" y="255.50">c..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (275 samples, 2.16%)</title><rect x="22.5267%" y="229" width="2.1592%" height="15" fill="rgb(232,86,47)"/><text x="22.7767%" y="239.50">p..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str/&lt;alloc::string::String as core::fmt::Write&gt;::write_str/alloc::string::String::push_str/alloc::vec::Vec&lt;T&gt;::extend_from_slice (19 samples, 0.15%)</title><rect x="24.7173%" y="133" width="0.1492%" height="15" fill="rgb(234,222,31)"/><text x="24.9673%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend/alloc::vec::Vec&lt;T&gt;::reserve/alloc::raw_vec::RawVec&lt;T,A&gt;::reserve/alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal/&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc/alloc::alloc::realloc (14 samples, 0.11%)</title><rect x="24.7566%" y="117" width="0.1099%" height="15" fill="rgb(211,202,13)"/><text x="25.0066%" y="127.50"></text></g><g><title>_realloc (14 samples, 0.11%)</title><rect x="24.7566%" y="101" width="0.1099%" height="15" fill="rgb(237,138,3)"/><text x="25.0066%" y="111.50"></text></g><g><title>_malloc_zone_realloc (14 samples, 0.11%)</title><rect x="24.7566%" y="85" width="0.1099%" height="15" fill="rgb(225,74,1)"/><text x="25.0066%" y="95.50"></text></g><g><title>_szone_realloc (14 samples, 0.11%)</title><rect x="24.7566%" y="69" width="0.1099%" height="15" fill="rgb(252,76,17)"/><text x="25.0066%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.16%)</title><rect x="24.9293%" y="37" width="0.1649%" height="15" fill="rgb(217,109,21)"/><text x="25.1793%" y="47.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (45 samples, 0.35%)</title><rect x="24.9058%" y="117" width="0.3533%" height="15" fill="rgb(235,7,3)"/><text x="25.1558%" y="127.50"></text></g><g><title>core::str::pattern::Searcher::next_match (45 samples, 0.35%)</title><rect x="24.9058%" y="101" width="0.3533%" height="15" fill="rgb(238,16,13)"/><text x="25.1558%" y="111.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (45 samples, 0.35%)</title><rect x="24.9058%" y="85" width="0.3533%" height="15" fill="rgb(242,32,47)"/><text x="25.1558%" y="95.50"></text></g><g><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.35%)</title><rect x="24.9058%" y="69" width="0.3533%" height="15" fill="rgb(241,38,43)"/><text x="25.1558%" y="79.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.35%)</title><rect x="24.9058%" y="53" width="0.3533%" height="15" fill="rgb(213,124,26)"/><text x="25.1558%" y="63.50"></text></g><g><title>core::str::next_code_point (21 samples, 0.16%)</title><rect x="25.0942%" y="37" width="0.1649%" height="15" fill="rgb(208,183,39)"/><text x="25.3442%" y="47.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (55 samples, 0.43%)</title><rect x="24.8665%" y="133" width="0.4318%" height="15" fill="rgb(222,116,36)"/><text x="25.1165%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13 samples, 0.10%)</title><rect x="25.3455%" y="69" width="0.1021%" height="15" fill="rgb(214,36,24)"/><text x="25.5955%" y="79.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.10%)</title><rect x="25.3455%" y="53" width="0.1021%" height="15" fill="rgb(254,64,37)"/><text x="25.5955%" y="63.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (14 samples, 0.11%)</title><rect x="25.3455%" y="101" width="0.1099%" height="15" fill="rgb(216,166,14)"/><text x="25.5955%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (14 samples, 0.11%)</title><rect x="25.3455%" y="85" width="0.1099%" height="15" fill="rgb(242,144,17)"/><text x="25.5955%" y="95.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (25 samples, 0.20%)</title><rect x="25.2984%" y="133" width="0.1963%" height="15" fill="rgb(233,229,42)"/><text x="25.5484%" y="143.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (19 samples, 0.15%)</title><rect x="25.3455%" y="117" width="0.1492%" height="15" fill="rgb(221,204,47)"/><text x="25.5955%" y="127.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.14%)</title><rect x="25.5810%" y="85" width="0.1413%" height="15" fill="rgb(230,26,44)"/><text x="25.8310%" y="95.50"></text></g><g><title>core::str::next_code_point (15 samples, 0.12%)</title><rect x="25.6046%" y="69" width="0.1178%" height="15" fill="rgb(242,209,3)"/><text x="25.8546%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (27 samples, 0.21%)</title><rect x="25.5810%" y="117" width="0.2120%" height="15" fill="rgb(229,32,19)"/><text x="25.8310%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27 samples, 0.21%)</title><rect x="25.5810%" y="101" width="0.2120%" height="15" fill="rgb(211,49,50)"/><text x="25.8310%" y="111.50"></text></g><g><title>xwords::fill_crossword (143 samples, 1.12%)</title><rect x="24.6859%" y="485" width="1.1228%" height="15" fill="rgb(208,171,21)"/><text x="24.9359%" y="495.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (143 samples, 1.12%)</title><rect x="24.6859%" y="469" width="1.1228%" height="15" fill="rgb(240,86,9)"/><text x="24.9359%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (143 samples, 1.12%)</title><rect x="24.6859%" y="453" width="1.1228%" height="15" fill="rgb(207,169,47)"/><text x="24.9359%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (143 samples, 1.12%)</title><rect x="24.6859%" y="437" width="1.1228%" height="15" fill="rgb(212,103,33)"/><text x="24.9359%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (143 samples, 1.12%)</title><rect x="24.6859%" y="421" width="1.1228%" height="15" fill="rgb(209,86,21)"/><text x="24.9359%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (143 samples, 1.12%)</title><rect x="24.6859%" y="405" width="1.1228%" height="15" fill="rgb(221,77,49)"/><text x="24.9359%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (143 samples, 1.12%)</title><rect x="24.6859%" y="389" width="1.1228%" height="15" fill="rgb(244,188,21)"/><text x="24.9359%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 1.12%)</title><rect x="24.6859%" y="373" width="1.1228%" height="15" fill="rgb(228,11,38)"/><text x="24.9359%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (143 samples, 1.12%)</title><rect x="24.6859%" y="357" width="1.1228%" height="15" fill="rgb(222,158,25)"/><text x="24.9359%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (143 samples, 1.12%)</title><rect x="24.6859%" y="341" width="1.1228%" height="15" fill="rgb(232,223,3)"/><text x="24.9359%" y="351.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (143 samples, 1.12%)</title><rect x="24.6859%" y="325" width="1.1228%" height="15" fill="rgb(218,55,0)"/><text x="24.9359%" y="335.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="309" width="1.1228%" height="15" fill="rgb(223,130,7)"/><text x="24.9359%" y="319.50"></text></g><g><title>core::fmt::write (143 samples, 1.12%)</title><rect x="24.6859%" y="293" width="1.1228%" height="15" fill="rgb(246,183,32)"/><text x="24.9359%" y="303.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="277" width="1.1228%" height="15" fill="rgb(233,194,27)"/><text x="24.9359%" y="287.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="261" width="1.1228%" height="15" fill="rgb(244,187,35)"/><text x="24.9359%" y="271.50"></text></g><g><title>symbolic_demangle::demangle (143 samples, 1.12%)</title><rect x="24.6859%" y="245" width="1.1228%" height="15" fill="rgb(238,33,29)"/><text x="24.9359%" y="255.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (143 samples, 1.12%)</title><rect x="24.6859%" y="229" width="1.1228%" height="15" fill="rgb(235,216,15)"/><text x="24.9359%" y="239.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (143 samples, 1.12%)</title><rect x="24.6859%" y="213" width="1.1228%" height="15" fill="rgb(211,167,33)"/><text x="24.9359%" y="223.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="197" width="1.1228%" height="15" fill="rgb(235,74,3)"/><text x="24.9359%" y="207.50"></text></g><g><title>core::fmt::write/core::fmt::run (143 samples, 1.12%)</title><rect x="24.6859%" y="181" width="1.1228%" height="15" fill="rgb(241,103,0)"/><text x="24.9359%" y="191.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="165" width="1.1228%" height="15" fill="rgb(223,138,54)"/><text x="24.9359%" y="175.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (143 samples, 1.12%)</title><rect x="24.6859%" y="149" width="1.1228%" height="15" fill="rgb(228,24,36)"/><text x="24.9359%" y="159.50"></text></g><g><title>rustc_demangle::legacy::is_rust_hash (29 samples, 0.23%)</title><rect x="25.5810%" y="133" width="0.2277%" height="15" fill="rgb(215,14,8)"/><text x="25.8310%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.10%)</title><rect x="25.8480%" y="37" width="0.1021%" height="15" fill="rgb(231,9,2)"/><text x="26.0980%" y="47.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (24 samples, 0.19%)</title><rect x="25.8480%" y="53" width="0.1884%" height="15" fill="rgb(215,150,51)"/><text x="26.0980%" y="63.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.16%)</title><rect x="26.0364%" y="53" width="0.1570%" height="15" fill="rgb(254,124,6)"/><text x="26.2864%" y="63.50"></text></g><g><title>rustc_demangle::try_demangle (84 samples, 0.66%)</title><rect x="25.8087%" y="165" width="0.6595%" height="15" fill="rgb(216,111,25)"/><text x="26.0587%" y="175.50"></text></g><g><title>rustc_demangle::demangle (84 samples, 0.66%)</title><rect x="25.8087%" y="149" width="0.6595%" height="15" fill="rgb(237,87,46)"/><text x="26.0587%" y="159.50"></text></g><g><title>rustc_demangle::legacy::demangle (79 samples, 0.62%)</title><rect x="25.8480%" y="133" width="0.6203%" height="15" fill="rgb(216,183,42)"/><text x="26.0980%" y="143.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (79 samples, 0.62%)</title><rect x="25.8480%" y="117" width="0.6203%" height="15" fill="rgb(214,175,46)"/><text x="26.0980%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (79 samples, 0.62%)</title><rect x="25.8480%" y="101" width="0.6203%" height="15" fill="rgb(247,223,23)"/><text x="26.0980%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (79 samples, 0.62%)</title><rect x="25.8480%" y="85" width="0.6203%" height="15" fill="rgb(240,132,12)"/><text x="26.0980%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (79 samples, 0.62%)</title><rect x="25.8480%" y="69" width="0.6203%" height="15" fill="rgb(245,123,48)"/><text x="26.0980%" y="79.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (35 samples, 0.27%)</title><rect x="26.1935%" y="53" width="0.2748%" height="15" fill="rgb(245,156,12)"/><text x="26.4435%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (24 samples, 0.19%)</title><rect x="26.2798%" y="37" width="0.1884%" height="15" fill="rgb(212,48,35)"/><text x="26.5298%" y="47.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (85 samples, 0.67%)</title><rect x="25.8087%" y="181" width="0.6674%" height="15" fill="rgb(213,21,25)"/><text x="26.0587%" y="191.50"></text></g><g><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next/&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (35 samples, 0.27%)</title><rect x="26.7823%" y="37" width="0.2748%" height="15" fill="rgb(215,17,16)"/><text x="27.0323%" y="47.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (60 samples, 0.47%)</title><rect x="26.6175%" y="85" width="0.4711%" height="15" fill="rgb(235,160,36)"/><text x="26.8675%" y="95.50"></text></g><g><title>core::str::pattern::Searcher::next_match (60 samples, 0.47%)</title><rect x="26.6175%" y="69" width="0.4711%" height="15" fill="rgb(248,141,20)"/><text x="26.8675%" y="79.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (54 samples, 0.42%)</title><rect x="26.6646%" y="53" width="0.4240%" height="15" fill="rgb(253,123,32)"/><text x="26.9146%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (67 samples, 0.53%)</title><rect x="26.5782%" y="101" width="0.5261%" height="15" fill="rgb(214,72,40)"/><text x="26.8282%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (14 samples, 0.11%)</title><rect x="27.1043%" y="101" width="0.1099%" height="15" fill="rgb(234,122,41)"/><text x="27.3543%" y="111.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (13 samples, 0.10%)</title><rect x="27.1121%" y="85" width="0.1021%" height="15" fill="rgb(236,55,21)"/><text x="27.3621%" y="95.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (14 samples, 0.11%)</title><rect x="27.2613%" y="53" width="0.1099%" height="15" fill="rgb(222,162,54)"/><text x="27.5113%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (33 samples, 0.26%)</title><rect x="27.2613%" y="85" width="0.2591%" height="15" fill="rgb(219,74,8)"/><text x="27.5113%" y="95.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (33 samples, 0.26%)</title><rect x="27.2613%" y="69" width="0.2591%" height="15" fill="rgb(222,106,42)"/><text x="27.5113%" y="79.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (19 samples, 0.15%)</title><rect x="27.3712%" y="53" width="0.1492%" height="15" fill="rgb(223,40,43)"/><text x="27.6212%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (47 samples, 0.37%)</title><rect x="27.2613%" y="101" width="0.3690%" height="15" fill="rgb(229,216,28)"/><text x="27.5113%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (14 samples, 0.11%)</title><rect x="27.6303%" y="85" width="0.1099%" height="15" fill="rgb(222,17,5)"/><text x="27.8803%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.11%)</title><rect x="27.6303%" y="69" width="0.1099%" height="15" fill="rgb(212,51,2)"/><text x="27.8803%" y="79.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="27.6303%" y="53" width="0.1099%" height="15" fill="rgb(243,213,35)"/><text x="27.8803%" y="63.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (163 samples, 1.28%)</title><rect x="26.4761%" y="165" width="1.2798%" height="15" fill="rgb(218,68,26)"/><text x="26.7261%" y="175.50"></text></g><g><title>core::fmt::write/core::fmt::run (163 samples, 1.28%)</title><rect x="26.4761%" y="149" width="1.2798%" height="15" fill="rgb(214,135,33)"/><text x="26.7261%" y="159.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (163 samples, 1.28%)</title><rect x="26.4761%" y="133" width="1.2798%" height="15" fill="rgb(248,7,20)"/><text x="26.7261%" y="143.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (163 samples, 1.28%)</title><rect x="26.4761%" y="117" width="1.2798%" height="15" fill="rgb(209,147,4)"/><text x="26.7261%" y="127.50"></text></g><g><title>rustc_demangle::legacy::is_rust_hash (16 samples, 0.13%)</title><rect x="27.6303%" y="101" width="0.1256%" height="15" fill="rgb(251,48,10)"/><text x="27.8803%" y="111.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next/core::slice::Iter&lt;T&gt;::post_inc_start (22 samples, 0.17%)</title><rect x="27.7952%" y="53" width="0.1727%" height="15" fill="rgb(226,62,22)"/><text x="28.0452%" y="63.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="27.9680%" y="53" width="0.1256%" height="15" fill="rgb(218,5,25)"/><text x="28.2180%" y="63.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (65 samples, 0.51%)</title><rect x="27.7952%" y="117" width="0.5104%" height="15" fill="rgb(240,229,8)"/><text x="28.0452%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (65 samples, 0.51%)</title><rect x="27.7952%" y="101" width="0.5104%" height="15" fill="rgb(219,123,53)"/><text x="28.0452%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (65 samples, 0.51%)</title><rect x="27.7952%" y="85" width="0.5104%" height="15" fill="rgb(239,77,49)"/><text x="28.0452%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (65 samples, 0.51%)</title><rect x="27.7952%" y="69" width="0.5104%" height="15" fill="rgb(247,22,15)"/><text x="28.0452%" y="79.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (27 samples, 0.21%)</title><rect x="28.0936%" y="53" width="0.2120%" height="15" fill="rgb(210,55,17)"/><text x="28.3436%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (16 samples, 0.13%)</title><rect x="28.1800%" y="37" width="0.1256%" height="15" fill="rgb(228,130,51)"/><text x="28.4300%" y="47.50"></text></g><g><title>xwords::tests::puz_2020_10_12_works::{{closure}} (321 samples, 2.52%)</title><rect x="25.8087%" y="485" width="2.5204%" height="15" fill="rgb(206,81,33)"/><text x="26.0587%" y="495.50">xw..</text></g><g><title>xwords::tests::puz_2020_10_12_works (321 samples, 2.52%)</title><rect x="25.8087%" y="469" width="2.5204%" height="15" fill="rgb(241,104,30)"/><text x="26.0587%" y="479.50">xw..</text></g><g><title>xwords::fill_crossword (321 samples, 2.52%)</title><rect x="25.8087%" y="453" width="2.5204%" height="15" fill="rgb(240,88,12)"/><text x="26.0587%" y="463.50">xw..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (321 samples, 2.52%)</title><rect x="25.8087%" y="437" width="2.5204%" height="15" fill="rgb(249,116,19)"/><text x="26.0587%" y="447.50">pp..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (321 samples, 2.52%)</title><rect x="25.8087%" y="421" width="2.5204%" height="15" fill="rgb(250,218,1)"/><text x="26.0587%" y="431.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (321 samples, 2.52%)</title><rect x="25.8087%" y="405" width="2.5204%" height="15" fill="rgb(233,220,16)"/><text x="26.0587%" y="415.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (321 samples, 2.52%)</title><rect x="25.8087%" y="389" width="2.5204%" height="15" fill="rgb(248,195,9)"/><text x="26.0587%" y="399.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (321 samples, 2.52%)</title><rect x="25.8087%" y="373" width="2.5204%" height="15" fill="rgb(230,58,11)"/><text x="26.0587%" y="383.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (321 samples, 2.52%)</title><rect x="25.8087%" y="357" width="2.5204%" height="15" fill="rgb(217,125,51)"/><text x="26.0587%" y="367.50">al..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (321 samples, 2.52%)</title><rect x="25.8087%" y="341" width="2.5204%" height="15" fill="rgb(252,119,13)"/><text x="26.0587%" y="351.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (321 samples, 2.52%)</title><rect x="25.8087%" y="325" width="2.5204%" height="15" fill="rgb(245,23,2)"/><text x="26.0587%" y="335.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (321 samples, 2.52%)</title><rect x="25.8087%" y="309" width="2.5204%" height="15" fill="rgb(216,98,41)"/><text x="26.0587%" y="319.50">co..</text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (321 samples, 2.52%)</title><rect x="25.8087%" y="293" width="2.5204%" height="15" fill="rgb(228,181,52)"/><text x="26.0587%" y="303.50">pp..</text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (321 samples, 2.52%)</title><rect x="25.8087%" y="277" width="2.5204%" height="15" fill="rgb(238,203,39)"/><text x="26.0587%" y="287.50">al..</text></g><g><title>core::fmt::write (321 samples, 2.52%)</title><rect x="25.8087%" y="261" width="2.5204%" height="15" fill="rgb(214,56,7)"/><text x="26.0587%" y="271.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (321 samples, 2.52%)</title><rect x="25.8087%" y="245" width="2.5204%" height="15" fill="rgb(229,167,38)"/><text x="26.0587%" y="255.50">&lt;&amp;..</text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (321 samples, 2.52%)</title><rect x="25.8087%" y="229" width="2.5204%" height="15" fill="rgb(242,135,4)"/><text x="26.0587%" y="239.50">&lt;p..</text></g><g><title>symbolic_demangle::demangle (321 samples, 2.52%)</title><rect x="25.8087%" y="213" width="2.5204%" height="15" fill="rgb(211,228,4)"/><text x="26.0587%" y="223.50">sy..</text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (321 samples, 2.52%)</title><rect x="25.8087%" y="197" width="2.5204%" height="15" fill="rgb(206,139,51)"/><text x="26.0587%" y="207.50">&lt;s..</text></g><g><title>symbolic_demangle::try_demangle_rust (236 samples, 1.85%)</title><rect x="26.4761%" y="181" width="1.8530%" height="15" fill="rgb(236,70,25)"/><text x="26.7261%" y="191.50">s..</text></g><g><title>rustc_demangle::try_demangle (73 samples, 0.57%)</title><rect x="27.7560%" y="165" width="0.5732%" height="15" fill="rgb(224,211,44)"/><text x="28.0060%" y="175.50"></text></g><g><title>rustc_demangle::demangle (73 samples, 0.57%)</title><rect x="27.7560%" y="149" width="0.5732%" height="15" fill="rgb(226,160,45)"/><text x="28.0060%" y="159.50"></text></g><g><title>rustc_demangle::legacy::demangle (68 samples, 0.53%)</title><rect x="27.7952%" y="133" width="0.5339%" height="15" fill="rgb(235,150,10)"/><text x="28.0452%" y="143.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (13 samples, 0.10%)</title><rect x="28.3370%" y="133" width="0.1021%" height="15" fill="rgb(253,222,52)"/><text x="28.5870%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (13 samples, 0.10%)</title><rect x="28.3370%" y="117" width="0.1021%" height="15" fill="rgb(248,159,14)"/><text x="28.5870%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.10%)</title><rect x="28.3370%" y="101" width="0.1021%" height="15" fill="rgb(252,161,4)"/><text x="28.5870%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.10%)</title><rect x="28.3370%" y="85" width="0.1021%" height="15" fill="rgb(227,107,7)"/><text x="28.5870%" y="95.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (13 samples, 0.10%)</title><rect x="28.3370%" y="69" width="0.1021%" height="15" fill="rgb(248,227,35)"/><text x="28.5870%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (13 samples, 0.10%)</title><rect x="28.3370%" y="53" width="0.1021%" height="15" fill="rgb(240,68,14)"/><text x="28.5870%" y="63.50"></text></g><g><title>rustc_demangle::legacy::demangle::{{closure}} (13 samples, 0.10%)</title><rect x="28.3370%" y="37" width="0.1021%" height="15" fill="rgb(243,5,47)"/><text x="28.5870%" y="47.50"></text></g><g><title>rustc_demangle::legacy::demangle (15 samples, 0.12%)</title><rect x="28.3370%" y="149" width="0.1178%" height="15" fill="rgb(225,134,14)"/><text x="28.5870%" y="159.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (16 samples, 0.13%)</title><rect x="28.3370%" y="197" width="0.1256%" height="15" fill="rgb(225,207,41)"/><text x="28.5870%" y="207.50"></text></g><g><title>rustc_demangle::try_demangle (16 samples, 0.13%)</title><rect x="28.3370%" y="181" width="0.1256%" height="15" fill="rgb(207,214,21)"/><text x="28.5870%" y="191.50"></text></g><g><title>rustc_demangle::demangle (16 samples, 0.13%)</title><rect x="28.3370%" y="165" width="0.1256%" height="15" fill="rgb(230,100,48)"/><text x="28.5870%" y="175.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (23 samples, 0.18%)</title><rect x="28.6354%" y="101" width="0.1806%" height="15" fill="rgb(231,155,51)"/><text x="28.8854%" y="111.50"></text></g><g><title>core::str::pattern::Searcher::next_match (23 samples, 0.18%)</title><rect x="28.6354%" y="85" width="0.1806%" height="15" fill="rgb(252,98,23)"/><text x="28.8854%" y="95.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (23 samples, 0.18%)</title><rect x="28.6354%" y="69" width="0.1806%" height="15" fill="rgb(216,151,14)"/><text x="28.8854%" y="79.50"></text></g><g><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.10%)</title><rect x="28.7139%" y="53" width="0.1021%" height="15" fill="rgb(250,20,49)"/><text x="28.9639%" y="63.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (32 samples, 0.25%)</title><rect x="28.5961%" y="117" width="0.2513%" height="15" fill="rgb(217,134,33)"/><text x="28.8461%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (20 samples, 0.16%)</title><rect x="28.8474%" y="117" width="0.1570%" height="15" fill="rgb(205,94,24)"/><text x="29.0974%" y="127.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (16 samples, 0.13%)</title><rect x="28.8788%" y="101" width="0.1256%" height="15" fill="rgb(244,96,26)"/><text x="29.1288%" y="111.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (16 samples, 0.13%)</title><rect x="29.0044%" y="69" width="0.1256%" height="15" fill="rgb(218,48,4)"/><text x="29.2544%" y="79.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (27 samples, 0.21%)</title><rect x="29.0044%" y="101" width="0.2120%" height="15" fill="rgb(210,74,37)"/><text x="29.2544%" y="111.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (27 samples, 0.21%)</title><rect x="29.0044%" y="85" width="0.2120%" height="15" fill="rgb(240,170,7)"/><text x="29.2544%" y="95.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (36 samples, 0.28%)</title><rect x="29.0044%" y="117" width="0.2827%" height="15" fill="rgb(251,120,48)"/><text x="29.2544%" y="127.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.11%)</title><rect x="29.2871%" y="69" width="0.1099%" height="15" fill="rgb(219,149,25)"/><text x="29.5371%" y="79.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (120 samples, 0.94%)</title><rect x="28.4626%" y="181" width="0.9422%" height="15" fill="rgb(223,222,45)"/><text x="28.7126%" y="191.50"></text></g><g><title>core::fmt::write/core::fmt::run (120 samples, 0.94%)</title><rect x="28.4626%" y="165" width="0.9422%" height="15" fill="rgb(216,18,1)"/><text x="28.7126%" y="175.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (120 samples, 0.94%)</title><rect x="28.4626%" y="149" width="0.9422%" height="15" fill="rgb(251,184,12)"/><text x="28.7126%" y="159.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (120 samples, 0.94%)</title><rect x="28.4626%" y="133" width="0.9422%" height="15" fill="rgb(222,116,37)"/><text x="28.7126%" y="143.50"></text></g><g><title>rustc_demangle::legacy::is_rust_hash (15 samples, 0.12%)</title><rect x="29.2871%" y="117" width="0.1178%" height="15" fill="rgb(236,223,24)"/><text x="29.5371%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (15 samples, 0.12%)</title><rect x="29.2871%" y="101" width="0.1178%" height="15" fill="rgb(229,38,32)"/><text x="29.5371%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.12%)</title><rect x="29.2871%" y="85" width="0.1178%" height="15" fill="rgb(251,208,7)"/><text x="29.5371%" y="95.50"></text></g><g><title>tests::puz_2020 (3,763 samples, 29.55%)</title><rect x="0.0000%" y="501" width="29.5462%" height="15" fill="rgb(207,226,43)"/><text x="0.2500%" y="511.50">tests::puz_2020</text></g><g><title>xwords::tests::puz_2020_10_12_works (155 samples, 1.22%)</title><rect x="28.3291%" y="485" width="1.2170%" height="15" fill="rgb(247,229,43)"/><text x="28.5791%" y="495.50"></text></g><g><title>xwords::fill_crossword (155 samples, 1.22%)</title><rect x="28.3291%" y="469" width="1.2170%" height="15" fill="rgb(217,201,52)"/><text x="28.5791%" y="479.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (154 samples, 1.21%)</title><rect x="28.3370%" y="453" width="1.2092%" height="15" fill="rgb(228,68,39)"/><text x="28.5870%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (154 samples, 1.21%)</title><rect x="28.3370%" y="437" width="1.2092%" height="15" fill="rgb(218,138,7)"/><text x="28.5870%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (154 samples, 1.21%)</title><rect x="28.3370%" y="421" width="1.2092%" height="15" fill="rgb(230,78,37)"/><text x="28.5870%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (154 samples, 1.21%)</title><rect x="28.3370%" y="405" width="1.2092%" height="15" fill="rgb(246,177,36)"/><text x="28.5870%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (154 samples, 1.21%)</title><rect x="28.3370%" y="389" width="1.2092%" height="15" fill="rgb(231,190,6)"/><text x="28.5870%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (154 samples, 1.21%)</title><rect x="28.3370%" y="373" width="1.2092%" height="15" fill="rgb(234,217,25)"/><text x="28.5870%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 1.21%)</title><rect x="28.3370%" y="357" width="1.2092%" height="15" fill="rgb(249,131,38)"/><text x="28.5870%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (154 samples, 1.21%)</title><rect x="28.3370%" y="341" width="1.2092%" height="15" fill="rgb(253,168,16)"/><text x="28.5870%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (154 samples, 1.21%)</title><rect x="28.3370%" y="325" width="1.2092%" height="15" fill="rgb(232,181,39)"/><text x="28.5870%" y="335.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph::{{closure}} (154 samples, 1.21%)</title><rect x="28.3370%" y="309" width="1.2092%" height="15" fill="rgb(216,167,0)"/><text x="28.5870%" y="319.50"></text></g><g><title>alloc::fmt::format/core::fmt::Write::write_fmt (154 samples, 1.21%)</title><rect x="28.3370%" y="293" width="1.2092%" height="15" fill="rgb(247,77,10)"/><text x="28.5870%" y="303.50"></text></g><g><title>core::fmt::write (154 samples, 1.21%)</title><rect x="28.3370%" y="277" width="1.2092%" height="15" fill="rgb(220,28,10)"/><text x="28.5870%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (154 samples, 1.21%)</title><rect x="28.3370%" y="261" width="1.2092%" height="15" fill="rgb(251,163,49)"/><text x="28.5870%" y="271.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (154 samples, 1.21%)</title><rect x="28.3370%" y="245" width="1.2092%" height="15" fill="rgb(249,148,50)"/><text x="28.5870%" y="255.50"></text></g><g><title>symbolic_demangle::demangle (154 samples, 1.21%)</title><rect x="28.3370%" y="229" width="1.2092%" height="15" fill="rgb(238,149,36)"/><text x="28.5870%" y="239.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (154 samples, 1.21%)</title><rect x="28.3370%" y="213" width="1.2092%" height="15" fill="rgb(248,191,13)"/><text x="28.5870%" y="223.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (138 samples, 1.08%)</title><rect x="28.4626%" y="197" width="1.0835%" height="15" fill="rgb(233,73,17)"/><text x="28.7126%" y="207.50"></text></g><g><title>rustc_demangle::try_demangle (18 samples, 0.14%)</title><rect x="29.4048%" y="181" width="0.1413%" height="15" fill="rgb(233,197,11)"/><text x="29.6548%" y="191.50"></text></g><g><title>rustc_demangle::demangle (18 samples, 0.14%)</title><rect x="29.4048%" y="165" width="0.1413%" height="15" fill="rgb(245,42,8)"/><text x="29.6548%" y="175.50"></text></g><g><title>rustc_demangle::legacy::demangle (16 samples, 0.13%)</title><rect x="29.4205%" y="149" width="0.1256%" height="15" fill="rgb(217,39,50)"/><text x="29.6705%" y="159.50"></text></g><g><title>&lt;core::str::Bytes as core::iter::traits::iterator::Iterator&gt;::any (16 samples, 0.13%)</title><rect x="29.4205%" y="133" width="0.1256%" height="15" fill="rgb(250,23,13)"/><text x="29.6705%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (16 samples, 0.13%)</title><rect x="29.4205%" y="117" width="0.1256%" height="15" fill="rgb(219,204,45)"/><text x="29.6705%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.13%)</title><rect x="29.4205%" y="101" width="0.1256%" height="15" fill="rgb(248,54,16)"/><text x="29.6705%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.13%)</title><rect x="29.4205%" y="85" width="0.1256%" height="15" fill="rgb(213,16,14)"/><text x="29.6705%" y="95.50"></text></g><g><title>core::iter::adapters::clone_try_fold::{{closure}} (16 samples, 0.13%)</title><rect x="29.4205%" y="69" width="0.1256%" height="15" fill="rgb(245,18,44)"/><text x="29.6705%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (16 samples, 0.13%)</title><rect x="29.4205%" y="53" width="0.1256%" height="15" fill="rgb(232,10,47)"/><text x="29.6705%" y="63.50"></text></g><g><title>rustc_demangle::legacy::demangle::{{closure}} (16 samples, 0.13%)</title><rect x="29.4205%" y="37" width="0.1256%" height="15" fill="rgb(237,185,33)"/><text x="29.6705%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (18 samples, 0.14%)</title><rect x="38.3244%" y="37" width="0.1413%" height="15" fill="rgb(224,223,44)"/><text x="38.5744%" y="47.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (67 samples, 0.53%)</title><rect x="38.1988%" y="69" width="0.5261%" height="15" fill="rgb(238,98,11)"/><text x="38.4488%" y="79.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (67 samples, 0.53%)</title><rect x="38.1988%" y="53" width="0.5261%" height="15" fill="rgb(217,33,34)"/><text x="38.4488%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 0.57%)</title><rect x="38.1988%" y="261" width="0.5732%" height="15" fill="rgb(232,193,38)"/><text x="38.4488%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (73 samples, 0.57%)</title><rect x="38.1988%" y="245" width="0.5732%" height="15" fill="rgb(231,23,4)"/><text x="38.4488%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (73 samples, 0.57%)</title><rect x="38.1988%" y="229" width="0.5732%" height="15" fill="rgb(218,154,4)"/><text x="38.4488%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (73 samples, 0.57%)</title><rect x="38.1988%" y="213" width="0.5732%" height="15" fill="rgb(243,171,32)"/><text x="38.4488%" y="223.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (73 samples, 0.57%)</title><rect x="38.1988%" y="197" width="0.5732%" height="15" fill="rgb(210,102,6)"/><text x="38.4488%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (73 samples, 0.57%)</title><rect x="38.1988%" y="181" width="0.5732%" height="15" fill="rgb(205,134,8)"/><text x="38.4488%" y="191.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (73 samples, 0.57%)</title><rect x="38.1988%" y="165" width="0.5732%" height="15" fill="rgb(240,115,17)"/><text x="38.4488%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (73 samples, 0.57%)</title><rect x="38.1988%" y="149" width="0.5732%" height="15" fill="rgb(213,62,14)"/><text x="38.4488%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (73 samples, 0.57%)</title><rect x="38.1988%" y="133" width="0.5732%" height="15" fill="rgb(249,149,16)"/><text x="38.4488%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (73 samples, 0.57%)</title><rect x="38.1988%" y="117" width="0.5732%" height="15" fill="rgb(220,195,22)"/><text x="38.4488%" y="127.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.57%)</title><rect x="38.1988%" y="101" width="0.5732%" height="15" fill="rgb(211,106,49)"/><text x="38.4488%" y="111.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (73 samples, 0.57%)</title><rect x="38.1988%" y="85" width="0.5732%" height="15" fill="rgb(214,176,52)"/><text x="38.4488%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (75 samples, 0.59%)</title><rect x="38.1988%" y="309" width="0.5889%" height="15" fill="rgb(212,121,30)"/><text x="38.4488%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (75 samples, 0.59%)</title><rect x="38.1988%" y="293" width="0.5889%" height="15" fill="rgb(231,167,39)"/><text x="38.4488%" y="303.50"></text></g><g><title>core::iter::traits::iterator::fold1 (75 samples, 0.59%)</title><rect x="38.1988%" y="277" width="0.5889%" height="15" fill="rgb(233,93,22)"/><text x="38.4488%" y="287.50"></text></g><g><title>xwords::find_fills (52 samples, 0.41%)</title><rect x="38.7955%" y="309" width="0.4083%" height="15" fill="rgb(242,187,26)"/><text x="39.0455%" y="319.50"></text></g><g><title>xwords::trie::Trie::words (52 samples, 0.41%)</title><rect x="38.7955%" y="293" width="0.4083%" height="15" fill="rgb(209,152,0)"/><text x="39.0455%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::words (52 samples, 0.41%)</title><rect x="38.7955%" y="277" width="0.4083%" height="15" fill="rgb(208,174,22)"/><text x="39.0455%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::words (51 samples, 0.40%)</title><rect x="38.8034%" y="261" width="0.4004%" height="15" fill="rgb(216,172,41)"/><text x="39.0534%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::words (51 samples, 0.40%)</title><rect x="38.8034%" y="245" width="0.4004%" height="15" fill="rgb(238,206,48)"/><text x="39.0534%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::words (51 samples, 0.40%)</title><rect x="38.8034%" y="229" width="0.4004%" height="15" fill="rgb(229,70,36)"/><text x="39.0534%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::words (51 samples, 0.40%)</title><rect x="38.8034%" y="213" width="0.4004%" height="15" fill="rgb(230,152,25)"/><text x="39.0534%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::words (47 samples, 0.37%)</title><rect x="38.8348%" y="197" width="0.3690%" height="15" fill="rgb(243,173,54)"/><text x="39.0848%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::words (38 samples, 0.30%)</title><rect x="38.9055%" y="181" width="0.2984%" height="15" fill="rgb(252,104,23)"/><text x="39.1555%" y="191.50"></text></g><g><title>xwords::trie::TrieNode::words (25 samples, 0.20%)</title><rect x="39.0075%" y="165" width="0.1963%" height="15" fill="rgb(224,24,50)"/><text x="39.2575%" y="175.50"></text></g><g><title>xwords::trie::TrieNode::words (18 samples, 0.14%)</title><rect x="39.0625%" y="149" width="0.1413%" height="15" fill="rgb(212,13,43)"/><text x="39.3125%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.10%)</title><rect x="39.3609%" y="101" width="0.1021%" height="15" fill="rgb(243,34,26)"/><text x="39.6109%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.13%)</title><rect x="39.3609%" y="149" width="0.1256%" height="15" fill="rgb(239,209,5)"/><text x="39.6109%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.13%)</title><rect x="39.3609%" y="133" width="0.1256%" height="15" fill="rgb(239,212,43)"/><text x="39.6109%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (16 samples, 0.13%)</title><rect x="39.3609%" y="117" width="0.1256%" height="15" fill="rgb(228,72,25)"/><text x="39.6109%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (174 samples, 1.37%)</title><rect x="38.1988%" y="485" width="1.3662%" height="15" fill="rgb(205,82,49)"/><text x="38.4488%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (174 samples, 1.37%)</title><rect x="38.1988%" y="469" width="1.3662%" height="15" fill="rgb(221,205,24)"/><text x="38.4488%" y="479.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (174 samples, 1.37%)</title><rect x="38.1988%" y="453" width="1.3662%" height="15" fill="rgb(206,213,29)"/><text x="38.4488%" y="463.50"></text></g><g><title>std::panic::catch_unwind (174 samples, 1.37%)</title><rect x="38.1988%" y="437" width="1.3662%" height="15" fill="rgb(228,180,8)"/><text x="38.4488%" y="447.50"></text></g><g><title>std::panicking::try (174 samples, 1.37%)</title><rect x="38.1988%" y="421" width="1.3662%" height="15" fill="rgb(217,131,9)"/><text x="38.4488%" y="431.50"></text></g><g><title>__rust_maybe_catch_panic (174 samples, 1.37%)</title><rect x="38.1988%" y="405" width="1.3662%" height="15" fill="rgb(207,188,14)"/><text x="38.4488%" y="415.50"></text></g><g><title>std::panicking::try::do_call (174 samples, 1.37%)</title><rect x="38.1988%" y="389" width="1.3662%" height="15" fill="rgb(254,82,24)"/><text x="38.4488%" y="399.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (174 samples, 1.37%)</title><rect x="38.1988%" y="373" width="1.3662%" height="15" fill="rgb(209,29,48)"/><text x="38.4488%" y="383.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (174 samples, 1.37%)</title><rect x="38.1988%" y="357" width="1.3662%" height="15" fill="rgb(248,24,3)"/><text x="38.4488%" y="367.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (174 samples, 1.37%)</title><rect x="38.1988%" y="341" width="1.3662%" height="15" fill="rgb(209,134,11)"/><text x="38.4488%" y="351.50"></text></g><g><title>xwords::fill_crossword::{{closure}} (174 samples, 1.37%)</title><rect x="38.1988%" y="325" width="1.3662%" height="15" fill="rgb(253,54,47)"/><text x="38.4488%" y="335.50"></text></g><g><title>xwords::is_viable (46 samples, 0.36%)</title><rect x="39.2038%" y="309" width="0.3612%" height="15" fill="rgb(214,163,42)"/><text x="39.4538%" y="319.50"></text></g><g><title>xwords::trie::Trie::is_word (39 samples, 0.31%)</title><rect x="39.2588%" y="293" width="0.3062%" height="15" fill="rgb(206,25,12)"/><text x="39.5088%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::is_word (39 samples, 0.31%)</title><rect x="39.2588%" y="277" width="0.3062%" height="15" fill="rgb(240,49,44)"/><text x="39.5088%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::is_word (39 samples, 0.31%)</title><rect x="39.2588%" y="261" width="0.3062%" height="15" fill="rgb(245,4,38)"/><text x="39.5088%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::is_word (39 samples, 0.31%)</title><rect x="39.2588%" y="245" width="0.3062%" height="15" fill="rgb(215,72,38)"/><text x="39.5088%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::is_word (38 samples, 0.30%)</title><rect x="39.2666%" y="229" width="0.2984%" height="15" fill="rgb(215,123,24)"/><text x="39.5166%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::is_word (38 samples, 0.30%)</title><rect x="39.2666%" y="213" width="0.2984%" height="15" fill="rgb(242,140,44)"/><text x="39.5166%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::is_word (37 samples, 0.29%)</title><rect x="39.2745%" y="197" width="0.2905%" height="15" fill="rgb(243,36,26)"/><text x="39.5245%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::is_word (32 samples, 0.25%)</title><rect x="39.3138%" y="181" width="0.2513%" height="15" fill="rgb(207,91,21)"/><text x="39.5638%" y="191.50"></text></g><g><title>xwords::trie::TrieNode::is_word (26 samples, 0.20%)</title><rect x="39.3609%" y="165" width="0.2041%" height="15" fill="rgb(253,111,50)"/><text x="39.6109%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (17 samples, 0.13%)</title><rect x="40.1068%" y="149" width="0.1335%" height="15" fill="rgb(228,163,27)"/><text x="40.3568%" y="159.50"></text></g><g><title>core::cmp::max_by (15 samples, 0.12%)</title><rect x="40.1225%" y="133" width="0.1178%" height="15" fill="rgb(205,182,13)"/><text x="40.3725%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (15 samples, 0.12%)</title><rect x="40.3109%" y="85" width="0.1178%" height="15" fill="rgb(247,194,0)"/><text x="40.5609%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.15%)</title><rect x="40.2952%" y="101" width="0.1492%" height="15" fill="rgb(241,58,47)"/><text x="40.5452%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (20 samples, 0.16%)</title><rect x="40.2952%" y="117" width="0.1570%" height="15" fill="rgb(219,25,53)"/><text x="40.5452%" y="127.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.28%)</title><rect x="40.7820%" y="69" width="0.2827%" height="15" fill="rgb(210,11,24)"/><text x="41.0320%" y="79.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (30 samples, 0.24%)</title><rect x="40.8291%" y="53" width="0.2356%" height="15" fill="rgb(247,114,30)"/><text x="41.0791%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (17 samples, 0.13%)</title><rect x="41.0647%" y="69" width="0.1335%" height="15" fill="rgb(213,74,28)"/><text x="41.3147%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (87 samples, 0.68%)</title><rect x="40.5308%" y="85" width="0.6831%" height="15" fill="rgb(208,210,48)"/><text x="40.7808%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (97 samples, 0.76%)</title><rect x="40.4758%" y="117" width="0.7616%" height="15" fill="rgb(218,46,19)"/><text x="40.7258%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (95 samples, 0.75%)</title><rect x="40.4915%" y="101" width="0.7459%" height="15" fill="rgb(242,194,21)"/><text x="40.7415%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (203 samples, 1.59%)</title><rect x="39.7535%" y="229" width="1.5939%" height="15" fill="rgb(229,72,4)"/><text x="40.0035%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (203 samples, 1.59%)</title><rect x="39.7535%" y="213" width="1.5939%" height="15" fill="rgb(231,58,6)"/><text x="40.0035%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (199 samples, 1.56%)</title><rect x="39.7849%" y="197" width="1.5625%" height="15" fill="rgb(252,78,15)"/><text x="40.0349%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (165 samples, 1.30%)</title><rect x="40.0518%" y="181" width="1.2955%" height="15" fill="rgb(246,64,50)"/><text x="40.3018%" y="191.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (161 samples, 1.26%)</title><rect x="40.0832%" y="165" width="1.2641%" height="15" fill="rgb(217,41,24)"/><text x="40.3332%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (141 samples, 1.11%)</title><rect x="40.2403%" y="149" width="1.1071%" height="15" fill="rgb(246,48,46)"/><text x="40.4903%" y="159.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (138 samples, 1.08%)</title><rect x="40.2638%" y="133" width="1.0835%" height="15" fill="rgb(210,188,31)"/><text x="40.5138%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::matches (13 samples, 0.10%)</title><rect x="41.2453%" y="117" width="0.1021%" height="15" fill="rgb(211,152,13)"/><text x="41.4953%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (217 samples, 1.70%)</title><rect x="39.7456%" y="277" width="1.7038%" height="15" fill="rgb(225,3,9)"/><text x="39.9956%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (216 samples, 1.70%)</title><rect x="39.7535%" y="261" width="1.6960%" height="15" fill="rgb(209,228,2)"/><text x="40.0035%" y="271.50"></text></g><g><title>core::iter::traits::iterator::fold1 (216 samples, 1.70%)</title><rect x="39.7535%" y="245" width="1.6960%" height="15" fill="rgb(238,228,1)"/><text x="40.0035%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.14%)</title><rect x="41.5358%" y="149" width="0.1413%" height="15" fill="rgb(211,198,35)"/><text x="41.7858%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.20%)</title><rect x="41.5201%" y="181" width="0.1963%" height="15" fill="rgb(248,76,52)"/><text x="41.7701%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (23 samples, 0.18%)</title><rect x="41.5358%" y="165" width="0.1806%" height="15" fill="rgb(227,204,49)"/><text x="41.7858%" y="175.50"></text></g><g><title>_free (15 samples, 0.12%)</title><rect x="41.8420%" y="101" width="0.1178%" height="15" fill="rgb(254,148,46)"/><text x="42.0920%" y="111.50"></text></g><g><title>_free_tiny (41 samples, 0.32%)</title><rect x="41.9598%" y="101" width="0.3219%" height="15" fill="rgb(252,97,43)"/><text x="42.2098%" y="111.50"></text></g><g><title>_tiny_free_no_lock (30 samples, 0.24%)</title><rect x="42.0462%" y="85" width="0.2356%" height="15" fill="rgb(212,80,12)"/><text x="42.2962%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.48%)</title><rect x="41.8106%" y="117" width="0.4790%" height="15" fill="rgb(254,99,49)"/><text x="42.0606%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (67 samples, 0.53%)</title><rect x="41.7792%" y="133" width="0.5261%" height="15" fill="rgb(206,194,15)"/><text x="42.0292%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 1.02%)</title><rect x="41.4730%" y="261" width="1.0207%" height="15" fill="rgb(226,19,53)"/><text x="41.7230%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (129 samples, 1.01%)</title><rect x="41.4808%" y="245" width="1.0129%" height="15" fill="rgb(246,39,21)"/><text x="41.7308%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (128 samples, 1.01%)</title><rect x="41.4887%" y="229" width="1.0050%" height="15" fill="rgb(208,4,51)"/><text x="41.7387%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (128 samples, 1.01%)</title><rect x="41.4887%" y="213" width="1.0050%" height="15" fill="rgb(205,70,9)"/><text x="41.7387%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (127 samples, 1.00%)</title><rect x="41.4965%" y="197" width="0.9972%" height="15" fill="rgb(238,107,40)"/><text x="41.7465%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (99 samples, 0.78%)</title><rect x="41.7164%" y="181" width="0.7773%" height="15" fill="rgb(251,94,20)"/><text x="41.9664%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.76%)</title><rect x="41.7321%" y="165" width="0.7616%" height="15" fill="rgb(238,124,23)"/><text x="41.9821%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (97 samples, 0.76%)</title><rect x="41.7321%" y="149" width="0.7616%" height="15" fill="rgb(236,18,23)"/><text x="41.9821%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (138 samples, 1.08%)</title><rect x="41.4651%" y="277" width="1.0835%" height="15" fill="rgb(236,56,32)"/><text x="41.7151%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (18 samples, 0.14%)</title><rect x="42.7999%" y="69" width="0.1413%" height="15" fill="rgb(244,115,51)"/><text x="43.0499%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.19%)</title><rect x="42.7999%" y="85" width="0.1884%" height="15" fill="rgb(228,170,36)"/><text x="43.0499%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (29 samples, 0.23%)</title><rect x="42.7685%" y="149" width="0.2277%" height="15" fill="rgb(205,135,5)"/><text x="43.0185%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (29 samples, 0.23%)</title><rect x="42.7685%" y="133" width="0.2277%" height="15" fill="rgb(244,153,21)"/><text x="43.0185%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.23%)</title><rect x="42.7685%" y="117" width="0.2277%" height="15" fill="rgb(241,51,45)"/><text x="43.0185%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 0.23%)</title><rect x="42.7685%" y="101" width="0.2277%" height="15" fill="rgb(235,30,2)"/><text x="43.0185%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.29%)</title><rect x="42.7214%" y="181" width="0.2905%" height="15" fill="rgb(230,138,17)"/><text x="42.9714%" y="191.50"></text></g><g><title>&lt;xwords::Crossword as core::hash::Hash&gt;::hash (31 samples, 0.24%)</title><rect x="42.7685%" y="165" width="0.2434%" height="15" fill="rgb(225,227,46)"/><text x="43.0185%" y="175.50"></text></g><g><title>xwords::CrosswordFillState::add_candidate (45 samples, 0.35%)</title><rect x="42.6900%" y="277" width="0.3533%" height="15" fill="rgb(242,120,29)"/><text x="42.9400%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (41 samples, 0.32%)</title><rect x="42.7214%" y="261" width="0.3219%" height="15" fill="rgb(214,204,1)"/><text x="42.9714%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (41 samples, 0.32%)</title><rect x="42.7214%" y="245" width="0.3219%" height="15" fill="rgb(239,202,12)"/><text x="42.9714%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (41 samples, 0.32%)</title><rect x="42.7214%" y="229" width="0.3219%" height="15" fill="rgb(221,101,34)"/><text x="42.9714%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (41 samples, 0.32%)</title><rect x="42.7214%" y="213" width="0.3219%" height="15" fill="rgb(215,109,50)"/><text x="42.9714%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (41 samples, 0.32%)</title><rect x="42.7214%" y="197" width="0.3219%" height="15" fill="rgb(229,199,13)"/><text x="42.9714%" y="207.50"></text></g><g><title>xwords::fill_one_word (25 samples, 0.20%)</title><rect x="43.0433%" y="277" width="0.1963%" height="15" fill="rgb(253,82,26)"/><text x="43.2933%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.11%)</title><rect x="43.9070%" y="197" width="0.1099%" height="15" fill="rgb(205,57,20)"/><text x="44.1570%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone/&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone/alloc::slice::&lt;impl [T]&gt;::to_vec/alloc::slice::hack::to_vec/alloc::vec::Vec&lt;T&gt;::with_capacity/alloc::raw_vec::RawVec&lt;T&gt;::with_capacity/alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in/&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc/alloc::alloc::alloc (20 samples, 0.16%)</title><rect x="44.3075%" y="181" width="0.1570%" height="15" fill="rgb(207,57,32)"/><text x="44.5575%" y="191.50"></text></g><g><title>_malloc (19 samples, 0.15%)</title><rect x="44.3153%" y="165" width="0.1492%" height="15" fill="rgb(235,173,42)"/><text x="44.5653%" y="175.50"></text></g><g><title>_malloc_zone_malloc (19 samples, 0.15%)</title><rect x="44.3153%" y="149" width="0.1492%" height="15" fill="rgb(230,147,10)"/><text x="44.5653%" y="159.50"></text></g><g><title>_szone_malloc_should_clear (17 samples, 0.13%)</title><rect x="44.3310%" y="133" width="0.1335%" height="15" fill="rgb(220,135,16)"/><text x="44.5810%" y="143.50"></text></g><g><title>_tiny_malloc_should_clear (16 samples, 0.13%)</title><rect x="44.3389%" y="117" width="0.1256%" height="15" fill="rgb(239,28,10)"/><text x="44.5889%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.14%)</title><rect x="44.6137%" y="101" width="0.1413%" height="15" fill="rgb(220,197,38)"/><text x="44.8637%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (20 samples, 0.16%)</title><rect x="44.6058%" y="117" width="0.1570%" height="15" fill="rgb(217,13,1)"/><text x="44.8558%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (24 samples, 0.19%)</title><rect x="44.6058%" y="133" width="0.1884%" height="15" fill="rgb(225,34,30)"/><text x="44.8558%" y="143.50"></text></g><g><title>alloc::slice::hack::to_vec (33 samples, 0.26%)</title><rect x="44.6058%" y="149" width="0.2591%" height="15" fill="rgb(234,19,10)"/><text x="44.8558%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.27%)</title><rect x="44.5980%" y="165" width="0.2748%" height="15" fill="rgb(237,68,47)"/><text x="44.8480%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.35%)</title><rect x="44.5273%" y="181" width="0.3533%" height="15" fill="rgb(210,125,44)"/><text x="44.7773%" y="191.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.10%)</title><rect x="44.8964%" y="133" width="0.1021%" height="15" fill="rgb(206,207,2)"/><text x="45.1464%" y="143.50"></text></g><g><title>alloc::vec::IntoIter&lt;T&gt;::as_slice (15 samples, 0.12%)</title><rect x="44.8964%" y="149" width="0.1178%" height="15" fill="rgb(207,198,43)"/><text x="45.1464%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,alloc::vec::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (37 samples, 0.29%)</title><rect x="44.8885%" y="165" width="0.2905%" height="15" fill="rgb(249,58,35)"/><text x="45.1385%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.12%)</title><rect x="45.1790%" y="165" width="0.1178%" height="15" fill="rgb(236,66,11)"/><text x="45.4290%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (55 samples, 0.43%)</title><rect x="44.8807%" y="181" width="0.4318%" height="15" fill="rgb(215,104,28)"/><text x="45.1307%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.13%)</title><rect x="45.3125%" y="181" width="0.1256%" height="15" fill="rgb(221,172,14)"/><text x="45.5625%" y="191.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (14 samples, 0.11%)</title><rect x="45.4774%" y="181" width="0.1099%" height="15" fill="rgb(251,215,21)"/><text x="45.7274%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.10%)</title><rect x="45.4852%" y="165" width="0.1021%" height="15" fill="rgb(215,154,36)"/><text x="45.7352%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (26 samples, 0.20%)</title><rect x="45.6030%" y="117" width="0.2041%" height="15" fill="rgb(245,85,25)"/><text x="45.8530%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (27 samples, 0.21%)</title><rect x="45.6030%" y="165" width="0.2120%" height="15" fill="rgb(254,37,10)"/><text x="45.8530%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (27 samples, 0.21%)</title><rect x="45.6030%" y="149" width="0.2120%" height="15" fill="rgb(248,63,2)"/><text x="45.8530%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.21%)</title><rect x="45.6030%" y="133" width="0.2120%" height="15" fill="rgb(222,195,50)"/><text x="45.8530%" y="143.50"></text></g><g><title>alloc::string::String::push (29 samples, 0.23%)</title><rect x="45.5952%" y="181" width="0.2277%" height="15" fill="rgb(218,157,4)"/><text x="45.8452%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (14 samples, 0.11%)</title><rect x="45.9956%" y="101" width="0.1099%" height="15" fill="rgb(217,186,23)"/><text x="46.2456%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (38 samples, 0.30%)</title><rect x="45.8464%" y="181" width="0.2984%" height="15" fill="rgb(211,100,12)"/><text x="46.0964%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.20%)</title><rect x="45.9406%" y="165" width="0.2041%" height="15" fill="rgb(252,7,25)"/><text x="46.1906%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (22 samples, 0.17%)</title><rect x="45.9720%" y="149" width="0.1727%" height="15" fill="rgb(219,6,30)"/><text x="46.2220%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.17%)</title><rect x="45.9720%" y="133" width="0.1727%" height="15" fill="rgb(228,68,4)"/><text x="46.2220%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (21 samples, 0.16%)</title><rect x="45.9799%" y="117" width="0.1649%" height="15" fill="rgb(238,104,53)"/><text x="46.2299%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::index (19 samples, 0.15%)</title><rect x="46.3332%" y="165" width="0.1492%" height="15" fill="rgb(209,110,10)"/><text x="46.5832%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (17 samples, 0.13%)</title><rect x="46.3489%" y="149" width="0.1335%" height="15" fill="rgb(214,190,40)"/><text x="46.5989%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (15 samples, 0.12%)</title><rect x="46.3646%" y="133" width="0.1178%" height="15" fill="rgb(222,103,43)"/><text x="46.6146%" y="143.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::into_raw (13 samples, 0.10%)</title><rect x="46.5845%" y="133" width="0.1021%" height="15" fill="rgb(247,105,41)"/><text x="46.8345%" y="143.50"></text></g><g><title>alloc::slice::hack::into_vec (19 samples, 0.15%)</title><rect x="46.5845%" y="149" width="0.1492%" height="15" fill="rgb(249,173,41)"/><text x="46.8345%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (20 samples, 0.16%)</title><rect x="46.5845%" y="165" width="0.1570%" height="15" fill="rgb(229,171,54)"/><text x="46.8345%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 0.15%)</title><rect x="46.7572%" y="85" width="0.1492%" height="15" fill="rgb(223,229,10)"/><text x="47.0072%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (23 samples, 0.18%)</title><rect x="46.7494%" y="101" width="0.1806%" height="15" fill="rgb(243,218,44)"/><text x="46.9994%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.14%)</title><rect x="46.9300%" y="101" width="0.1413%" height="15" fill="rgb(215,188,5)"/><text x="47.1800%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (18 samples, 0.14%)</title><rect x="46.9300%" y="85" width="0.1413%" height="15" fill="rgb(239,133,39)"/><text x="47.1800%" y="95.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (42 samples, 0.33%)</title><rect x="46.7494%" y="165" width="0.3298%" height="15" fill="rgb(229,215,45)"/><text x="46.9994%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (42 samples, 0.33%)</title><rect x="46.7494%" y="149" width="0.3298%" height="15" fill="rgb(237,222,4)"/><text x="46.9994%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (42 samples, 0.33%)</title><rect x="46.7494%" y="133" width="0.3298%" height="15" fill="rgb(219,191,34)"/><text x="46.9994%" y="143.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 0.33%)</title><rect x="46.7494%" y="117" width="0.3298%" height="15" fill="rgb(236,20,29)"/><text x="46.9994%" y="127.50"></text></g><g><title>core::alloc::Layout::array (27 samples, 0.21%)</title><rect x="47.4403%" y="85" width="0.2120%" height="15" fill="rgb(206,19,36)"/><text x="47.6903%" y="95.50"></text></g><g><title>core::alloc::Layout::repeat (25 samples, 0.20%)</title><rect x="47.4560%" y="69" width="0.1963%" height="15" fill="rgb(234,192,51)"/><text x="47.7060%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (67 samples, 0.53%)</title><rect x="47.1812%" y="101" width="0.5261%" height="15" fill="rgb(243,23,26)"/><text x="47.4312%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (69 samples, 0.54%)</title><rect x="47.1734%" y="133" width="0.5418%" height="15" fill="rgb(253,92,16)"/><text x="47.4234%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (68 samples, 0.53%)</title><rect x="47.1812%" y="117" width="0.5339%" height="15" fill="rgb(218,82,11)"/><text x="47.4312%" y="127.50"></text></g><g><title>alloc::string::String::push (77 samples, 0.60%)</title><rect x="47.1263%" y="165" width="0.6046%" height="15" fill="rgb(214,207,16)"/><text x="47.3763%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (76 samples, 0.60%)</title><rect x="47.1341%" y="149" width="0.5967%" height="15" fill="rgb(207,202,38)"/><text x="47.3841%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.13%)</title><rect x="47.7308%" y="165" width="0.1335%" height="15" fill="rgb(216,51,45)"/><text x="47.9808%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.14%)</title><rect x="47.9271%" y="101" width="0.1413%" height="15" fill="rgb(233,185,52)"/><text x="48.1771%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (26 samples, 0.20%)</title><rect x="47.9036%" y="117" width="0.2041%" height="15" fill="rgb(217,21,41)"/><text x="48.1536%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.23%)</title><rect x="47.8957%" y="133" width="0.2277%" height="15" fill="rgb(251,137,39)"/><text x="48.1457%" y="143.50"></text></g><g><title>_free_tiny (23 samples, 0.18%)</title><rect x="48.3433%" y="53" width="0.1806%" height="15" fill="rgb(241,93,18)"/><text x="48.5933%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (45 samples, 0.35%)</title><rect x="48.2098%" y="85" width="0.3533%" height="15" fill="rgb(212,224,28)"/><text x="48.4598%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.33%)</title><rect x="48.2334%" y="69" width="0.3298%" height="15" fill="rgb(221,151,41)"/><text x="48.4834%" y="79.50"></text></g><g><title>core::ptr::drop_in_place (104 samples, 0.82%)</title><rect x="47.8643%" y="165" width="0.8166%" height="15" fill="rgb(248,215,5)"/><text x="48.1143%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (101 samples, 0.79%)</title><rect x="47.8879%" y="149" width="0.7930%" height="15" fill="rgb(207,34,23)"/><text x="48.1379%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (71 samples, 0.56%)</title><rect x="48.1234%" y="133" width="0.5575%" height="15" fill="rgb(235,209,54)"/><text x="48.3734%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.55%)</title><rect x="48.1313%" y="117" width="0.5496%" height="15" fill="rgb(205,12,35)"/><text x="48.3813%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (69 samples, 0.54%)</title><rect x="48.1391%" y="101" width="0.5418%" height="15" fill="rgb(250,83,24)"/><text x="48.3891%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (32 samples, 0.25%)</title><rect x="48.8222%" y="53" width="0.2513%" height="15" fill="rgb(241,127,6)"/><text x="49.0722%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.12%)</title><rect x="48.9557%" y="37" width="0.1178%" height="15" fill="rgb(207,19,46)"/><text x="49.2057%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (46 samples, 0.36%)</title><rect x="48.7280%" y="101" width="0.3612%" height="15" fill="rgb(233,9,54)"/><text x="48.9780%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (46 samples, 0.36%)</title><rect x="48.7280%" y="85" width="0.3612%" height="15" fill="rgb(209,229,48)"/><text x="48.9780%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (44 samples, 0.35%)</title><rect x="48.7437%" y="69" width="0.3455%" height="15" fill="rgb(231,110,47)"/><text x="48.9937%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (67 samples, 0.53%)</title><rect x="48.7280%" y="117" width="0.5261%" height="15" fill="rgb(225,200,45)"/><text x="48.9780%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (127 samples, 1.00%)</title><rect x="48.6809%" y="165" width="0.9972%" height="15" fill="rgb(208,153,32)"/><text x="48.9309%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (125 samples, 0.98%)</title><rect x="48.6966%" y="149" width="0.9815%" height="15" fill="rgb(208,35,2)"/><text x="48.9466%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (124 samples, 0.97%)</title><rect x="48.7045%" y="133" width="0.9736%" height="15" fill="rgb(252,120,50)"/><text x="48.9545%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (54 samples, 0.42%)</title><rect x="49.2541%" y="117" width="0.4240%" height="15" fill="rgb(251,83,29)"/><text x="49.5041%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (17 samples, 0.13%)</title><rect x="49.5446%" y="101" width="0.1335%" height="15" fill="rgb(207,183,43)"/><text x="49.7946%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.13%)</title><rect x="49.5524%" y="85" width="0.1256%" height="15" fill="rgb(230,100,25)"/><text x="49.8024%" y="95.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.15%)</title><rect x="49.9215%" y="117" width="0.1492%" height="15" fill="rgb(231,117,24)"/><text x="50.1715%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (24 samples, 0.19%)</title><rect x="49.8901%" y="149" width="0.1884%" height="15" fill="rgb(222,12,48)"/><text x="50.1401%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.16%)</title><rect x="49.9136%" y="133" width="0.1649%" height="15" fill="rgb(251,18,48)"/><text x="50.1636%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,alloc::vec::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.14%)</title><rect x="50.0864%" y="133" width="0.1413%" height="15" fill="rgb(242,225,24)"/><text x="50.3364%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (25 samples, 0.20%)</title><rect x="50.0785%" y="149" width="0.1963%" height="15" fill="rgb(253,162,42)"/><text x="50.3285%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (22 samples, 0.17%)</title><rect x="50.5810%" y="149" width="0.1727%" height="15" fill="rgb(212,34,6)"/><text x="50.8310%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.13%)</title><rect x="50.6281%" y="133" width="0.1256%" height="15" fill="rgb(237,158,6)"/><text x="50.8781%" y="143.50"></text></g><g><title>alloc::string::String::push (13 samples, 0.10%)</title><rect x="51.0992%" y="133" width="0.1021%" height="15" fill="rgb(219,93,8)"/><text x="51.3492%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.10%)</title><rect x="51.2877%" y="101" width="0.1021%" height="15" fill="rgb(222,112,13)"/><text x="51.5377%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.10%)</title><rect x="51.2877%" y="85" width="0.1021%" height="15" fill="rgb(230,77,36)"/><text x="51.5377%" y="95.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.23%)</title><rect x="51.2327%" y="133" width="0.2277%" height="15" fill="rgb(236,71,34)"/><text x="51.4827%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.20%)</title><rect x="51.2563%" y="117" width="0.2041%" height="15" fill="rgb(211,176,26)"/><text x="51.5063%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.11%)</title><rect x="51.7588%" y="117" width="0.1099%" height="15" fill="rgb(235,184,14)"/><text x="52.0088%" y="127.50"></text></g><g><title>xwords::find_fills (1,138 samples, 8.94%)</title><rect x="43.2396%" y="277" width="8.9353%" height="15" fill="rgb(205,205,54)"/><text x="43.4896%" y="287.50">xwords::find_..</text></g><g><title>xwords::trie::Trie::words (1,125 samples, 8.83%)</title><rect x="43.3417%" y="261" width="8.8332%" height="15" fill="rgb(219,118,46)"/><text x="43.5917%" y="271.50">xwords::trie..</text></g><g><title>xwords::trie::TrieNode::words (1,121 samples, 8.80%)</title><rect x="43.3731%" y="245" width="8.8018%" height="15" fill="rgb(219,187,54)"/><text x="43.6231%" y="255.50">xwords::trie..</text></g><g><title>xwords::trie::TrieNode::words (1,095 samples, 8.60%)</title><rect x="43.5773%" y="229" width="8.5977%" height="15" fill="rgb(228,42,5)"/><text x="43.8273%" y="239.50">xwords::trie..</text></g><g><title>xwords::trie::TrieNode::words (1,058 samples, 8.31%)</title><rect x="43.8678%" y="213" width="8.3072%" height="15" fill="rgb(232,134,35)"/><text x="44.1178%" y="223.50">xwords::trie..</text></g><g><title>xwords::trie::TrieNode::words (1,010 samples, 7.93%)</title><rect x="44.2447%" y="197" width="7.9303%" height="15" fill="rgb(248,57,6)"/><text x="44.4947%" y="207.50">xwords::tri..</text></g><g><title>xwords::trie::TrieNode::words (763 samples, 5.99%)</title><rect x="46.1840%" y="181" width="5.9909%" height="15" fill="rgb(244,78,46)"/><text x="46.4340%" y="191.50">xwords::..</text></g><g><title>xwords::trie::TrieNode::words (310 samples, 2.43%)</title><rect x="49.7409%" y="165" width="2.4340%" height="15" fill="rgb(220,132,41)"/><text x="49.9909%" y="175.50">xw..</text></g><g><title>xwords::trie::TrieNode::words (174 samples, 1.37%)</title><rect x="50.8087%" y="149" width="1.3662%" height="15" fill="rgb(238,14,54)"/><text x="51.0587%" y="159.50"></text></g><g><title>xwords::trie::TrieNode::words (85 samples, 0.67%)</title><rect x="51.5075%" y="133" width="0.6674%" height="15" fill="rgb(206,75,49)"/><text x="51.7575%" y="143.50"></text></g><g><title>xwords::trie::TrieNode::words (36 samples, 0.28%)</title><rect x="51.8923%" y="117" width="0.2827%" height="15" fill="rgb(234,70,47)"/><text x="52.1423%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (15 samples, 0.12%)</title><rect x="52.4497%" y="229" width="0.1178%" height="15" fill="rgb(225,66,18)"/><text x="52.6997%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.19%)</title><rect x="52.4262%" y="245" width="0.1884%" height="15" fill="rgb(242,56,6)"/><text x="52.6762%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (33 samples, 0.26%)</title><rect x="52.3869%" y="261" width="0.2591%" height="15" fill="rgb(221,184,32)"/><text x="52.6369%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.16%)</title><rect x="53.0857%" y="181" width="0.1570%" height="15" fill="rgb(209,16,24)"/><text x="53.3357%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (27 samples, 0.21%)</title><rect x="53.0779%" y="197" width="0.2120%" height="15" fill="rgb(215,7,25)"/><text x="53.3279%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.27%)</title><rect x="53.0308%" y="213" width="0.2670%" height="15" fill="rgb(218,149,6)"/><text x="53.2808%" y="223.50"></text></g><g><title>_free (24 samples, 0.19%)</title><rect x="53.4626%" y="133" width="0.1884%" height="15" fill="rgb(251,164,43)"/><text x="53.7126%" y="143.50"></text></g><g><title>_szone_size (15 samples, 0.12%)</title><rect x="53.5333%" y="117" width="0.1178%" height="15" fill="rgb(205,140,26)"/><text x="53.7833%" y="127.50"></text></g><g><title>_tiny_size (15 samples, 0.12%)</title><rect x="53.5333%" y="101" width="0.1178%" height="15" fill="rgb(246,4,17)"/><text x="53.7833%" y="111.50"></text></g><g><title>_free_tiny (53 samples, 0.42%)</title><rect x="53.6511%" y="133" width="0.4161%" height="15" fill="rgb(241,107,34)"/><text x="53.9011%" y="143.50"></text></g><g><title>_tiny_free_no_lock (31 samples, 0.24%)</title><rect x="53.8238%" y="117" width="0.2434%" height="15" fill="rgb(217,221,1)"/><text x="54.0738%" y="127.50"></text></g><g><title>_tiny_free_list_add_ptr (13 samples, 0.10%)</title><rect x="53.9651%" y="101" width="0.1021%" height="15" fill="rgb(229,28,23)"/><text x="54.2151%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.68%)</title><rect x="53.4312%" y="149" width="0.6831%" height="15" fill="rgb(225,217,45)"/><text x="53.6812%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (97 samples, 0.76%)</title><rect x="53.3606%" y="165" width="0.7616%" height="15" fill="rgb(246,170,39)"/><text x="53.6106%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.95%)</title><rect x="53.3056%" y="197" width="0.9501%" height="15" fill="rgb(205,183,44)"/><text x="53.5556%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (114 samples, 0.90%)</title><rect x="53.3606%" y="181" width="0.8951%" height="15" fill="rgb(206,200,29)"/><text x="53.6106%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.21%)</title><rect x="54.2635%" y="197" width="0.2120%" height="15" fill="rgb(245,56,1)"/><text x="54.5135%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (196 samples, 1.54%)</title><rect x="52.9444%" y="261" width="1.5389%" height="15" fill="rgb(253,122,1)"/><text x="53.1944%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (188 samples, 1.48%)</title><rect x="53.0072%" y="245" width="1.4761%" height="15" fill="rgb(219,155,50)"/><text x="53.2572%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (188 samples, 1.48%)</title><rect x="53.0072%" y="229" width="1.4761%" height="15" fill="rgb(226,14,49)"/><text x="53.2572%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (150 samples, 1.18%)</title><rect x="53.3056%" y="213" width="1.1778%" height="15" fill="rgb(216,109,54)"/><text x="53.5556%" y="223.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (13 samples, 0.10%)</title><rect x="54.5697%" y="229" width="0.1021%" height="15" fill="rgb(209,180,14)"/><text x="54.8197%" y="239.50"></text></g><g><title>core::cmp::max (15 samples, 0.12%)</title><rect x="55.4648%" y="197" width="0.1178%" height="15" fill="rgb(245,113,8)"/><text x="55.7148%" y="207.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (16 samples, 0.13%)</title><rect x="55.6140%" y="181" width="0.1256%" height="15" fill="rgb(246,126,24)"/><text x="55.8640%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (46 samples, 0.36%)</title><rect x="55.5905%" y="197" width="0.3612%" height="15" fill="rgb(220,77,11)"/><text x="55.8405%" y="207.50"></text></g><g><title>core::mem::swap (24 samples, 0.19%)</title><rect x="55.7632%" y="181" width="0.1884%" height="15" fill="rgb(229,44,8)"/><text x="56.0132%" y="191.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (22 samples, 0.17%)</title><rect x="55.7789%" y="165" width="0.1727%" height="15" fill="rgb(211,151,33)"/><text x="56.0289%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (20 samples, 0.16%)</title><rect x="56.1793%" y="149" width="0.1570%" height="15" fill="rgb(223,50,37)"/><text x="56.4293%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (18 samples, 0.14%)</title><rect x="56.1950%" y="133" width="0.1413%" height="15" fill="rgb(207,138,32)"/><text x="56.4450%" y="143.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (30 samples, 0.24%)</title><rect x="56.1322%" y="165" width="0.2356%" height="15" fill="rgb(241,19,54)"/><text x="56.3822%" y="175.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (49 samples, 0.38%)</title><rect x="56.0223%" y="181" width="0.3847%" height="15" fill="rgb(254,74,52)"/><text x="56.2723%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (55 samples, 0.43%)</title><rect x="55.9830%" y="197" width="0.4318%" height="15" fill="rgb(235,134,9)"/><text x="56.2330%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (262 samples, 2.06%)</title><rect x="54.4834%" y="261" width="2.0572%" height="15" fill="rgb(246,190,27)"/><text x="54.7334%" y="271.50">c..</text></g><g><title>core::str::pattern::Pattern::is_contained_in (255 samples, 2.00%)</title><rect x="54.5383%" y="245" width="2.0022%" height="15" fill="rgb(210,159,52)"/><text x="54.7883%" y="255.50">c..</text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (238 samples, 1.87%)</title><rect x="54.6718%" y="229" width="1.8687%" height="15" fill="rgb(213,153,4)"/><text x="54.9218%" y="239.50">&lt;..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (220 samples, 1.73%)</title><rect x="54.8131%" y="213" width="1.7274%" height="15" fill="rgb(222,217,31)"/><text x="55.0631%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.12%)</title><rect x="56.5955%" y="133" width="0.1178%" height="15" fill="rgb(219,121,28)"/><text x="56.8455%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.11%)</title><rect x="56.6033%" y="117" width="0.1099%" height="15" fill="rgb(242,229,44)"/><text x="56.8533%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.11%)</title><rect x="56.6033%" y="101" width="0.1099%" height="15" fill="rgb(205,18,44)"/><text x="56.8533%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (21 samples, 0.16%)</title><rect x="56.5955%" y="149" width="0.1649%" height="15" fill="rgb(240,84,34)"/><text x="56.8455%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (25 samples, 0.20%)</title><rect x="56.5719%" y="165" width="0.1963%" height="15" fill="rgb(208,23,25)"/><text x="56.8219%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (20 samples, 0.16%)</title><rect x="56.7682%" y="165" width="0.1570%" height="15" fill="rgb(239,65,6)"/><text x="57.0182%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (20 samples, 0.16%)</title><rect x="56.7682%" y="149" width="0.1570%" height="15" fill="rgb(222,86,0)"/><text x="57.0182%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.15%)</title><rect x="56.7761%" y="133" width="0.1492%" height="15" fill="rgb(233,72,40)"/><text x="57.0261%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (50 samples, 0.39%)</title><rect x="56.5719%" y="181" width="0.3926%" height="15" fill="rgb(218,153,22)"/><text x="56.8219%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.14%)</title><rect x="57.1844%" y="165" width="0.1413%" height="15" fill="rgb(216,227,21)"/><text x="57.4344%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (58 samples, 0.46%)</title><rect x="56.9645%" y="181" width="0.4554%" height="15" fill="rgb(206,30,3)"/><text x="57.2145%" y="191.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (115 samples, 0.90%)</title><rect x="56.5484%" y="261" width="0.9030%" height="15" fill="rgb(235,47,48)"/><text x="56.7984%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (114 samples, 0.90%)</title><rect x="56.5562%" y="245" width="0.8951%" height="15" fill="rgb(249,101,39)"/><text x="56.8062%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (114 samples, 0.90%)</title><rect x="56.5562%" y="229" width="0.8951%" height="15" fill="rgb(219,68,12)"/><text x="56.8062%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (113 samples, 0.89%)</title><rect x="56.5641%" y="213" width="0.8872%" height="15" fill="rgb(235,71,54)"/><text x="56.8141%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (113 samples, 0.89%)</title><rect x="56.5641%" y="197" width="0.8872%" height="15" fill="rgb(236,173,42)"/><text x="56.8141%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (25 samples, 0.20%)</title><rect x="57.4984%" y="197" width="0.1963%" height="15" fill="rgb(249,184,22)"/><text x="57.7484%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (20 samples, 0.16%)</title><rect x="57.5377%" y="181" width="0.1570%" height="15" fill="rgb(243,217,22)"/><text x="57.7877%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="57.6947%" y="197" width="0.1884%" height="15" fill="rgb(209,173,0)"/><text x="57.9447%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="57.6947%" y="181" width="0.1884%" height="15" fill="rgb(224,64,31)"/><text x="57.9447%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="57.6947%" y="165" width="0.1884%" height="15" fill="rgb(252,58,39)"/><text x="57.9447%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 0.12%)</title><rect x="57.7654%" y="149" width="0.1178%" height="15" fill="rgb(214,104,22)"/><text x="58.0154%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (51 samples, 0.40%)</title><rect x="57.4906%" y="213" width="0.4004%" height="15" fill="rgb(233,160,5)"/><text x="57.7406%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (54 samples, 0.42%)</title><rect x="57.8910%" y="213" width="0.4240%" height="15" fill="rgb(217,188,8)"/><text x="58.1410%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (21 samples, 0.16%)</title><rect x="58.1501%" y="197" width="0.1649%" height="15" fill="rgb(235,9,47)"/><text x="58.4001%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (20 samples, 0.16%)</title><rect x="58.1580%" y="181" width="0.1570%" height="15" fill="rgb(219,103,15)"/><text x="58.4080%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (28 samples, 0.22%)</title><rect x="58.4328%" y="197" width="0.2198%" height="15" fill="rgb(217,83,31)"/><text x="58.6828%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (20 samples, 0.16%)</title><rect x="58.9117%" y="149" width="0.1570%" height="15" fill="rgb(236,56,24)"/><text x="59.1617%" y="159.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.16%)</title><rect x="58.9117%" y="133" width="0.1570%" height="15" fill="rgb(230,126,27)"/><text x="59.1617%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (18 samples, 0.14%)</title><rect x="58.9274%" y="117" width="0.1413%" height="15" fill="rgb(206,65,43)"/><text x="59.1774%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (17 samples, 0.13%)</title><rect x="58.9353%" y="101" width="0.1335%" height="15" fill="rgb(250,125,28)"/><text x="59.1853%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.12%)</title><rect x="59.1316%" y="85" width="0.1178%" height="15" fill="rgb(247,179,53)"/><text x="59.3816%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.10%)</title><rect x="59.1473%" y="69" width="0.1021%" height="15" fill="rgb(243,197,21)"/><text x="59.3973%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.10%)</title><rect x="59.1473%" y="53" width="0.1021%" height="15" fill="rgb(237,144,43)"/><text x="59.3973%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (24 samples, 0.19%)</title><rect x="59.0766%" y="117" width="0.1884%" height="15" fill="rgb(236,198,30)"/><text x="59.3266%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (17 samples, 0.13%)</title><rect x="59.1316%" y="101" width="0.1335%" height="15" fill="rgb(247,36,5)"/><text x="59.3816%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (30 samples, 0.24%)</title><rect x="59.3907%" y="69" width="0.2356%" height="15" fill="rgb(245,203,15)"/><text x="59.6407%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (50 samples, 0.39%)</title><rect x="59.2651%" y="117" width="0.3926%" height="15" fill="rgb(227,125,51)"/><text x="59.5151%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (50 samples, 0.39%)</title><rect x="59.2651%" y="101" width="0.3926%" height="15" fill="rgb(230,130,13)"/><text x="59.5151%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (49 samples, 0.38%)</title><rect x="59.2729%" y="85" width="0.3847%" height="15" fill="rgb(232,40,46)"/><text x="59.5229%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (80 samples, 0.63%)</title><rect x="59.0688%" y="149" width="0.6281%" height="15" fill="rgb(213,3,44)"/><text x="59.3188%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (79 samples, 0.62%)</title><rect x="59.0766%" y="133" width="0.6203%" height="15" fill="rgb(239,161,30)"/><text x="59.3266%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (27 samples, 0.21%)</title><rect x="59.7362%" y="149" width="0.2120%" height="15" fill="rgb(231,191,11)"/><text x="59.9862%" y="159.50"></text></g><g><title>core::alloc::Layout::array (13 samples, 0.10%)</title><rect x="60.1288%" y="101" width="0.1021%" height="15" fill="rgb(214,97,49)"/><text x="60.3788%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (34 samples, 0.27%)</title><rect x="60.0660%" y="133" width="0.2670%" height="15" fill="rgb(252,222,2)"/><text x="60.3160%" y="143.50"></text></g><g><title>hashbrown::raw::calculate_layout (27 samples, 0.21%)</title><rect x="60.1209%" y="117" width="0.2120%" height="15" fill="rgb(236,164,34)"/><text x="60.3709%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (38 samples, 0.30%)</title><rect x="60.0424%" y="149" width="0.2984%" height="15" fill="rgb(214,34,54)"/><text x="60.2924%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (216 samples, 1.70%)</title><rect x="58.6605%" y="197" width="1.6960%" height="15" fill="rgb(219,108,29)"/><text x="58.9105%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (214 samples, 1.68%)</title><rect x="58.6762%" y="181" width="1.6803%" height="15" fill="rgb(206,157,9)"/><text x="58.9262%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (200 samples, 1.57%)</title><rect x="58.7861%" y="165" width="1.5704%" height="15" fill="rgb(230,67,35)"/><text x="59.0361%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (268 samples, 2.10%)</title><rect x="58.3229%" y="213" width="2.1043%" height="15" fill="rgb(234,183,23)"/><text x="58.5729%" y="223.50">h..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (380 samples, 2.98%)</title><rect x="57.4513%" y="261" width="2.9837%" height="15" fill="rgb(214,123,37)"/><text x="57.7013%" y="271.50">std..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (377 samples, 2.96%)</title><rect x="57.4749%" y="245" width="2.9601%" height="15" fill="rgb(246,95,28)"/><text x="57.7249%" y="255.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (377 samples, 2.96%)</title><rect x="57.4749%" y="229" width="2.9601%" height="15" fill="rgb(207,89,5)"/><text x="57.7249%" y="239.50">has..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (18 samples, 0.14%)</title><rect x="61.3458%" y="245" width="0.1413%" height="15" fill="rgb(254,169,2)"/><text x="61.5958%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.12%)</title><rect x="61.7776%" y="149" width="0.1178%" height="15" fill="rgb(237,192,42)"/><text x="62.0276%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.11%)</title><rect x="61.9347%" y="133" width="0.1099%" height="15" fill="rgb(250,5,42)"/><text x="62.1847%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.14%)</title><rect x="61.9111%" y="149" width="0.1413%" height="15" fill="rgb(240,162,4)"/><text x="62.1611%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (22 samples, 0.17%)</title><rect x="62.0603%" y="149" width="0.1727%" height="15" fill="rgb(205,124,21)"/><text x="62.3103%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (18 samples, 0.14%)</title><rect x="62.2566%" y="117" width="0.1413%" height="15" fill="rgb(223,202,28)"/><text x="62.5066%" y="127.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (26 samples, 0.20%)</title><rect x="62.2330%" y="133" width="0.2041%" height="15" fill="rgb(212,31,41)"/><text x="62.4830%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (27 samples, 0.21%)</title><rect x="62.2330%" y="149" width="0.2120%" height="15" fill="rgb(248,96,40)"/><text x="62.4830%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (130 samples, 1.02%)</title><rect x="61.6599%" y="165" width="1.0207%" height="15" fill="rgb(248,89,15)"/><text x="61.9099%" y="175.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::as_slice/core::slice::Iter&lt;T&gt;::make_slice (13 samples, 0.10%)</title><rect x="62.5785%" y="149" width="0.1021%" height="15" fill="rgb(243,119,36)"/><text x="62.8285%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (159 samples, 1.25%)</title><rect x="61.6442%" y="181" width="1.2484%" height="15" fill="rgb(251,141,50)"/><text x="61.8942%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (15 samples, 0.12%)</title><rect x="62.7748%" y="165" width="0.1178%" height="15" fill="rgb(214,44,43)"/><text x="63.0248%" y="175.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.11%)</title><rect x="63.0496%" y="133" width="0.1099%" height="15" fill="rgb(243,207,4)"/><text x="63.2996%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (21 samples, 0.16%)</title><rect x="63.1988%" y="133" width="0.1649%" height="15" fill="rgb(229,156,40)"/><text x="63.4488%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.57%)</title><rect x="62.9083%" y="149" width="0.5732%" height="15" fill="rgb(230,99,47)"/><text x="63.1583%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (77 samples, 0.60%)</title><rect x="62.8926%" y="181" width="0.6046%" height="15" fill="rgb(243,84,11)"/><text x="63.1426%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (77 samples, 0.60%)</title><rect x="62.8926%" y="165" width="0.6046%" height="15" fill="rgb(254,199,14)"/><text x="63.1426%" y="175.50"></text></g><g><title>alloc::slice::hack::to_vec (244 samples, 1.92%)</title><rect x="61.5970%" y="197" width="1.9158%" height="15" fill="rgb(215,37,54)"/><text x="61.8470%" y="207.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (251 samples, 1.97%)</title><rect x="61.5499%" y="213" width="1.9708%" height="15" fill="rgb(234,167,27)"/><text x="61.7999%" y="223.50">a..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (256 samples, 2.01%)</title><rect x="61.5342%" y="229" width="2.0101%" height="15" fill="rgb(229,84,50)"/><text x="61.7842%" y="239.50">a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (262 samples, 2.06%)</title><rect x="61.5107%" y="245" width="2.0572%" height="15" fill="rgb(225,191,9)"/><text x="61.7607%" y="255.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (42 samples, 0.33%)</title><rect x="63.6542%" y="229" width="0.3298%" height="15" fill="rgb(220,10,35)"/><text x="63.9042%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (42 samples, 0.33%)</title><rect x="64.0704%" y="213" width="0.3298%" height="15" fill="rgb(207,221,41)"/><text x="64.3204%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (21 samples, 0.16%)</title><rect x="64.2352%" y="197" width="0.1649%" height="15" fill="rgb(227,202,3)"/><text x="64.4852%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (133 samples, 1.04%)</title><rect x="64.5572%" y="181" width="1.0443%" height="15" fill="rgb(216,52,42)"/><text x="64.8072%" y="191.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.31%)</title><rect x="65.6721%" y="165" width="0.3141%" height="15" fill="rgb(243,72,21)"/><text x="65.9221%" y="175.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (24 samples, 0.19%)</title><rect x="65.7977%" y="149" width="0.1884%" height="15" fill="rgb(244,145,40)"/><text x="66.0477%" y="159.50"></text></g><g><title>_malloc (75 samples, 0.59%)</title><rect x="66.0804%" y="133" width="0.5889%" height="15" fill="rgb(250,82,20)"/><text x="66.3304%" y="143.50"></text></g><g><title>_malloc_zone_malloc (72 samples, 0.57%)</title><rect x="66.1040%" y="117" width="0.5653%" height="15" fill="rgb(233,45,24)"/><text x="66.3540%" y="127.50"></text></g><g><title>_szone_malloc_should_clear (67 samples, 0.53%)</title><rect x="66.1432%" y="101" width="0.5261%" height="15" fill="rgb(240,115,33)"/><text x="66.3932%" y="111.50"></text></g><g><title>_tiny_malloc_should_clear (65 samples, 0.51%)</title><rect x="66.1589%" y="85" width="0.5104%" height="15" fill="rgb(247,26,51)"/><text x="66.4089%" y="95.50"></text></g><g><title>_tiny_malloc_from_free_list (25 samples, 0.20%)</title><rect x="66.4730%" y="69" width="0.1963%" height="15" fill="rgb(211,178,32)"/><text x="66.7230%" y="79.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.66%)</title><rect x="66.0411%" y="149" width="0.6595%" height="15" fill="rgb(210,49,33)"/><text x="66.2911%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (99 samples, 0.78%)</title><rect x="65.9862%" y="165" width="0.7773%" height="15" fill="rgb(206,49,19)"/><text x="66.2362%" y="175.50"></text></g><g><title>_malloc_zone_realloc (52 samples, 0.41%)</title><rect x="67.1404%" y="117" width="0.4083%" height="15" fill="rgb(222,209,26)"/><text x="67.3904%" y="127.50"></text></g><g><title>_szone_realloc (38 samples, 0.30%)</title><rect x="67.2503%" y="101" width="0.2984%" height="15" fill="rgb(218,163,12)"/><text x="67.5003%" y="111.50"></text></g><g><title>_szone_size (25 samples, 0.20%)</title><rect x="67.3524%" y="85" width="0.1963%" height="15" fill="rgb(231,156,28)"/><text x="67.6024%" y="95.50"></text></g><g><title>_tiny_size (20 samples, 0.16%)</title><rect x="67.3916%" y="69" width="0.1570%" height="15" fill="rgb(228,134,28)"/><text x="67.6416%" y="79.50"></text></g><g><title>_realloc (87 samples, 0.68%)</title><rect x="67.0540%" y="133" width="0.6831%" height="15" fill="rgb(215,195,0)"/><text x="67.3040%" y="143.50"></text></g><g><title>_szone_size (23 samples, 0.18%)</title><rect x="67.5565%" y="117" width="0.1806%" height="15" fill="rgb(228,207,6)"/><text x="67.8065%" y="127.50"></text></g><g><title>_tiny_size (20 samples, 0.16%)</title><rect x="67.5801%" y="101" width="0.1570%" height="15" fill="rgb(216,227,49)"/><text x="67.8301%" y="111.50"></text></g><g><title>alloc::alloc::realloc (118 samples, 0.93%)</title><rect x="66.8891%" y="149" width="0.9265%" height="15" fill="rgb(220,104,35)"/><text x="67.1391%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (14 samples, 0.11%)</title><rect x="67.9020%" y="149" width="0.1099%" height="15" fill="rgb(247,218,44)"/><text x="68.1520%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (161 samples, 1.26%)</title><rect x="66.7635%" y="165" width="1.2641%" height="15" fill="rgb(229,130,2)"/><text x="67.0135%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (13 samples, 0.10%)</title><rect x="68.0276%" y="165" width="0.1021%" height="15" fill="rgb(232,69,24)"/><text x="68.2776%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (14 samples, 0.11%)</title><rect x="68.1297%" y="165" width="0.1099%" height="15" fill="rgb(215,25,11)"/><text x="68.3797%" y="175.50"></text></g><g><title>core::cmp::max (71 samples, 0.56%)</title><rect x="68.5302%" y="149" width="0.5575%" height="15" fill="rgb(226,106,4)"/><text x="68.7802%" y="159.50"></text></g><g><title>core::cmp::Ord::max (58 samples, 0.46%)</title><rect x="68.6322%" y="133" width="0.4554%" height="15" fill="rgb(229,211,41)"/><text x="68.8822%" y="143.50"></text></g><g><title>core::cmp::max_by (52 samples, 0.41%)</title><rect x="68.6793%" y="117" width="0.4083%" height="15" fill="rgb(213,44,51)"/><text x="68.9293%" y="127.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 0.31%)</title><rect x="68.7736%" y="101" width="0.3141%" height="15" fill="rgb(233,74,16)"/><text x="69.0236%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (28 samples, 0.22%)</title><rect x="68.8678%" y="85" width="0.2198%" height="15" fill="rgb(241,65,49)"/><text x="69.1178%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (43 samples, 0.34%)</title><rect x="69.0876%" y="149" width="0.3376%" height="15" fill="rgb(227,73,37)"/><text x="69.3376%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.16%)</title><rect x="69.2604%" y="133" width="0.1649%" height="15" fill="rgb(212,157,23)"/><text x="69.5104%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (174 samples, 1.37%)</title><rect x="68.2475%" y="165" width="1.3662%" height="15" fill="rgb(244,200,9)"/><text x="68.4975%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (22 samples, 0.17%)</title><rect x="69.4410%" y="149" width="0.1727%" height="15" fill="rgb(224,166,51)"/><text x="69.6910%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (23 samples, 0.18%)</title><rect x="69.6137%" y="165" width="0.1806%" height="15" fill="rgb(230,66,14)"/><text x="69.8637%" y="175.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (14 samples, 0.11%)</title><rect x="69.8021%" y="149" width="0.1099%" height="15" fill="rgb(215,201,4)"/><text x="70.0521%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (15 samples, 0.12%)</title><rect x="69.8021%" y="165" width="0.1178%" height="15" fill="rgb(207,226,5)"/><text x="70.0521%" y="175.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (29 samples, 0.23%)</title><rect x="70.1398%" y="133" width="0.2277%" height="15" fill="rgb(238,142,26)"/><text x="70.3898%" y="143.50"></text></g><g><title>core::alloc::Layout::new (48 samples, 0.38%)</title><rect x="70.0298%" y="149" width="0.3769%" height="15" fill="rgb(248,54,36)"/><text x="70.2798%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (15 samples, 0.12%)</title><rect x="71.0663%" y="133" width="0.1178%" height="15" fill="rgb(207,220,26)"/><text x="71.3163%" y="143.50"></text></g><g><title>core::alloc::Layout::align (20 samples, 0.16%)</title><rect x="71.1840%" y="133" width="0.1570%" height="15" fill="rgb(232,17,1)"/><text x="71.4340%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (23 samples, 0.18%)</title><rect x="71.5845%" y="117" width="0.1806%" height="15" fill="rgb(213,71,30)"/><text x="71.8345%" y="127.50"></text></g><g><title>core::alloc::Layout::padding_needed_for (88 samples, 0.69%)</title><rect x="71.4196%" y="133" width="0.6910%" height="15" fill="rgb(254,9,36)"/><text x="71.6696%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (44 samples, 0.35%)</title><rect x="71.7651%" y="117" width="0.3455%" height="15" fill="rgb(212,35,28)"/><text x="72.0151%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (49 samples, 0.38%)</title><rect x="72.1263%" y="133" width="0.3847%" height="15" fill="rgb(234,187,50)"/><text x="72.3763%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (33 samples, 0.26%)</title><rect x="72.2519%" y="117" width="0.2591%" height="15" fill="rgb(233,81,25)"/><text x="72.5019%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (57 samples, 0.45%)</title><rect x="72.5110%" y="133" width="0.4476%" height="15" fill="rgb(207,17,1)"/><text x="72.7610%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (33 samples, 0.26%)</title><rect x="72.6994%" y="117" width="0.2591%" height="15" fill="rgb(244,6,8)"/><text x="72.9494%" y="127.50"></text></g><g><title>core::alloc::Layout::repeat (349 samples, 2.74%)</title><rect x="70.4067%" y="149" width="2.7403%" height="15" fill="rgb(210,212,14)"/><text x="70.6567%" y="159.50">co..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (18 samples, 0.14%)</title><rect x="73.0057%" y="133" width="0.1413%" height="15" fill="rgb(207,53,24)"/><text x="73.2557%" y="143.50"></text></g><g><title>core::alloc::Layout::array (448 samples, 3.52%)</title><rect x="69.9592%" y="165" width="3.5176%" height="15" fill="rgb(242,14,2)"/><text x="70.2092%" y="175.50">cor..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (41 samples, 0.32%)</title><rect x="73.1548%" y="149" width="0.3219%" height="15" fill="rgb(247,23,47)"/><text x="73.4048%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (13 samples, 0.10%)</title><rect x="73.5239%" y="165" width="0.1021%" height="15" fill="rgb(236,151,41)"/><text x="73.7739%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (51 samples, 0.40%)</title><rect x="73.6809%" y="165" width="0.4004%" height="15" fill="rgb(223,139,54)"/><text x="73.9309%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (18 samples, 0.14%)</title><rect x="73.9400%" y="149" width="0.1413%" height="15" fill="rgb(220,143,25)"/><text x="74.1900%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (1,095 samples, 8.60%)</title><rect x="65.6721%" y="181" width="8.5977%" height="15" fill="rgb(243,1,48)"/><text x="65.9221%" y="191.50">alloc::raw_v..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (21 samples, 0.16%)</title><rect x="74.1049%" y="165" width="0.1649%" height="15" fill="rgb(225,117,53)"/><text x="74.3549%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,259 samples, 9.89%)</title><rect x="64.4237%" y="197" width="9.8854%" height="15" fill="rgb(242,19,48)"/><text x="64.6737%" y="207.50">alloc::raw_vec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1,263 samples, 9.92%)</title><rect x="64.4001%" y="213" width="9.9168%" height="15" fill="rgb(216,160,14)"/><text x="64.6501%" y="223.50">alloc::vec::Ve..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15 samples, 0.12%)</title><rect x="74.3169%" y="213" width="0.1178%" height="15" fill="rgb(235,38,17)"/><text x="74.5669%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1,339 samples, 10.51%)</title><rect x="64.0546%" y="229" width="10.5135%" height="15" fill="rgb(236,51,41)"/><text x="64.3046%" y="239.50">alloc::vec::Vec..</text></g><g><title>core::ptr::write (16 samples, 0.13%)</title><rect x="74.4425%" y="213" width="0.1256%" height="15" fill="rgb(237,177,4)"/><text x="74.6925%" y="223.50"></text></g><g><title>alloc::string::String::push (1,414 samples, 11.10%)</title><rect x="63.5914%" y="245" width="11.1024%" height="15" fill="rgb(207,72,17)"/><text x="63.8414%" y="255.50">alloc::string::S..</text></g><g><title>_malloc_zone_realloc (21 samples, 0.16%)</title><rect x="74.9686%" y="133" width="0.1649%" height="15" fill="rgb(235,29,34)"/><text x="75.2186%" y="143.50"></text></g><g><title>_szone_realloc (21 samples, 0.16%)</title><rect x="74.9686%" y="117" width="0.1649%" height="15" fill="rgb(212,13,22)"/><text x="75.2186%" y="127.50"></text></g><g><title>alloc::alloc::realloc (26 samples, 0.20%)</title><rect x="74.9450%" y="165" width="0.2041%" height="15" fill="rgb(243,95,11)"/><text x="75.1950%" y="175.50"></text></g><g><title>_realloc (23 samples, 0.18%)</title><rect x="74.9686%" y="149" width="0.1806%" height="15" fill="rgb(214,76,28)"/><text x="75.2186%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (27 samples, 0.21%)</title><rect x="74.9450%" y="181" width="0.2120%" height="15" fill="rgb(237,73,9)"/><text x="75.1950%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (63 samples, 0.49%)</title><rect x="74.8587%" y="213" width="0.4947%" height="15" fill="rgb(229,115,50)"/><text x="75.1087%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (54 samples, 0.42%)</title><rect x="74.9293%" y="197" width="0.4240%" height="15" fill="rgb(246,226,7)"/><text x="75.1793%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (65 samples, 0.51%)</title><rect x="74.8508%" y="229" width="0.5104%" height="15" fill="rgb(249,14,18)"/><text x="75.1008%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (83 samples, 0.65%)</title><rect x="74.7723%" y="245" width="0.6517%" height="15" fill="rgb(243,24,30)"/><text x="75.0223%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryFrom&lt;U&gt;&gt;::try_from (31 samples, 0.24%)</title><rect x="75.9972%" y="213" width="0.2434%" height="15" fill="rgb(230,122,18)"/><text x="76.2472%" y="223.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.10%)</title><rect x="76.1385%" y="197" width="0.1021%" height="15" fill="rgb(231,203,37)"/><text x="76.3885%" y="207.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (133 samples, 1.04%)</title><rect x="75.7852%" y="229" width="1.0443%" height="15" fill="rgb(251,178,31)"/><text x="76.0352%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (75 samples, 0.59%)</title><rect x="76.2406%" y="213" width="0.5889%" height="15" fill="rgb(249,185,23)"/><text x="76.4906%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (44 samples, 0.35%)</title><rect x="76.4840%" y="197" width="0.3455%" height="15" fill="rgb(207,96,33)"/><text x="76.7340%" y="207.50"></text></g><g><title>core::ptr::read (19 samples, 0.15%)</title><rect x="77.2456%" y="197" width="0.1492%" height="15" fill="rgb(225,53,53)"/><text x="77.4956%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (81 samples, 0.64%)</title><rect x="76.9708%" y="213" width="0.6360%" height="15" fill="rgb(227,103,48)"/><text x="77.2208%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (272 samples, 2.14%)</title><rect x="75.4790%" y="245" width="2.1357%" height="15" fill="rgb(228,48,4)"/><text x="75.7290%" y="255.50">c..</text></g><g><title>core::mem::swap (89 samples, 0.70%)</title><rect x="76.9158%" y="229" width="0.6988%" height="15" fill="rgb(229,68,8)"/><text x="77.1658%" y="239.50"></text></g><g><title>xwords::parse_words (2,189 samples, 17.19%)</title><rect x="60.4742%" y="261" width="17.1875%" height="15" fill="rgb(209,58,36)"/><text x="60.7242%" y="271.50">xwords::parse_words</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (14 samples, 0.11%)</title><rect x="77.7089%" y="229" width="0.1099%" height="15" fill="rgb(252,131,4)"/><text x="77.9589%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (13 samples, 0.10%)</title><rect x="77.7167%" y="213" width="0.1021%" height="15" fill="rgb(243,23,0)"/><text x="77.9667%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (18 samples, 0.14%)</title><rect x="77.9287%" y="117" width="0.1413%" height="15" fill="rgb(248,96,1)"/><text x="78.1787%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="77.8894%" y="165" width="0.1884%" height="15" fill="rgb(236,24,0)"/><text x="78.1394%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="77.8894%" y="149" width="0.1884%" height="15" fill="rgb(241,197,35)"/><text x="78.1394%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24 samples, 0.19%)</title><rect x="77.8894%" y="133" width="0.1884%" height="15" fill="rgb(252,12,0)"/><text x="78.1394%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u32 (13 samples, 0.10%)</title><rect x="78.1171%" y="149" width="0.1021%" height="15" fill="rgb(218,27,6)"/><text x="78.3671%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (43 samples, 0.34%)</title><rect x="77.8894%" y="181" width="0.3376%" height="15" fill="rgb(205,175,0)"/><text x="78.1394%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (14 samples, 0.11%)</title><rect x="78.1171%" y="165" width="0.1099%" height="15" fill="rgb(247,192,24)"/><text x="78.3671%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (88 samples, 0.69%)</title><rect x="77.8502%" y="197" width="0.6910%" height="15" fill="rgb(242,165,20)"/><text x="78.1002%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (39 samples, 0.31%)</title><rect x="78.2349%" y="181" width="0.3062%" height="15" fill="rgb(238,105,5)"/><text x="78.4849%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.11%)</title><rect x="78.4312%" y="165" width="0.1099%" height="15" fill="rgb(220,213,4)"/><text x="78.6812%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (93 samples, 0.73%)</title><rect x="77.8188%" y="229" width="0.7302%" height="15" fill="rgb(219,154,9)"/><text x="78.0688%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (93 samples, 0.73%)</title><rect x="77.8188%" y="213" width="0.7302%" height="15" fill="rgb(211,39,13)"/><text x="78.0688%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (21 samples, 0.16%)</title><rect x="78.5726%" y="213" width="0.1649%" height="15" fill="rgb(251,193,26)"/><text x="78.8226%" y="223.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (21 samples, 0.16%)</title><rect x="78.5726%" y="197" width="0.1649%" height="15" fill="rgb(222,74,36)"/><text x="78.8226%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (17 samples, 0.13%)</title><rect x="78.6040%" y="181" width="0.1335%" height="15" fill="rgb(233,227,51)"/><text x="78.8540%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (23 samples, 0.18%)</title><rect x="78.8160%" y="101" width="0.1806%" height="15" fill="rgb(251,92,35)"/><text x="79.0660%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (26 samples, 0.20%)</title><rect x="78.8003%" y="149" width="0.2041%" height="15" fill="rgb(241,214,21)"/><text x="79.0503%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26 samples, 0.20%)</title><rect x="78.8003%" y="133" width="0.2041%" height="15" fill="rgb(217,61,34)"/><text x="79.0503%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26 samples, 0.20%)</title><rect x="78.8003%" y="117" width="0.2041%" height="15" fill="rgb(238,5,15)"/><text x="79.0503%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 0.29%)</title><rect x="78.8003%" y="165" width="0.2905%" height="15" fill="rgb(206,144,16)"/><text x="79.0503%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (84 samples, 0.66%)</title><rect x="78.7374%" y="213" width="0.6595%" height="15" fill="rgb(214,192,44)"/><text x="78.9874%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (82 samples, 0.64%)</title><rect x="78.7531%" y="197" width="0.6438%" height="15" fill="rgb(232,184,51)"/><text x="79.0031%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (79 samples, 0.62%)</title><rect x="78.7767%" y="181" width="0.6203%" height="15" fill="rgb(228,151,52)"/><text x="79.0267%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (39 samples, 0.31%)</title><rect x="79.0908%" y="165" width="0.3062%" height="15" fill="rgb(224,156,24)"/><text x="79.3408%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13 samples, 0.10%)</title><rect x="79.2949%" y="149" width="0.1021%" height="15" fill="rgb(254,170,12)"/><text x="79.5449%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (25 samples, 0.20%)</title><rect x="79.4362%" y="197" width="0.1963%" height="15" fill="rgb(213,175,36)"/><text x="79.6862%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (25 samples, 0.20%)</title><rect x="79.4362%" y="181" width="0.1963%" height="15" fill="rgb(207,78,2)"/><text x="79.6862%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (21 samples, 0.16%)</title><rect x="79.4677%" y="165" width="0.1649%" height="15" fill="rgb(215,227,14)"/><text x="79.7177%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.15%)</title><rect x="79.6639%" y="133" width="0.1492%" height="15" fill="rgb(254,124,9)"/><text x="79.9139%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.15%)</title><rect x="79.6639%" y="117" width="0.1492%" height="15" fill="rgb(224,14,29)"/><text x="79.9139%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.14%)</title><rect x="79.6718%" y="101" width="0.1413%" height="15" fill="rgb(235,48,48)"/><text x="79.9218%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.20%)</title><rect x="79.6639%" y="149" width="0.2041%" height="15" fill="rgb(225,114,34)"/><text x="79.9139%" y="159.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (80 samples, 0.63%)</title><rect x="79.6325%" y="197" width="0.6281%" height="15" fill="rgb(246,13,1)"/><text x="79.8825%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (79 samples, 0.62%)</title><rect x="79.6404%" y="181" width="0.6203%" height="15" fill="rgb(213,218,0)"/><text x="79.8904%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (78 samples, 0.61%)</title><rect x="79.6482%" y="165" width="0.6124%" height="15" fill="rgb(240,122,9)"/><text x="79.8982%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (50 samples, 0.39%)</title><rect x="79.8681%" y="149" width="0.3926%" height="15" fill="rgb(220,37,6)"/><text x="80.1181%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.13%)</title><rect x="80.1351%" y="133" width="0.1256%" height="15" fill="rgb(212,80,13)"/><text x="80.3851%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (13 samples, 0.10%)</title><rect x="80.2764%" y="181" width="0.1021%" height="15" fill="rgb(222,198,39)"/><text x="80.5264%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (13 samples, 0.10%)</title><rect x="80.2764%" y="165" width="0.1021%" height="15" fill="rgb(235,168,43)"/><text x="80.5264%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 0.17%)</title><rect x="80.4805%" y="69" width="0.1727%" height="15" fill="rgb(205,40,14)"/><text x="80.7305%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (31 samples, 0.24%)</title><rect x="80.4177%" y="117" width="0.2434%" height="15" fill="rgb(210,221,42)"/><text x="80.6677%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31 samples, 0.24%)</title><rect x="80.4177%" y="101" width="0.2434%" height="15" fill="rgb(231,153,26)"/><text x="80.6677%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31 samples, 0.24%)</title><rect x="80.4177%" y="85" width="0.2434%" height="15" fill="rgb(253,8,32)"/><text x="80.6677%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.30%)</title><rect x="80.4099%" y="133" width="0.2984%" height="15" fill="rgb(215,14,32)"/><text x="80.6599%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (91 samples, 0.71%)</title><rect x="80.3785%" y="181" width="0.7145%" height="15" fill="rgb(252,104,40)"/><text x="80.6285%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (90 samples, 0.71%)</title><rect x="80.3863%" y="165" width="0.7067%" height="15" fill="rgb(221,183,54)"/><text x="80.6363%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (89 samples, 0.70%)</title><rect x="80.3942%" y="149" width="0.6988%" height="15" fill="rgb(230,225,15)"/><text x="80.6442%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (49 samples, 0.38%)</title><rect x="80.7082%" y="133" width="0.3847%" height="15" fill="rgb(221,35,39)"/><text x="80.9582%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.14%)</title><rect x="80.9516%" y="117" width="0.1413%" height="15" fill="rgb(249,33,34)"/><text x="81.2016%" y="127.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (16 samples, 0.13%)</title><rect x="81.1087%" y="165" width="0.1256%" height="15" fill="rgb(234,176,53)"/><text x="81.3587%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (15 samples, 0.12%)</title><rect x="81.1165%" y="149" width="0.1178%" height="15" fill="rgb(208,165,47)"/><text x="81.3665%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (18 samples, 0.14%)</title><rect x="81.3207%" y="53" width="0.1413%" height="15" fill="rgb(208,206,21)"/><text x="81.5707%" y="63.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 0.21%)</title><rect x="81.2579%" y="101" width="0.2120%" height="15" fill="rgb(207,52,54)"/><text x="81.5079%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 0.21%)</title><rect x="81.2579%" y="85" width="0.2120%" height="15" fill="rgb(211,64,13)"/><text x="81.5079%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 0.21%)</title><rect x="81.2579%" y="69" width="0.2120%" height="15" fill="rgb(244,5,48)"/><text x="81.5079%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (33 samples, 0.26%)</title><rect x="81.2500%" y="117" width="0.2591%" height="15" fill="rgb(245,72,34)"/><text x="81.5000%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (76 samples, 0.60%)</title><rect x="81.2343%" y="165" width="0.5967%" height="15" fill="rgb(220,47,16)"/><text x="81.4843%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (76 samples, 0.60%)</title><rect x="81.2343%" y="149" width="0.5967%" height="15" fill="rgb(229,102,25)"/><text x="81.4843%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (74 samples, 0.58%)</title><rect x="81.2500%" y="133" width="0.5810%" height="15" fill="rgb(215,163,43)"/><text x="81.5000%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (41 samples, 0.32%)</title><rect x="81.5091%" y="117" width="0.3219%" height="15" fill="rgb(243,123,17)"/><text x="81.7591%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (18 samples, 0.14%)</title><rect x="81.6897%" y="101" width="0.1413%" height="15" fill="rgb(252,195,36)"/><text x="81.9397%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.15%)</title><rect x="81.9881%" y="85" width="0.1492%" height="15" fill="rgb(205,47,8)"/><text x="82.2381%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.15%)</title><rect x="81.9881%" y="69" width="0.1492%" height="15" fill="rgb(221,158,32)"/><text x="82.2381%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.14%)</title><rect x="81.9959%" y="53" width="0.1413%" height="15" fill="rgb(212,186,31)"/><text x="82.2459%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 0.18%)</title><rect x="81.9802%" y="101" width="0.1806%" height="15" fill="rgb(232,136,38)"/><text x="82.2302%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (70 samples, 0.55%)</title><rect x="81.9488%" y="149" width="0.5496%" height="15" fill="rgb(248,188,54)"/><text x="82.1988%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (70 samples, 0.55%)</title><rect x="81.9488%" y="133" width="0.5496%" height="15" fill="rgb(224,158,51)"/><text x="82.1988%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (68 samples, 0.53%)</title><rect x="81.9645%" y="117" width="0.5339%" height="15" fill="rgb(215,143,35)"/><text x="82.2145%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (43 samples, 0.34%)</title><rect x="82.1608%" y="101" width="0.3376%" height="15" fill="rgb(247,163,14)"/><text x="82.4108%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.11%)</title><rect x="82.3885%" y="85" width="0.1099%" height="15" fill="rgb(215,81,13)"/><text x="82.6385%" y="95.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (13 samples, 0.10%)</title><rect x="82.5455%" y="133" width="0.1021%" height="15" fill="rgb(227,205,25)"/><text x="82.7955%" y="143.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (13 samples, 0.10%)</title><rect x="82.5455%" y="117" width="0.1021%" height="15" fill="rgb(237,173,24)"/><text x="82.7955%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33 samples, 0.26%)</title><rect x="82.6476%" y="133" width="0.2591%" height="15" fill="rgb(221,147,54)"/><text x="82.8976%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (31 samples, 0.24%)</title><rect x="82.6633%" y="117" width="0.2434%" height="15" fill="rgb(243,141,18)"/><text x="82.9133%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (31 samples, 0.24%)</title><rect x="82.6633%" y="101" width="0.2434%" height="15" fill="rgb(245,2,30)"/><text x="82.9133%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (25 samples, 0.20%)</title><rect x="82.7104%" y="85" width="0.1963%" height="15" fill="rgb(217,4,4)"/><text x="82.9604%" y="95.50"></text></g><g><title>xwords::is_viable (3,955 samples, 31.05%)</title><rect x="52.1749%" y="277" width="31.0537%" height="15" fill="rgb(236,173,11)"/><text x="52.4249%" y="287.50">xwords::is_viable</text></g><g><title>xwords::trie::Trie::is_word (709 samples, 5.57%)</title><rect x="77.6617%" y="261" width="5.5669%" height="15" fill="rgb(235,9,44)"/><text x="77.9117%" y="271.50">xwords:..</text></g><g><title>xwords::trie::TrieNode::is_word (709 samples, 5.57%)</title><rect x="77.6617%" y="245" width="5.5669%" height="15" fill="rgb(213,229,12)"/><text x="77.9117%" y="255.50">xwords:..</text></g><g><title>xwords::trie::TrieNode::is_word (596 samples, 4.68%)</title><rect x="78.5490%" y="229" width="4.6796%" height="15" fill="rgb(220,139,4)"/><text x="78.7990%" y="239.50">xword..</text></g><g><title>xwords::trie::TrieNode::is_word (488 samples, 3.83%)</title><rect x="79.3970%" y="213" width="3.8317%" height="15" fill="rgb(241,123,19)"/><text x="79.6470%" y="223.50">xwor..</text></g><g><title>xwords::trie::TrieNode::is_word (378 samples, 2.97%)</title><rect x="80.2607%" y="197" width="2.9680%" height="15" fill="rgb(247,8,43)"/><text x="80.5107%" y="207.50">xwo..</text></g><g><title>xwords::trie::TrieNode::is_word (272 samples, 2.14%)</title><rect x="81.0930%" y="181" width="2.1357%" height="15" fill="rgb(219,77,38)"/><text x="81.3430%" y="191.50">x..</text></g><g><title>xwords::trie::TrieNode::is_word (178 samples, 1.40%)</title><rect x="81.8310%" y="165" width="1.3976%" height="15" fill="rgb(229,116,25)"/><text x="82.0810%" y="175.50"></text></g><g><title>xwords::trie::TrieNode::is_word (93 samples, 0.73%)</title><rect x="82.4984%" y="149" width="0.7302%" height="15" fill="rgb(253,18,49)"/><text x="82.7484%" y="159.50"></text></g><g><title>xwords::trie::TrieNode::is_word (41 samples, 0.32%)</title><rect x="82.9067%" y="133" width="0.3219%" height="15" fill="rgb(242,124,25)"/><text x="83.1567%" y="143.50"></text></g><g><title>xwords::trie::TrieNode::is_word (20 samples, 0.16%)</title><rect x="83.0716%" y="117" width="0.1570%" height="15" fill="rgb(219,219,6)"/><text x="83.3216%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.16%)</title><rect x="83.9274%" y="165" width="0.1570%" height="15" fill="rgb(230,12,48)"/><text x="84.1774%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (13 samples, 0.10%)</title><rect x="84.1709%" y="165" width="0.1021%" height="15" fill="rgb(233,166,37)"/><text x="84.4209%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (15 samples, 0.12%)</title><rect x="84.2729%" y="165" width="0.1178%" height="15" fill="rgb(209,22,8)"/><text x="84.5229%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (13 samples, 0.10%)</title><rect x="84.2886%" y="149" width="0.1021%" height="15" fill="rgb(209,224,25)"/><text x="84.5386%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (89 samples, 0.70%)</title><rect x="83.8725%" y="181" width="0.6988%" height="15" fill="rgb(235,223,50)"/><text x="84.1225%" y="191.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::as_slice/core::slice::Iter&lt;T&gt;::make_slice (21 samples, 0.16%)</title><rect x="84.4064%" y="165" width="0.1649%" height="15" fill="rgb(210,181,44)"/><text x="84.6564%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (13 samples, 0.10%)</title><rect x="84.5713%" y="181" width="0.1021%" height="15" fill="rgb(232,5,0)"/><text x="84.8213%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (107 samples, 0.84%)</title><rect x="83.8725%" y="197" width="0.8401%" height="15" fill="rgb(209,8,16)"/><text x="84.1225%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.21%)</title><rect x="84.7440%" y="165" width="0.2120%" height="15" fill="rgb(251,60,49)"/><text x="84.9940%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (149 samples, 1.17%)</title><rect x="83.7940%" y="245" width="1.1699%" height="15" fill="rgb(211,109,18)"/><text x="84.0440%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (149 samples, 1.17%)</title><rect x="83.7940%" y="229" width="1.1699%" height="15" fill="rgb(215,190,19)"/><text x="84.0440%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (144 samples, 1.13%)</title><rect x="83.8332%" y="213" width="1.1307%" height="15" fill="rgb(227,51,42)"/><text x="84.0832%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32 samples, 0.25%)</title><rect x="84.7126%" y="197" width="0.2513%" height="15" fill="rgb(240,76,6)"/><text x="84.9626%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (30 samples, 0.24%)</title><rect x="84.7283%" y="181" width="0.2356%" height="15" fill="rgb(216,205,0)"/><text x="84.9783%" y="191.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (152 samples, 1.19%)</title><rect x="83.7861%" y="261" width="1.1935%" height="15" fill="rgb(208,54,2)"/><text x="84.0361%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (30 samples, 0.24%)</title><rect x="85.0503%" y="245" width="0.2356%" height="15" fill="rgb(211,115,27)"/><text x="85.3003%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (25 samples, 0.20%)</title><rect x="85.3879%" y="229" width="0.1963%" height="15" fill="rgb(220,144,48)"/><text x="85.6379%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (83 samples, 0.65%)</title><rect x="85.6784%" y="197" width="0.6517%" height="15" fill="rgb(209,156,5)"/><text x="85.9284%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (26 samples, 0.20%)</title><rect x="86.3772%" y="181" width="0.2041%" height="15" fill="rgb(254,47,34)"/><text x="86.6272%" y="191.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (19 samples, 0.15%)</title><rect x="86.4322%" y="165" width="0.1492%" height="15" fill="rgb(225,206,16)"/><text x="86.6822%" y="175.50"></text></g><g><title>_malloc (38 samples, 0.30%)</title><rect x="86.5970%" y="149" width="0.2984%" height="15" fill="rgb(219,110,12)"/><text x="86.8470%" y="159.50"></text></g><g><title>_malloc_zone_malloc (37 samples, 0.29%)</title><rect x="86.6049%" y="133" width="0.2905%" height="15" fill="rgb(252,178,9)"/><text x="86.8549%" y="143.50"></text></g><g><title>_szone_malloc_should_clear (33 samples, 0.26%)</title><rect x="86.6363%" y="117" width="0.2591%" height="15" fill="rgb(214,136,2)"/><text x="86.8863%" y="127.50"></text></g><g><title>_tiny_malloc_should_clear (32 samples, 0.25%)</title><rect x="86.6442%" y="101" width="0.2513%" height="15" fill="rgb(210,188,2)"/><text x="86.8942%" y="111.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.33%)</title><rect x="86.5813%" y="165" width="0.3298%" height="15" fill="rgb(228,158,1)"/><text x="86.8313%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::alloc (50 samples, 0.39%)</title><rect x="86.5813%" y="181" width="0.3926%" height="15" fill="rgb(212,85,54)"/><text x="86.8313%" y="191.50"></text></g><g><title>_malloc_zone_realloc (31 samples, 0.24%)</title><rect x="87.1781%" y="133" width="0.2434%" height="15" fill="rgb(242,139,40)"/><text x="87.4281%" y="143.50"></text></g><g><title>_szone_realloc (24 samples, 0.19%)</title><rect x="87.2330%" y="117" width="0.1884%" height="15" fill="rgb(237,32,13)"/><text x="87.4830%" y="127.50"></text></g><g><title>_szone_size (21 samples, 0.16%)</title><rect x="87.2566%" y="101" width="0.1649%" height="15" fill="rgb(230,194,3)"/><text x="87.5066%" y="111.50"></text></g><g><title>_tiny_size (14 samples, 0.11%)</title><rect x="87.3116%" y="85" width="0.1099%" height="15" fill="rgb(245,211,49)"/><text x="87.5616%" y="95.50"></text></g><g><title>_realloc (53 samples, 0.42%)</title><rect x="87.1388%" y="149" width="0.4161%" height="15" fill="rgb(225,163,15)"/><text x="87.3888%" y="159.50"></text></g><g><title>_szone_size (17 samples, 0.13%)</title><rect x="87.4215%" y="133" width="0.1335%" height="15" fill="rgb(234,27,49)"/><text x="87.6715%" y="143.50"></text></g><g><title>_tiny_size (16 samples, 0.13%)</title><rect x="87.4293%" y="117" width="0.1256%" height="15" fill="rgb(253,218,38)"/><text x="87.6793%" y="127.50"></text></g><g><title>alloc::alloc::realloc (71 samples, 0.56%)</title><rect x="87.0446%" y="165" width="0.5575%" height="15" fill="rgb(245,151,8)"/><text x="87.2946%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (99 samples, 0.78%)</title><rect x="86.9739%" y="181" width="0.7773%" height="15" fill="rgb(230,226,43)"/><text x="87.2239%" y="191.50"></text></g><g><title>core::cmp::max_by (35 samples, 0.27%)</title><rect x="88.1517%" y="133" width="0.2748%" height="15" fill="rgb(249,1,50)"/><text x="88.4017%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 0.15%)</title><rect x="88.2773%" y="117" width="0.1492%" height="15" fill="rgb(240,74,16)"/><text x="88.5273%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (14 samples, 0.11%)</title><rect x="88.3166%" y="101" width="0.1099%" height="15" fill="rgb(215,152,4)"/><text x="88.5666%" y="111.50"></text></g><g><title>core::cmp::max (53 samples, 0.42%)</title><rect x="88.0182%" y="165" width="0.4161%" height="15" fill="rgb(222,144,4)"/><text x="88.2682%" y="175.50"></text></g><g><title>core::cmp::Ord::max (43 samples, 0.34%)</title><rect x="88.0967%" y="149" width="0.3376%" height="15" fill="rgb(213,157,43)"/><text x="88.3467%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (32 samples, 0.25%)</title><rect x="88.4344%" y="165" width="0.2513%" height="15" fill="rgb(213,151,37)"/><text x="88.6844%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (18 samples, 0.14%)</title><rect x="88.5443%" y="149" width="0.1413%" height="15" fill="rgb(234,80,2)"/><text x="88.7943%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::amortized_new_size (116 samples, 0.91%)</title><rect x="87.8847%" y="181" width="0.9108%" height="15" fill="rgb(248,80,48)"/><text x="88.1347%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_layout (18 samples, 0.14%)</title><rect x="88.7955%" y="181" width="0.1413%" height="15" fill="rgb(245,11,51)"/><text x="89.0455%" y="191.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (18 samples, 0.14%)</title><rect x="89.1881%" y="149" width="0.1413%" height="15" fill="rgb(241,81,3)"/><text x="89.4381%" y="159.50"></text></g><g><title>core::alloc::Layout::new (37 samples, 0.29%)</title><rect x="89.0546%" y="165" width="0.2905%" height="15" fill="rgb(228,28,48)"/><text x="89.3046%" y="175.50"></text></g><g><title>core::alloc::Layout::align (15 samples, 0.12%)</title><rect x="89.8555%" y="149" width="0.1178%" height="15" fill="rgb(250,100,34)"/><text x="90.1055%" y="159.50"></text></g><g><title>core::alloc::Layout::from_size_align_unchecked (13 samples, 0.10%)</title><rect x="89.9733%" y="149" width="0.1021%" height="15" fill="rgb(224,62,45)"/><text x="90.2233%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (15 samples, 0.12%)</title><rect x="90.2324%" y="133" width="0.1178%" height="15" fill="rgb(212,189,36)"/><text x="90.4824%" y="143.50"></text></g><g><title>core::alloc::Layout::padding_needed_for (66 samples, 0.52%)</title><rect x="90.0754%" y="149" width="0.5182%" height="15" fill="rgb(212,181,29)"/><text x="90.3254%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (31 samples, 0.24%)</title><rect x="90.3502%" y="133" width="0.2434%" height="15" fill="rgb(242,17,15)"/><text x="90.6002%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (32 samples, 0.25%)</title><rect x="90.6093%" y="149" width="0.2513%" height="15" fill="rgb(244,157,41)"/><text x="90.8593%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (19 samples, 0.15%)</title><rect x="90.7114%" y="133" width="0.1492%" height="15" fill="rgb(241,54,47)"/><text x="90.9614%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (38 samples, 0.30%)</title><rect x="90.8606%" y="149" width="0.2984%" height="15" fill="rgb(244,226,25)"/><text x="91.1106%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (27 samples, 0.21%)</title><rect x="90.9469%" y="133" width="0.2120%" height="15" fill="rgb(224,23,34)"/><text x="91.1969%" y="143.50"></text></g><g><title>core::alloc::Layout::repeat (243 samples, 1.91%)</title><rect x="89.3452%" y="165" width="1.9080%" height="15" fill="rgb(240,84,31)"/><text x="89.5952%" y="175.50">c..</text></g><g><title>core::alloc::Layout::array (314 samples, 2.47%)</title><rect x="88.9997%" y="181" width="2.4655%" height="15" fill="rgb(234,80,35)"/><text x="89.2497%" y="191.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (22 samples, 0.17%)</title><rect x="91.2924%" y="165" width="0.1727%" height="15" fill="rgb(221,69,4)"/><text x="91.5424%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (26 samples, 0.20%)</title><rect x="91.6065%" y="181" width="0.2041%" height="15" fill="rgb(235,90,29)"/><text x="91.8565%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (704 samples, 5.53%)</title><rect x="86.3772%" y="197" width="5.5276%" height="15" fill="rgb(205,131,11)"/><text x="86.6272%" y="207.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (804 samples, 6.31%)</title><rect x="85.6077%" y="213" width="6.3128%" height="15" fill="rgb(229,165,1)"/><text x="85.8577%" y="223.50">alloc::r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (808 samples, 6.34%)</title><rect x="85.5842%" y="229" width="6.3442%" height="15" fill="rgb(217,194,23)"/><text x="85.8342%" y="239.50">alloc::v..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (26 samples, 0.20%)</title><rect x="91.9284%" y="229" width="0.2041%" height="15" fill="rgb(237,58,37)"/><text x="92.1784%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (15 samples, 0.12%)</title><rect x="92.0148%" y="213" width="0.1178%" height="15" fill="rgb(251,105,43)"/><text x="92.2648%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (881 samples, 6.92%)</title><rect x="85.3329%" y="245" width="6.9174%" height="15" fill="rgb(242,39,25)"/><text x="85.5829%" y="255.50">alloc::ve..</text></g><g><title>alloc::string::String::push (934 samples, 7.33%)</title><rect x="84.9796%" y="261" width="7.3335%" height="15" fill="rgb(244,219,13)"/><text x="85.2296%" y="271.50">alloc::str..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (14 samples, 0.11%)</title><rect x="92.3210%" y="261" width="0.1099%" height="15" fill="rgb(233,8,47)"/><text x="92.5710%" y="271.50"></text></g><g><title>_szone_realloc (14 samples, 0.11%)</title><rect x="92.5801%" y="133" width="0.1099%" height="15" fill="rgb(218,22,5)"/><text x="92.8301%" y="143.50"></text></g><g><title>_malloc_zone_realloc (15 samples, 0.12%)</title><rect x="92.5801%" y="149" width="0.1178%" height="15" fill="rgb(246,40,46)"/><text x="92.8301%" y="159.50"></text></g><g><title>_realloc (16 samples, 0.13%)</title><rect x="92.5801%" y="165" width="0.1256%" height="15" fill="rgb(228,97,12)"/><text x="92.8301%" y="175.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.14%)</title><rect x="92.5722%" y="181" width="0.1413%" height="15" fill="rgb(254,9,42)"/><text x="92.8222%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::realloc (23 samples, 0.18%)</title><rect x="92.5565%" y="197" width="0.1806%" height="15" fill="rgb(222,223,34)"/><text x="92.8065%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (42 samples, 0.33%)</title><rect x="92.5094%" y="213" width="0.3298%" height="15" fill="rgb(254,77,33)"/><text x="92.7594%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (48 samples, 0.38%)</title><rect x="92.4702%" y="245" width="0.3769%" height="15" fill="rgb(209,91,34)"/><text x="92.7202%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (47 samples, 0.37%)</title><rect x="92.4780%" y="229" width="0.3690%" height="15" fill="rgb(232,111,5)"/><text x="92.7280%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (57 samples, 0.45%)</title><rect x="92.4388%" y="261" width="0.4476%" height="15" fill="rgb(214,167,47)"/><text x="92.6888%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryFrom&lt;U&gt;&gt;::try_from (20 samples, 0.16%)</title><rect x="93.1847%" y="229" width="0.1570%" height="15" fill="rgb(249,150,36)"/><text x="93.4347%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (50 samples, 0.39%)</title><rect x="93.3417%" y="229" width="0.3926%" height="15" fill="rgb(233,90,31)"/><text x="93.5917%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (34 samples, 0.27%)</title><rect x="93.4673%" y="213" width="0.2670%" height="15" fill="rgb(238,38,48)"/><text x="93.7173%" y="223.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (87 samples, 0.68%)</title><rect x="93.0669%" y="245" width="0.6831%" height="15" fill="rgb(251,110,5)"/><text x="93.3169%" y="255.50"></text></g><g><title>core::ptr::read (19 samples, 0.15%)</title><rect x="94.0170%" y="213" width="0.1492%" height="15" fill="rgb(216,3,12)"/><text x="94.2670%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (62 samples, 0.49%)</title><rect x="93.8678%" y="229" width="0.4868%" height="15" fill="rgb(253,137,17)"/><text x="94.1178%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (187 samples, 1.47%)</title><rect x="92.8942%" y="261" width="1.4683%" height="15" fill="rgb(210,117,42)"/><text x="93.1442%" y="271.50"></text></g><g><title>core::mem::swap (70 samples, 0.55%)</title><rect x="93.8128%" y="245" width="0.5496%" height="15" fill="rgb(242,65,18)"/><text x="94.0628%" y="255.50"></text></g><g><title>__pthread_start (6,981 samples, 54.81%)</title><rect x="39.5650%" y="485" width="54.8131%" height="15" fill="rgb(246,167,8)"/><text x="39.8150%" y="495.50">__pthread_start</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/std::sys_common::thread::start_thread/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (6,981 samples, 54.81%)</title><rect x="39.5650%" y="469" width="54.8131%" height="15" fill="rgb(239,83,16)"/><text x="39.8150%" y="479.50">std::sys::unix::thread::Thread::new::thread_start/std::sys_common::thread::start_thread/&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (6,981 samples, 54.81%)</title><rect x="39.5650%" y="453" width="54.8131%" height="15" fill="rgb(240,61,34)"/><text x="39.8150%" y="463.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6,981 samples, 54.81%)</title><rect x="39.5650%" y="437" width="54.8131%" height="15" fill="rgb(229,3,26)"/><text x="39.8150%" y="447.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (6,981 samples, 54.81%)</title><rect x="39.5650%" y="421" width="54.8131%" height="15" fill="rgb(242,199,20)"/><text x="39.8150%" y="431.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (6,981 samples, 54.81%)</title><rect x="39.5650%" y="405" width="54.8131%" height="15" fill="rgb(215,145,18)"/><text x="39.8150%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,981 samples, 54.81%)</title><rect x="39.5650%" y="389" width="54.8131%" height="15" fill="rgb(221,109,0)"/><text x="39.8150%" y="399.50">std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (6,981 samples, 54.81%)</title><rect x="39.5650%" y="373" width="54.8131%" height="15" fill="rgb(234,64,37)"/><text x="39.8150%" y="383.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (6,981 samples, 54.81%)</title><rect x="39.5650%" y="357" width="54.8131%" height="15" fill="rgb(222,78,43)"/><text x="39.8150%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,981 samples, 54.81%)</title><rect x="39.5650%" y="341" width="54.8131%" height="15" fill="rgb(216,219,34)"/><text x="39.8150%" y="351.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (6,981 samples, 54.81%)</title><rect x="39.5650%" y="325" width="54.8131%" height="15" fill="rgb(252,24,13)"/><text x="39.8150%" y="335.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,981 samples, 54.81%)</title><rect x="39.5650%" y="309" width="54.8131%" height="15" fill="rgb(224,16,27)"/><text x="39.8150%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>xwords::fill_crossword::{{closure}} (6,977 samples, 54.78%)</title><rect x="39.5964%" y="293" width="54.7817%" height="15" fill="rgb(242,190,38)"/><text x="39.8464%" y="303.50">xwords::fill_crossword::{{closure}}</text></g><g><title>xwords::parse_words (1,420 samples, 11.15%)</title><rect x="83.2286%" y="277" width="11.1495%" height="15" fill="rgb(242,72,24)"/><text x="83.4786%" y="287.50">xwords::parse_wo..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (17 samples, 0.13%)</title><rect x="94.5430%" y="53" width="0.1335%" height="15" fill="rgb(212,76,2)"/><text x="94.7930%" y="63.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (68 samples, 0.53%)</title><rect x="94.4724%" y="85" width="0.5339%" height="15" fill="rgb(229,0,19)"/><text x="94.7224%" y="95.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (68 samples, 0.53%)</title><rect x="94.4724%" y="69" width="0.5339%" height="15" fill="rgb(238,189,46)"/><text x="94.7224%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (41 samples, 0.32%)</title><rect x="94.6844%" y="53" width="0.3219%" height="15" fill="rgb(227,112,10)"/><text x="94.9344%" y="63.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (41 samples, 0.32%)</title><rect x="94.6844%" y="37" width="0.3219%" height="15" fill="rgb(230,95,38)"/><text x="94.9344%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (87 samples, 0.68%)</title><rect x="94.4724%" y="277" width="0.6831%" height="15" fill="rgb(220,44,33)"/><text x="94.7224%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (87 samples, 0.68%)</title><rect x="94.4724%" y="261" width="0.6831%" height="15" fill="rgb(226,17,21)"/><text x="94.7224%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (87 samples, 0.68%)</title><rect x="94.4724%" y="245" width="0.6831%" height="15" fill="rgb(227,61,20)"/><text x="94.7224%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (87 samples, 0.68%)</title><rect x="94.4724%" y="229" width="0.6831%" height="15" fill="rgb(214,24,13)"/><text x="94.7224%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (87 samples, 0.68%)</title><rect x="94.4724%" y="213" width="0.6831%" height="15" fill="rgb(217,223,4)"/><text x="94.7224%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (87 samples, 0.68%)</title><rect x="94.4724%" y="197" width="0.6831%" height="15" fill="rgb(206,82,16)"/><text x="94.7224%" y="207.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (87 samples, 0.68%)</title><rect x="94.4724%" y="181" width="0.6831%" height="15" fill="rgb(234,181,27)"/><text x="94.7224%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (87 samples, 0.68%)</title><rect x="94.4724%" y="165" width="0.6831%" height="15" fill="rgb(239,52,42)"/><text x="94.7224%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (87 samples, 0.68%)</title><rect x="94.4724%" y="149" width="0.6831%" height="15" fill="rgb(230,227,11)"/><text x="94.7224%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (87 samples, 0.68%)</title><rect x="94.4724%" y="133" width="0.6831%" height="15" fill="rgb(213,8,49)"/><text x="94.7224%" y="143.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.68%)</title><rect x="94.4724%" y="117" width="0.6831%" height="15" fill="rgb(247,12,53)"/><text x="94.7224%" y="127.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (87 samples, 0.68%)</title><rect x="94.4724%" y="101" width="0.6831%" height="15" fill="rgb(226,42,12)"/><text x="94.7224%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.15%)</title><rect x="95.0063%" y="85" width="0.1492%" height="15" fill="rgb(210,5,28)"/><text x="95.2563%" y="95.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next::{{closure}} (19 samples, 0.15%)</title><rect x="95.0063%" y="69" width="0.1492%" height="15" fill="rgb(233,135,38)"/><text x="95.2563%" y="79.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (19 samples, 0.15%)</title><rect x="95.0063%" y="53" width="0.1492%" height="15" fill="rgb(209,31,49)"/><text x="95.2563%" y="63.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (16 samples, 0.13%)</title><rect x="95.0298%" y="37" width="0.1256%" height="15" fill="rgb(218,99,43)"/><text x="95.2798%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (88 samples, 0.69%)</title><rect x="94.4724%" y="325" width="0.6910%" height="15" fill="rgb(233,171,20)"/><text x="94.7224%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (88 samples, 0.69%)</title><rect x="94.4724%" y="309" width="0.6910%" height="15" fill="rgb(239,61,3)"/><text x="94.7224%" y="319.50"></text></g><g><title>core::iter::traits::iterator::fold1 (88 samples, 0.69%)</title><rect x="94.4724%" y="293" width="0.6910%" height="15" fill="rgb(227,3,9)"/><text x="94.7224%" y="303.50"></text></g><g><title>xwords::find_fills (41 samples, 0.32%)</title><rect x="95.1633%" y="325" width="0.3219%" height="15" fill="rgb(206,44,44)"/><text x="95.4133%" y="335.50"></text></g><g><title>xwords::trie::Trie::words (41 samples, 0.32%)</title><rect x="95.1633%" y="309" width="0.3219%" height="15" fill="rgb(233,86,47)"/><text x="95.4133%" y="319.50"></text></g><g><title>xwords::trie::TrieNode::words (41 samples, 0.32%)</title><rect x="95.1633%" y="293" width="0.3219%" height="15" fill="rgb(231,84,23)"/><text x="95.4133%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::words (39 samples, 0.31%)</title><rect x="95.1790%" y="277" width="0.3062%" height="15" fill="rgb(234,206,20)"/><text x="95.4290%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::words (39 samples, 0.31%)</title><rect x="95.1790%" y="261" width="0.3062%" height="15" fill="rgb(240,41,34)"/><text x="95.4290%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::words (39 samples, 0.31%)</title><rect x="95.1790%" y="245" width="0.3062%" height="15" fill="rgb(222,211,41)"/><text x="95.4290%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::words (34 samples, 0.27%)</title><rect x="95.2183%" y="229" width="0.2670%" height="15" fill="rgb(216,205,46)"/><text x="95.4683%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::words (29 samples, 0.23%)</title><rect x="95.2575%" y="213" width="0.2277%" height="15" fill="rgb(241,162,33)"/><text x="95.5075%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::words (28 samples, 0.22%)</title><rect x="95.2654%" y="197" width="0.2198%" height="15" fill="rgb(254,166,51)"/><text x="95.5154%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::words (21 samples, 0.16%)</title><rect x="95.3204%" y="181" width="0.1649%" height="15" fill="rgb(232,60,51)"/><text x="95.5704%" y="191.50"></text></g><g><title>xwords::trie::TrieNode::words (15 samples, 0.12%)</title><rect x="95.3675%" y="165" width="0.1178%" height="15" fill="rgb(211,222,17)"/><text x="95.6175%" y="175.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.10%)</title><rect x="95.5795%" y="165" width="0.1021%" height="15" fill="rgb(249,200,18)"/><text x="95.8295%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.10%)</title><rect x="95.5795%" y="149" width="0.1021%" height="15" fill="rgb(236,140,49)"/><text x="95.8295%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (13 samples, 0.10%)</title><rect x="95.5795%" y="133" width="0.1021%" height="15" fill="rgb(232,213,10)"/><text x="95.8295%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (165 samples, 1.30%)</title><rect x="94.4724%" y="485" width="1.2955%" height="15" fill="rgb(215,43,29)"/><text x="94.7224%" y="495.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (165 samples, 1.30%)</title><rect x="94.4724%" y="469" width="1.2955%" height="15" fill="rgb(212,135,42)"/><text x="94.7224%" y="479.50"></text></g><g><title>std::panic::catch_unwind (165 samples, 1.30%)</title><rect x="94.4724%" y="453" width="1.2955%" height="15" fill="rgb(238,44,13)"/><text x="94.7224%" y="463.50"></text></g><g><title>std::panicking::try (165 samples, 1.30%)</title><rect x="94.4724%" y="437" width="1.2955%" height="15" fill="rgb(234,196,45)"/><text x="94.7224%" y="447.50"></text></g><g><title>__rust_maybe_catch_panic (165 samples, 1.30%)</title><rect x="94.4724%" y="421" width="1.2955%" height="15" fill="rgb(222,145,28)"/><text x="94.7224%" y="431.50"></text></g><g><title>std::panicking::try::do_call (165 samples, 1.30%)</title><rect x="94.4724%" y="405" width="1.2955%" height="15" fill="rgb(242,55,54)"/><text x="94.7224%" y="415.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (165 samples, 1.30%)</title><rect x="94.4724%" y="389" width="1.2955%" height="15" fill="rgb(228,105,34)"/><text x="94.7224%" y="399.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (165 samples, 1.30%)</title><rect x="94.4724%" y="373" width="1.2955%" height="15" fill="rgb(219,193,8)"/><text x="94.7224%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (165 samples, 1.30%)</title><rect x="94.4724%" y="357" width="1.2955%" height="15" fill="rgb(224,101,25)"/><text x="94.7224%" y="367.50"></text></g><g><title>xwords::fill_crossword::{{closure}} (165 samples, 1.30%)</title><rect x="94.4724%" y="341" width="1.2955%" height="15" fill="rgb(228,80,5)"/><text x="94.7224%" y="351.50"></text></g><g><title>xwords::is_viable (36 samples, 0.28%)</title><rect x="95.4852%" y="325" width="0.2827%" height="15" fill="rgb(211,99,32)"/><text x="95.7352%" y="335.50"></text></g><g><title>xwords::trie::Trie::is_word (30 samples, 0.24%)</title><rect x="95.5323%" y="309" width="0.2356%" height="15" fill="rgb(222,178,50)"/><text x="95.7823%" y="319.50"></text></g><g><title>xwords::trie::TrieNode::is_word (30 samples, 0.24%)</title><rect x="95.5323%" y="293" width="0.2356%" height="15" fill="rgb(219,0,36)"/><text x="95.7823%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::is_word (30 samples, 0.24%)</title><rect x="95.5323%" y="277" width="0.2356%" height="15" fill="rgb(237,111,29)"/><text x="95.7823%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::is_word (30 samples, 0.24%)</title><rect x="95.5323%" y="261" width="0.2356%" height="15" fill="rgb(216,105,32)"/><text x="95.7823%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::is_word (29 samples, 0.23%)</title><rect x="95.5402%" y="245" width="0.2277%" height="15" fill="rgb(242,79,21)"/><text x="95.7902%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::is_word (29 samples, 0.23%)</title><rect x="95.5402%" y="229" width="0.2277%" height="15" fill="rgb(230,183,53)"/><text x="95.7902%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::is_word (29 samples, 0.23%)</title><rect x="95.5402%" y="213" width="0.2277%" height="15" fill="rgb(243,123,4)"/><text x="95.7902%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::is_word (26 samples, 0.20%)</title><rect x="95.5638%" y="197" width="0.2041%" height="15" fill="rgb(212,42,12)"/><text x="95.8138%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::is_word (24 samples, 0.19%)</title><rect x="95.5795%" y="181" width="0.1884%" height="15" fill="rgb(207,184,3)"/><text x="95.8295%" y="191.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (22 samples, 0.17%)</title><rect x="95.8307%" y="69" width="0.1727%" height="15" fill="rgb(233,16,48)"/><text x="96.0807%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (18 samples, 0.14%)</title><rect x="95.8621%" y="53" width="0.1413%" height="15" fill="rgb(206,10,28)"/><text x="96.1121%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (18 samples, 0.14%)</title><rect x="95.8621%" y="37" width="0.1413%" height="15" fill="rgb(208,123,33)"/><text x="96.1121%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (35 samples, 0.27%)</title><rect x="95.8307%" y="85" width="0.2748%" height="15" fill="rgb(238,184,51)"/><text x="96.0807%" y="95.50"></text></g><g><title>core::mem::swap (13 samples, 0.10%)</title><rect x="96.0035%" y="69" width="0.1021%" height="15" fill="rgb(214,167,54)"/><text x="96.2535%" y="79.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (13 samples, 0.10%)</title><rect x="96.0035%" y="53" width="0.1021%" height="15" fill="rgb(238,196,26)"/><text x="96.2535%" y="63.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (58 samples, 0.46%)</title><rect x="95.7679%" y="117" width="0.4554%" height="15" fill="rgb(223,191,50)"/><text x="96.0179%" y="127.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (58 samples, 0.46%)</title><rect x="95.7679%" y="101" width="0.4554%" height="15" fill="rgb(220,34,49)"/><text x="96.0179%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (15 samples, 0.12%)</title><rect x="96.1055%" y="85" width="0.1178%" height="15" fill="rgb(251,171,48)"/><text x="96.3555%" y="95.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (15 samples, 0.12%)</title><rect x="96.1055%" y="69" width="0.1178%" height="15" fill="rgb(254,99,49)"/><text x="96.3555%" y="79.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (15 samples, 0.12%)</title><rect x="96.1055%" y="53" width="0.1178%" height="15" fill="rgb(226,68,33)"/><text x="96.3555%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (65 samples, 0.51%)</title><rect x="95.7679%" y="357" width="0.5104%" height="15" fill="rgb(228,213,19)"/><text x="96.0179%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (65 samples, 0.51%)</title><rect x="95.7679%" y="341" width="0.5104%" height="15" fill="rgb(225,41,32)"/><text x="96.0179%" y="351.50"></text></g><g><title>core::iter::traits::iterator::fold1 (65 samples, 0.51%)</title><rect x="95.7679%" y="325" width="0.5104%" height="15" fill="rgb(243,16,28)"/><text x="96.0179%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.51%)</title><rect x="95.7679%" y="309" width="0.5104%" height="15" fill="rgb(240,127,14)"/><text x="96.0179%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 0.51%)</title><rect x="95.7679%" y="293" width="0.5104%" height="15" fill="rgb(205,204,41)"/><text x="96.0179%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (65 samples, 0.51%)</title><rect x="95.7679%" y="277" width="0.5104%" height="15" fill="rgb(238,151,38)"/><text x="96.0179%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (65 samples, 0.51%)</title><rect x="95.7679%" y="261" width="0.5104%" height="15" fill="rgb(224,123,20)"/><text x="96.0179%" y="271.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (65 samples, 0.51%)</title><rect x="95.7679%" y="245" width="0.5104%" height="15" fill="rgb(234,61,0)"/><text x="96.0179%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (65 samples, 0.51%)</title><rect x="95.7679%" y="229" width="0.5104%" height="15" fill="rgb(207,11,41)"/><text x="96.0179%" y="239.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (65 samples, 0.51%)</title><rect x="95.7679%" y="213" width="0.5104%" height="15" fill="rgb(252,27,37)"/><text x="96.0179%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (65 samples, 0.51%)</title><rect x="95.7679%" y="197" width="0.5104%" height="15" fill="rgb(227,198,49)"/><text x="96.0179%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 0.51%)</title><rect x="95.7679%" y="181" width="0.5104%" height="15" fill="rgb(222,16,13)"/><text x="96.0179%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (65 samples, 0.51%)</title><rect x="95.7679%" y="165" width="0.5104%" height="15" fill="rgb(231,216,10)"/><text x="96.0179%" y="175.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.51%)</title><rect x="95.7679%" y="149" width="0.5104%" height="15" fill="rgb(252,197,41)"/><text x="96.0179%" y="159.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (65 samples, 0.51%)</title><rect x="95.7679%" y="133" width="0.5104%" height="15" fill="rgb(242,109,27)"/><text x="96.0179%" y="143.50"></text></g><g><title>xwords::find_fills (16 samples, 0.13%)</title><rect x="96.2783%" y="357" width="0.1256%" height="15" fill="rgb(214,111,47)"/><text x="96.5283%" y="367.50"></text></g><g><title>xwords::trie::Trie::words (16 samples, 0.13%)</title><rect x="96.2783%" y="341" width="0.1256%" height="15" fill="rgb(212,92,33)"/><text x="96.5283%" y="351.50"></text></g><g><title>xwords::trie::TrieNode::words (16 samples, 0.13%)</title><rect x="96.2783%" y="325" width="0.1256%" height="15" fill="rgb(247,210,0)"/><text x="96.5283%" y="335.50"></text></g><g><title>xwords::trie::TrieNode::words (16 samples, 0.13%)</title><rect x="96.2783%" y="309" width="0.1256%" height="15" fill="rgb(234,112,54)"/><text x="96.5283%" y="319.50"></text></g><g><title>xwords::trie::TrieNode::words (16 samples, 0.13%)</title><rect x="96.2783%" y="293" width="0.1256%" height="15" fill="rgb(237,63,37)"/><text x="96.5283%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::words (15 samples, 0.12%)</title><rect x="96.2861%" y="277" width="0.1178%" height="15" fill="rgb(229,96,46)"/><text x="96.5361%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::words (14 samples, 0.11%)</title><rect x="96.2940%" y="261" width="0.1099%" height="15" fill="rgb(231,201,44)"/><text x="96.5440%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::words (14 samples, 0.11%)</title><rect x="96.2940%" y="245" width="0.1099%" height="15" fill="rgb(219,174,37)"/><text x="96.5440%" y="255.50"></text></g><g><title>std::panic::catch_unwind (91 samples, 0.71%)</title><rect x="95.7679%" y="485" width="0.7145%" height="15" fill="rgb(254,38,45)"/><text x="96.0179%" y="495.50"></text></g><g><title>std::panicking::try (91 samples, 0.71%)</title><rect x="95.7679%" y="469" width="0.7145%" height="15" fill="rgb(228,197,15)"/><text x="96.0179%" y="479.50"></text></g><g><title>__rust_maybe_catch_panic (91 samples, 0.71%)</title><rect x="95.7679%" y="453" width="0.7145%" height="15" fill="rgb(251,43,52)"/><text x="96.0179%" y="463.50"></text></g><g><title>std::panicking::try::do_call (91 samples, 0.71%)</title><rect x="95.7679%" y="437" width="0.7145%" height="15" fill="rgb(243,49,36)"/><text x="96.0179%" y="447.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (91 samples, 0.71%)</title><rect x="95.7679%" y="421" width="0.7145%" height="15" fill="rgb(252,27,28)"/><text x="96.0179%" y="431.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (91 samples, 0.71%)</title><rect x="95.7679%" y="405" width="0.7145%" height="15" fill="rgb(216,71,0)"/><text x="96.0179%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (91 samples, 0.71%)</title><rect x="95.7679%" y="389" width="0.7145%" height="15" fill="rgb(225,26,31)"/><text x="96.0179%" y="399.50"></text></g><g><title>xwords::fill_crossword::{{closure}} (91 samples, 0.71%)</title><rect x="95.7679%" y="373" width="0.7145%" height="15" fill="rgb(226,75,43)"/><text x="96.0179%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (21 samples, 0.16%)</title><rect x="96.5217%" y="373" width="0.1649%" height="15" fill="rgb(225,219,9)"/><text x="96.7717%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (21 samples, 0.16%)</title><rect x="96.5217%" y="357" width="0.1649%" height="15" fill="rgb(245,70,41)"/><text x="96.7717%" y="367.50"></text></g><g><title>core::iter::traits::iterator::fold1 (21 samples, 0.16%)</title><rect x="96.5217%" y="341" width="0.1649%" height="15" fill="rgb(218,169,31)"/><text x="96.7717%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.16%)</title><rect x="96.5217%" y="325" width="0.1649%" height="15" fill="rgb(237,179,22)"/><text x="96.7717%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.16%)</title><rect x="96.5217%" y="309" width="0.1649%" height="15" fill="rgb(226,216,46)"/><text x="96.7717%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.16%)</title><rect x="96.5217%" y="293" width="0.1649%" height="15" fill="rgb(210,142,42)"/><text x="96.7717%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (21 samples, 0.16%)</title><rect x="96.5217%" y="277" width="0.1649%" height="15" fill="rgb(254,36,20)"/><text x="96.7717%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (21 samples, 0.16%)</title><rect x="96.5217%" y="261" width="0.1649%" height="15" fill="rgb(205,132,15)"/><text x="96.7717%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (21 samples, 0.16%)</title><rect x="96.5217%" y="245" width="0.1649%" height="15" fill="rgb(215,32,34)"/><text x="96.7717%" y="255.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (21 samples, 0.16%)</title><rect x="96.5217%" y="229" width="0.1649%" height="15" fill="rgb(225,129,11)"/><text x="96.7717%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (21 samples, 0.16%)</title><rect x="96.5217%" y="213" width="0.1649%" height="15" fill="rgb(218,216,29)"/><text x="96.7717%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.16%)</title><rect x="96.5217%" y="197" width="0.1649%" height="15" fill="rgb(244,93,41)"/><text x="96.7717%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (21 samples, 0.16%)</title><rect x="96.5217%" y="181" width="0.1649%" height="15" fill="rgb(209,160,18)"/><text x="96.7717%" y="191.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.16%)</title><rect x="96.5217%" y="165" width="0.1649%" height="15" fill="rgb(236,221,48)"/><text x="96.7717%" y="175.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (21 samples, 0.16%)</title><rect x="96.5217%" y="149" width="0.1649%" height="15" fill="rgb(230,46,49)"/><text x="96.7717%" y="159.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (21 samples, 0.16%)</title><rect x="96.5217%" y="133" width="0.1649%" height="15" fill="rgb(243,201,16)"/><text x="96.7717%" y="143.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (21 samples, 0.16%)</title><rect x="96.5217%" y="117" width="0.1649%" height="15" fill="rgb(209,74,53)"/><text x="96.7717%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.10%)</title><rect x="96.5845%" y="101" width="0.1021%" height="15" fill="rgb(226,184,9)"/><text x="96.8345%" y="111.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.10%)</title><rect x="96.5845%" y="85" width="0.1021%" height="15" fill="rgb(205,208,26)"/><text x="96.8345%" y="95.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13 samples, 0.10%)</title><rect x="96.5845%" y="69" width="0.1021%" height="15" fill="rgb(223,40,8)"/><text x="96.8345%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.10%)</title><rect x="96.5845%" y="53" width="0.1021%" height="15" fill="rgb(251,59,31)"/><text x="96.8345%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.10%)</title><rect x="96.5845%" y="37" width="0.1021%" height="15" fill="rgb(226,162,36)"/><text x="96.8345%" y="47.50"></text></g><g><title>xwords::find_fills (13 samples, 0.10%)</title><rect x="96.6866%" y="373" width="0.1021%" height="15" fill="rgb(206,74,25)"/><text x="96.9366%" y="383.50"></text></g><g><title>xwords::trie::Trie::words (13 samples, 0.10%)</title><rect x="96.6866%" y="357" width="0.1021%" height="15" fill="rgb(229,66,3)"/><text x="96.9366%" y="367.50"></text></g><g><title>xwords::trie::TrieNode::words (13 samples, 0.10%)</title><rect x="96.6866%" y="341" width="0.1021%" height="15" fill="rgb(252,25,50)"/><text x="96.9366%" y="351.50"></text></g><g><title>std::panicking::try (35 samples, 0.27%)</title><rect x="96.5217%" y="485" width="0.2748%" height="15" fill="rgb(228,216,27)"/><text x="96.7717%" y="495.50"></text></g><g><title>__rust_maybe_catch_panic (35 samples, 0.27%)</title><rect x="96.5217%" y="469" width="0.2748%" height="15" fill="rgb(232,62,30)"/><text x="96.7717%" y="479.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.27%)</title><rect x="96.5217%" y="453" width="0.2748%" height="15" fill="rgb(249,157,21)"/><text x="96.7717%" y="463.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.27%)</title><rect x="96.5217%" y="437" width="0.2748%" height="15" fill="rgb(236,143,50)"/><text x="96.7717%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (35 samples, 0.27%)</title><rect x="96.5217%" y="421" width="0.2748%" height="15" fill="rgb(228,145,40)"/><text x="96.7717%" y="431.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35 samples, 0.27%)</title><rect x="96.5217%" y="405" width="0.2748%" height="15" fill="rgb(231,189,4)"/><text x="96.7717%" y="415.50"></text></g><g><title>xwords::fill_crossword::{{closure}} (35 samples, 0.27%)</title><rect x="96.5217%" y="389" width="0.2748%" height="15" fill="rgb(237,56,17)"/><text x="96.7717%" y="399.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (122 samples, 0.96%)</title><rect x="96.7965%" y="53" width="0.9579%" height="15" fill="rgb(254,194,39)"/><text x="97.0465%" y="63.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (110 samples, 0.86%)</title><rect x="96.8907%" y="37" width="0.8637%" height="15" fill="rgb(215,44,14)"/><text x="97.1407%" y="47.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 1.01%)</title><rect x="96.7965%" y="85" width="1.0129%" height="15" fill="rgb(243,175,19)"/><text x="97.0465%" y="95.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (129 samples, 1.01%)</title><rect x="96.7965%" y="69" width="1.0129%" height="15" fill="rgb(227,63,45)"/><text x="97.0465%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (133 samples, 1.04%)</title><rect x="96.7965%" y="245" width="1.0443%" height="15" fill="rgb(245,68,5)"/><text x="97.0465%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (133 samples, 1.04%)</title><rect x="96.7965%" y="229" width="1.0443%" height="15" fill="rgb(220,213,13)"/><text x="97.0465%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (133 samples, 1.04%)</title><rect x="96.7965%" y="213" width="1.0443%" height="15" fill="rgb(253,185,34)"/><text x="97.0465%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (133 samples, 1.04%)</title><rect x="96.7965%" y="197" width="1.0443%" height="15" fill="rgb(215,220,19)"/><text x="97.0465%" y="207.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (133 samples, 1.04%)</title><rect x="96.7965%" y="181" width="1.0443%" height="15" fill="rgb(247,83,3)"/><text x="97.0465%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (133 samples, 1.04%)</title><rect x="96.7965%" y="165" width="1.0443%" height="15" fill="rgb(246,163,33)"/><text x="97.0465%" y="175.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (133 samples, 1.04%)</title><rect x="96.7965%" y="149" width="1.0443%" height="15" fill="rgb(213,8,17)"/><text x="97.0465%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (133 samples, 1.04%)</title><rect x="96.7965%" y="133" width="1.0443%" height="15" fill="rgb(237,214,13)"/><text x="97.0465%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (133 samples, 1.04%)</title><rect x="96.7965%" y="117" width="1.0443%" height="15" fill="rgb(213,47,9)"/><text x="97.0465%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (133 samples, 1.04%)</title><rect x="96.7965%" y="101" width="1.0443%" height="15" fill="rgb(235,27,48)"/><text x="97.0465%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (134 samples, 1.05%)</title><rect x="96.7965%" y="293" width="1.0521%" height="15" fill="rgb(212,90,48)"/><text x="97.0465%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (134 samples, 1.05%)</title><rect x="96.7965%" y="277" width="1.0521%" height="15" fill="rgb(220,54,49)"/><text x="97.0465%" y="287.50"></text></g><g><title>core::iter::traits::iterator::fold1 (134 samples, 1.05%)</title><rect x="96.7965%" y="261" width="1.0521%" height="15" fill="rgb(234,28,17)"/><text x="97.0465%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.10%)</title><rect x="98.0135%" y="181" width="0.1021%" height="15" fill="rgb(241,96,10)"/><text x="98.2635%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.10%)</title><rect x="98.0135%" y="165" width="0.1021%" height="15" fill="rgb(246,151,18)"/><text x="98.2635%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.10%)</title><rect x="98.0135%" y="149" width="0.1021%" height="15" fill="rgb(251,225,36)"/><text x="98.2635%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.10%)</title><rect x="98.0135%" y="133" width="0.1021%" height="15" fill="rgb(212,144,20)"/><text x="98.2635%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (13 samples, 0.10%)</title><rect x="98.0135%" y="117" width="0.1021%" height="15" fill="rgb(243,189,31)"/><text x="98.2635%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Alloc&gt;::dealloc (13 samples, 0.10%)</title><rect x="98.0135%" y="101" width="0.1021%" height="15" fill="rgb(233,190,43)"/><text x="98.2635%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.10%)</title><rect x="98.0135%" y="85" width="0.1021%" height="15" fill="rgb(226,67,13)"/><text x="98.2635%" y="95.50"></text></g><g><title>xwords::find_fills (94 samples, 0.74%)</title><rect x="97.8800%" y="293" width="0.7381%" height="15" fill="rgb(243,34,52)"/><text x="98.1300%" y="303.50"></text></g><g><title>xwords::trie::Trie::words (94 samples, 0.74%)</title><rect x="97.8800%" y="277" width="0.7381%" height="15" fill="rgb(240,25,5)"/><text x="98.1300%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::words (94 samples, 0.74%)</title><rect x="97.8800%" y="261" width="0.7381%" height="15" fill="rgb(226,4,43)"/><text x="98.1300%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::words (93 samples, 0.73%)</title><rect x="97.8879%" y="245" width="0.7302%" height="15" fill="rgb(223,102,14)"/><text x="98.1379%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::words (93 samples, 0.73%)</title><rect x="97.8879%" y="229" width="0.7302%" height="15" fill="rgb(238,178,4)"/><text x="98.1379%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::words (91 samples, 0.71%)</title><rect x="97.9036%" y="213" width="0.7145%" height="15" fill="rgb(221,109,29)"/><text x="98.1536%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::words (85 samples, 0.67%)</title><rect x="97.9507%" y="197" width="0.6674%" height="15" fill="rgb(208,82,12)"/><text x="98.2007%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::words (63 samples, 0.49%)</title><rect x="98.1234%" y="181" width="0.4947%" height="15" fill="rgb(242,148,43)"/><text x="98.3734%" y="191.50"></text></g><g><title>xwords::trie::TrieNode::words (56 samples, 0.44%)</title><rect x="98.1784%" y="165" width="0.4397%" height="15" fill="rgb(250,213,17)"/><text x="98.4284%" y="175.50"></text></g><g><title>xwords::trie::TrieNode::words (33 samples, 0.26%)</title><rect x="98.3590%" y="149" width="0.2591%" height="15" fill="rgb(211,2,29)"/><text x="98.6090%" y="159.50"></text></g><g><title>xwords::trie::TrieNode::words (14 samples, 0.11%)</title><rect x="98.5082%" y="133" width="0.1099%" height="15" fill="rgb(228,66,13)"/><text x="98.7582%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.10%)</title><rect x="98.7673%" y="165" width="0.1021%" height="15" fill="rgb(205,3,20)"/><text x="99.0173%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.10%)</title><rect x="98.7673%" y="149" width="0.1021%" height="15" fill="rgb(225,148,14)"/><text x="99.0173%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (13 samples, 0.10%)</title><rect x="98.7673%" y="133" width="0.1021%" height="15" fill="rgb(252,161,6)"/><text x="99.0173%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.10%)</title><rect x="98.7673%" y="117" width="0.1021%" height="15" fill="rgb(231,154,17)"/><text x="99.0173%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.10%)</title><rect x="98.8693%" y="101" width="0.1021%" height="15" fill="rgb(253,149,14)"/><text x="99.1193%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (18 samples, 0.14%)</title><rect x="98.8693%" y="149" width="0.1413%" height="15" fill="rgb(226,57,40)"/><text x="99.1193%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (18 samples, 0.14%)</title><rect x="98.8693%" y="133" width="0.1413%" height="15" fill="rgb(210,57,53)"/><text x="99.1193%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (18 samples, 0.14%)</title><rect x="98.8693%" y="117" width="0.1413%" height="15" fill="rgb(226,196,31)"/><text x="99.1193%" y="127.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start/std::sys_common::thread::start_thread/&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (297 samples, 2.33%)</title><rect x="96.7965%" y="485" width="2.3320%" height="15" fill="rgb(252,93,21)"/><text x="97.0465%" y="495.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (297 samples, 2.33%)</title><rect x="96.7965%" y="469" width="2.3320%" height="15" fill="rgb(251,184,45)"/><text x="97.0465%" y="479.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (297 samples, 2.33%)</title><rect x="96.7965%" y="453" width="2.3320%" height="15" fill="rgb(234,129,23)"/><text x="97.0465%" y="463.50">c..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (297 samples, 2.33%)</title><rect x="96.7965%" y="437" width="2.3320%" height="15" fill="rgb(242,13,48)"/><text x="97.0465%" y="447.50">s..</text></g><g><title>std::panic::catch_unwind (297 samples, 2.33%)</title><rect x="96.7965%" y="421" width="2.3320%" height="15" fill="rgb(208,94,31)"/><text x="97.0465%" y="431.50">s..</text></g><g><title>std::panicking::try (297 samples, 2.33%)</title><rect x="96.7965%" y="405" width="2.3320%" height="15" fill="rgb(250,220,5)"/><text x="97.0465%" y="415.50">s..</text></g><g><title>__rust_maybe_catch_panic (297 samples, 2.33%)</title><rect x="96.7965%" y="389" width="2.3320%" height="15" fill="rgb(207,220,11)"/><text x="97.0465%" y="399.50">_..</text></g><g><title>std::panicking::try::do_call (297 samples, 2.33%)</title><rect x="96.7965%" y="373" width="2.3320%" height="15" fill="rgb(229,139,32)"/><text x="97.0465%" y="383.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (297 samples, 2.33%)</title><rect x="96.7965%" y="357" width="2.3320%" height="15" fill="rgb(248,38,23)"/><text x="97.0465%" y="367.50">&lt;..</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (297 samples, 2.33%)</title><rect x="96.7965%" y="341" width="2.3320%" height="15" fill="rgb(214,36,53)"/><text x="97.0465%" y="351.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (297 samples, 2.33%)</title><rect x="96.7965%" y="325" width="2.3320%" height="15" fill="rgb(219,216,10)"/><text x="97.0465%" y="335.50">s..</text></g><g><title>xwords::fill_crossword::{{closure}} (297 samples, 2.33%)</title><rect x="96.7965%" y="309" width="2.3320%" height="15" fill="rgb(223,62,35)"/><text x="97.0465%" y="319.50">x..</text></g><g><title>xwords::is_viable (65 samples, 0.51%)</title><rect x="98.6181%" y="293" width="0.5104%" height="15" fill="rgb(219,224,20)"/><text x="98.8681%" y="303.50"></text></g><g><title>xwords::trie::Trie::is_word (49 samples, 0.38%)</title><rect x="98.7437%" y="277" width="0.3847%" height="15" fill="rgb(239,12,51)"/><text x="98.9937%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::is_word (49 samples, 0.38%)</title><rect x="98.7437%" y="261" width="0.3847%" height="15" fill="rgb(210,2,4)"/><text x="98.9937%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::is_word (49 samples, 0.38%)</title><rect x="98.7437%" y="245" width="0.3847%" height="15" fill="rgb(214,68,39)"/><text x="98.9937%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::is_word (48 samples, 0.38%)</title><rect x="98.7516%" y="229" width="0.3769%" height="15" fill="rgb(254,27,28)"/><text x="99.0016%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::is_word (48 samples, 0.38%)</title><rect x="98.7516%" y="213" width="0.3769%" height="15" fill="rgb(237,181,3)"/><text x="99.0016%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::is_word (48 samples, 0.38%)</title><rect x="98.7516%" y="197" width="0.3769%" height="15" fill="rgb(248,37,37)"/><text x="99.0016%" y="207.50"></text></g><g><title>xwords::trie::TrieNode::is_word (46 samples, 0.36%)</title><rect x="98.7673%" y="181" width="0.3612%" height="15" fill="rgb(226,46,23)"/><text x="99.0173%" y="191.50"></text></g><g><title>xwords::trie::TrieNode::is_word (33 samples, 0.26%)</title><rect x="98.8693%" y="165" width="0.2591%" height="15" fill="rgb(206,142,41)"/><text x="99.1193%" y="175.50"></text></g><g><title>xwords::trie::TrieNode::is_word (15 samples, 0.12%)</title><rect x="99.0107%" y="149" width="0.1178%" height="15" fill="rgb(210,73,43)"/><text x="99.2607%" y="159.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::add_usize (16 samples, 0.13%)</title><rect x="99.2462%" y="53" width="0.1256%" height="15" fill="rgb(241,152,41)"/><text x="99.4962%" y="63.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (22 samples, 0.17%)</title><rect x="99.2462%" y="69" width="0.1727%" height="15" fill="rgb(252,26,52)"/><text x="99.4962%" y="79.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (55 samples, 0.43%)</title><rect x="99.1520%" y="101" width="0.4318%" height="15" fill="rgb(205,13,4)"/><text x="99.4020%" y="111.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (55 samples, 0.43%)</title><rect x="99.1520%" y="85" width="0.4318%" height="15" fill="rgb(214,6,29)"/><text x="99.4020%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (21 samples, 0.16%)</title><rect x="99.4190%" y="69" width="0.1649%" height="15" fill="rgb(211,70,24)"/><text x="99.6690%" y="79.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get (21 samples, 0.16%)</title><rect x="99.4190%" y="53" width="0.1649%" height="15" fill="rgb(216,135,14)"/><text x="99.6690%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key (67 samples, 0.53%)</title><rect x="99.1520%" y="341" width="0.5261%" height="15" fill="rgb(227,68,5)"/><text x="99.4020%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (67 samples, 0.53%)</title><rect x="99.1520%" y="325" width="0.5261%" height="15" fill="rgb(237,200,1)"/><text x="99.4020%" y="335.50"></text></g><g><title>core::iter::traits::iterator::fold1 (67 samples, 0.53%)</title><rect x="99.1520%" y="309" width="0.5261%" height="15" fill="rgb(247,68,39)"/><text x="99.4020%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.53%)</title><rect x="99.1520%" y="293" width="0.5261%" height="15" fill="rgb(217,197,13)"/><text x="99.4020%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (67 samples, 0.53%)</title><rect x="99.1520%" y="277" width="0.5261%" height="15" fill="rgb(246,192,36)"/><text x="99.4020%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (67 samples, 0.53%)</title><rect x="99.1520%" y="261" width="0.5261%" height="15" fill="rgb(238,229,51)"/><text x="99.4020%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::{{closure}} (67 samples, 0.53%)</title><rect x="99.1520%" y="245" width="0.5261%" height="15" fill="rgb(225,1,14)"/><text x="99.4020%" y="255.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (67 samples, 0.53%)</title><rect x="99.1520%" y="229" width="0.5261%" height="15" fill="rgb(222,41,40)"/><text x="99.4020%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by_key::key::{{closure}} (67 samples, 0.53%)</title><rect x="99.1520%" y="213" width="0.5261%" height="15" fill="rgb(207,198,20)"/><text x="99.4020%" y="223.50"></text></g><g><title>xwords::fill_crossword::{{closure}}::{{closure}} (67 samples, 0.53%)</title><rect x="99.1520%" y="197" width="0.5261%" height="15" fill="rgb(231,15,2)"/><text x="99.4020%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (67 samples, 0.53%)</title><rect x="99.1520%" y="181" width="0.5261%" height="15" fill="rgb(211,101,39)"/><text x="99.4020%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (67 samples, 0.53%)</title><rect x="99.1520%" y="165" width="0.5261%" height="15" fill="rgb(224,116,18)"/><text x="99.4020%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (67 samples, 0.53%)</title><rect x="99.1520%" y="149" width="0.5261%" height="15" fill="rgb(210,192,4)"/><text x="99.4020%" y="159.50"></text></g><g><title>&lt;core::str::Matches&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.53%)</title><rect x="99.1520%" y="133" width="0.5261%" height="15" fill="rgb(254,35,36)"/><text x="99.4020%" y="143.50"></text></g><g><title>core::str::MatchesInternal&lt;P&gt;::next (67 samples, 0.53%)</title><rect x="99.1520%" y="117" width="0.5261%" height="15" fill="rgb(213,148,50)"/><text x="99.4020%" y="127.50"></text></g><g><title>xwords::find_fills (32 samples, 0.25%)</title><rect x="99.6781%" y="341" width="0.2513%" height="15" fill="rgb(205,220,20)"/><text x="99.9281%" y="351.50"></text></g><g><title>xwords::trie::Trie::words (31 samples, 0.24%)</title><rect x="99.6859%" y="325" width="0.2434%" height="15" fill="rgb(213,189,37)"/><text x="99.9359%" y="335.50"></text></g><g><title>xwords::trie::TrieNode::words (31 samples, 0.24%)</title><rect x="99.6859%" y="309" width="0.2434%" height="15" fill="rgb(241,153,3)"/><text x="99.9359%" y="319.50"></text></g><g><title>xwords::trie::TrieNode::words (31 samples, 0.24%)</title><rect x="99.6859%" y="293" width="0.2434%" height="15" fill="rgb(248,100,28)"/><text x="99.9359%" y="303.50"></text></g><g><title>xwords::trie::TrieNode::words (31 samples, 0.24%)</title><rect x="99.6859%" y="277" width="0.2434%" height="15" fill="rgb(237,138,46)"/><text x="99.9359%" y="287.50"></text></g><g><title>xwords::trie::TrieNode::words (30 samples, 0.24%)</title><rect x="99.6938%" y="261" width="0.2356%" height="15" fill="rgb(243,16,15)"/><text x="99.9438%" y="271.50"></text></g><g><title>xwords::trie::TrieNode::words (27 samples, 0.21%)</title><rect x="99.7173%" y="245" width="0.2120%" height="15" fill="rgb(212,37,16)"/><text x="99.9673%" y="255.50"></text></g><g><title>xwords::trie::TrieNode::words (17 samples, 0.13%)</title><rect x="99.7959%" y="229" width="0.1335%" height="15" fill="rgb(222,169,27)"/><text x="100.0459%" y="239.50"></text></g><g><title>xwords::trie::TrieNode::words (14 samples, 0.11%)</title><rect x="99.8194%" y="213" width="0.1099%" height="15" fill="rgb(222,220,50)"/><text x="100.0694%" y="223.50"></text></g><g><title>xwords::trie::TrieNode::words (14 samples, 0.11%)</title><rect x="99.8194%" y="197" width="0.1099%" height="15" fill="rgb(254,93,1)"/><text x="100.0694%" y="207.50"></text></g><g><title>all (12,736 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(252,192,40)"/><text x="0.2500%" y="527.50"></text></g><g><title>thread (8,973 samples, 70.45%)</title><rect x="29.5462%" y="501" width="70.4538%" height="15" fill="rgb(251,75,4)"/><text x="29.7962%" y="511.50">thread</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (108 samples, 0.85%)</title><rect x="99.1520%" y="485" width="0.8480%" height="15" fill="rgb(213,75,21)"/><text x="99.4020%" y="495.50"></text></g><g><title>std::panic::catch_unwind (108 samples, 0.85%)</title><rect x="99.1520%" y="469" width="0.8480%" height="15" fill="rgb(254,128,32)"/><text x="99.4020%" y="479.50"></text></g><g><title>std::panicking::try (108 samples, 0.85%)</title><rect x="99.1520%" y="453" width="0.8480%" height="15" fill="rgb(207,166,6)"/><text x="99.4020%" y="463.50"></text></g><g><title>__rust_maybe_catch_panic (108 samples, 0.85%)</title><rect x="99.1520%" y="437" width="0.8480%" height="15" fill="rgb(228,12,8)"/><text x="99.4020%" y="447.50"></text></g><g><title>std::panicking::try::do_call (108 samples, 0.85%)</title><rect x="99.1520%" y="421" width="0.8480%" height="15" fill="rgb(219,5,50)"/><text x="99.4020%" y="431.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (108 samples, 0.85%)</title><rect x="99.1520%" y="405" width="0.8480%" height="15" fill="rgb(231,220,14)"/><text x="99.4020%" y="415.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (108 samples, 0.85%)</title><rect x="99.1520%" y="389" width="0.8480%" height="15" fill="rgb(246,76,50)"/><text x="99.4020%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (108 samples, 0.85%)</title><rect x="99.1520%" y="373" width="0.8480%" height="15" fill="rgb(243,185,38)"/><text x="99.4020%" y="383.50"></text></g><g><title>xwords::fill_crossword::{{closure}} (108 samples, 0.85%)</title><rect x="99.1520%" y="357" width="0.8480%" height="15" fill="rgb(241,184,48)"/><text x="99.4020%" y="367.50"></text></g></svg></svg>